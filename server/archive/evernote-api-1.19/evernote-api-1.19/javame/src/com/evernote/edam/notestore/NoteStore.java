/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class NoteStore {

  /**
   * Service:  NoteStore
   * <p>
   * The NoteStore service is used by EDAM clients to exchange information
   * about the collection of notes in an account.  This is primarily used for
   * synchronization, but could also be used by a "thin" client without a full
   * local cache.
   * </p><p>
   * All functions take an "authenticationToken" parameter, which is the
   * value returned by the UserStore which permits access to the account.
   * This parameter is mandatory for all functions.
   * </p>
   * 
   * Calls which require an authenticationToken may throw an EDAMUserException
   * for the following reasons:
   *  <ul>
   *   <li> AUTH_EXPIRED "authenticationToken" - token has expired
   *   </li>
   *   <li> BAD_DATA_FORMAT "authenticationToken" - token is malformed
   *   </li>
   *   <li> DATA_REQUIRED "authenticationToken" - token is empty
   *   </li>
   *   <li> INVALID_AUTH "authenticationToken" - token signature is invalid
   *   </li>
   * </ul>
   */
  public interface Iface {

    /**
     * Asks the NoteStore to provide information about the status of the user
     * account corresponding to the provided authentication token.
     * 
     * @param authenticationToken
     */
    public SyncState getSyncState(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Asks the NoteStore to provide the state of the account in order of
     * last modification.  This request retrieves one block of the server's
     * state so that a client can make several small requests against a large
     * account rather than getting the entire state in one big message.
     * 
     * @param afterUSN
     *   The client can pass this value to ask only for objects that
     *   have been updated after a certain point.  This allows the client to
     *   receive updates after its last checkpoint rather than doing a full
     *   synchronization on every pass.  The default value of "0" indicates
     *   that the client wants to get objects from the start of the account.
     * 
     * @param maxEntries
     *   The maximum number of modified objects that should be
     *   returned in the result SyncChunk.  This can be used to limit the size
     *   of each individual message to be friendly for network transfer.
     * 
     * @param fullSyncOnly
     *   If true, then the client only wants initial data for a full sync.
     *   In this case, the service will not return any expunged objects,
     *   and will not return any Resources, since these are also provided
     *   in their corresponding Notes.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "afterUSN" - if negative
     *   </li>
     *   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param afterUSN
     * @param maxEntries
     * @param fullSyncOnly
     */
    public SyncChunk getSyncChunk(String authenticationToken, int afterUSN, int maxEntries, boolean fullSyncOnly) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Asks the NoteStore to provide information about the status of a linked
     * notebook that has been shared with the caller, or that is public to the
     * world.
     * This will return a result that is similar to getSyncState, but may omit
     * SyncState.uploaded if the caller doesn't have permission to write to
     * the linked notebook.
     * 
     * This function must be called on the shard that owns the referenced
     * notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
     * same as LinkedNotebook.shardId.)
     * 
     * @param authenticationToken
     *   This should be an authenticationToken for the guest who has received
     *   the invitation to the share.  (I.e. this should not be the result of
     *   NoteStore.authenticateToSharedNotebook)
     * 
     * @param linkedNotebook
     *   This structure should contain identifying information and permissions
     *   to access the notebook in question.
     * 
     * @param authenticationToken
     * @param linkedNotebook
     */
    public SyncState getLinkedNotebookSyncState(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Asks the NoteStore to provide information about the contents of a linked
     * notebook that has been shared with the caller, or that is public to the
     * world.
     * This will return a result that is similar to getSyncChunk, but will only
     * contain entries that are visible to the caller.  I.e. only that particular
     * Notebook will be visible, along with its Notes, and Tags on those Notes.
     * 
     * This function must be called on the shard that owns the referenced
     * notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
     * same as LinkedNotebook.shardId.)
     * 
     * @param authenticationToken
     *   This should be an authenticationToken for the guest who has received
     *   the invitation to the share.  (I.e. this should not be the result of
     *   NoteStore.authenticateToSharedNotebook)
     * 
     * @param linkedNotebook
     *   This structure should contain identifying information and permissions
     *   to access the notebook in question.  This must contain the valid fields
     *   for either a shared notebook (e.g. shareKey)
     *   or a public notebook (e.g. username, uri)
     * 
     * @param afterUSN
     *   The client can pass this value to ask only for objects that
     *   have been updated after a certain point.  This allows the client to
     *   receive updates after its last checkpoint rather than doing a full
     *   synchronization on every pass.  The default value of "0" indicates
     *   that the client wants to get objects from the start of the account.
     * 
     * @param maxEntries
     *   The maximum number of modified objects that should be
     *   returned in the result SyncChunk.  This can be used to limit the size
     *   of each individual message to be friendly for network transfer.
     * 
     * @param fullSyncOnly
     *   If true, then the client only wants initial data for a full sync.
     *   In this case, the service will not return any expunged objects,
     *   and will not return any Resources, since these are also provided
     *   in their corresponding Notes.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "afterUSN" - if negative
     *   </li>
     *   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "LinkedNotebook" - if the provided information doesn't match any
     *     valid notebook
     *   </li>
     *   <li> "LinkedNotebook.uri" - if the provided public URI doesn't match any
     *     valid notebook
     *   </li>
     *   <li> "SharedNotebook.id" - if the provided information indicates a
     *      shared notebook that no longer exists
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param linkedNotebook
     * @param afterUSN
     * @param maxEntries
     * @param fullSyncOnly
     */
    public SyncChunk getLinkedNotebookSyncChunk(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook, int afterUSN, int maxEntries, boolean fullSyncOnly) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns a list of all of the notebooks in the account.
     * 
     * @param authenticationToken
     */
    public Vector listNotebooks(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Returns the current state of the notebook with the provided GUID.
     * The notebook may be active or deleted (but not expunged).
     * 
     * @param guid
     *   The GUID of the notebook to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - tag not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public com.evernote.edam.type.Notebook getNotebook(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns the notebook that should be used to store new notes in the
     * user's account when no other notebooks are specified.
     * 
     * @param authenticationToken
     */
    public com.evernote.edam.type.Notebook getDefaultNotebook(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Asks the service to make a notebook with the provided name.
     * 
     * @param notebook
     *   The desired fields for the notebook must be provided on this
     *   object.  The name of the notebook must be set, and either the 'active'
     *   or 'defaultNotebook' fields may be set by the client at creation.
     *   If a notebook exists in the account with the same name (via
     *   case-insensitive compare), this will throw an EDAMUserException.
     * 
     * @return
     *   The newly created Notebook.  The server-side GUID will be
     *   saved in this object's 'guid' field.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
     *   </li>
     *   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
     *   </li>
     *   <li> DATA_CONFLICT "Notebook.name" - name already in use
     *   </li>
     *   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
     *   </li>
     *   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
     *   </li>
     *   <li> LIMIT_REACHED "Notebook" - at max number of notebooks
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param notebook
     */
    public com.evernote.edam.type.Notebook createNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Submits notebook changes to the service.  The provided data must include
     * the notebook's guid field for identification.
     * 
     * @param notebook
     *   The notebook object containing the requested changes.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
     *   </li>
     *   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
     *   </li>
     *   <li> DATA_CONFLICT "Notebook.name" - name already in use
     *   </li>
     *   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
     *   </li>
     *   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param notebook
     */
    public int updateNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Permanently removes the notebook from the user's account.
     * After this action, the notebook is no longer available for undeletion, etc.
     * If the notebook contains any Notes, they will be moved to the current
     * default notebook and moved into the trash (i.e. Note.active=false).
     * 
     * @param guid
     *   The GUID of the notebook to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
     *   </li>
     *   <li> LIMIT_REACHED "Notebook" - trying to expunge the last Notebook
     *   </li>
     *   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public int expungeNotebook(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns a list of the tags in the account.  Evernote does not support
     * the undeletion of tags, so this will only include active tags.
     * 
     * @param authenticationToken
     */
    public Vector listTags(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Returns a list of the tags that are applied to at least one note within
     * the provided notebook.  If the notebook is public, the authenticationToken
     * may be ignored.
     * 
     * @param notebookGuid
     *    the GUID of the notebook to use to find tags
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - notebook not found by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param notebookGuid
     */
    public Vector listTagsByNotebook(String authenticationToken, String notebookGuid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns the current state of the Tag with the provided GUID.
     * 
     * @param guid
     *   The GUID of the tag to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Tag" - private Tag, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.guid" - tag not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public com.evernote.edam.type.Tag getTag(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Asks the service to make a tag with a set of information.
     * 
     * @param tag
     *   The desired list of fields for the tag are specified in this
     *   object.  The caller must specify the tag name, and may provide
     *   the parentGUID.
     * 
     * @return
     *   The newly created Tag.  The server-side GUID will be
     *   saved in this object.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
     *   </li>
     *   <li> DATA_CONFLICT "Tag.name" - name already in use
     *   </li>
     *   <li> LIMIT_REACHED "Tag" - at max number of tags
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.parentGuid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param tag
     */
    public com.evernote.edam.type.Tag createTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Submits tag changes to the service.  The provided data must include
     * the tag's guid field for identification.  The service will apply
     * updates to the following tag fields:  name, parentGuid
     * 
     * @param tag
     *   The tag object containing the requested changes.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
     *   </li>
     *   <li> DATA_CONFLICT "Tag.name" - name already in use
     *   </li>
     *   <li> DATA_CONFLICT "Tag.parentGuid" - can't set parent: circular
     *   </li>
     *   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.guid" - tag not found, by GUID
     *   </li>
     *   <li> "Tag.parentGuid" - parent not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param tag
     */
    public int updateTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Removes the provided tag from every note that is currently tagged with
     * this tag.  If this operation is successful, the tag will still be in
     * the account, but it will not be tagged on any notes.
     * 
     * This function is not indended for use by full synchronizing clients, since
     * it does not provide enough result information to the client to reconcile
     * the local state without performing a follow-up sync from the service.  This
     * is intended for "thin clients" that need to efficiently support this as
     * a UI operation.
     * 
     * @param guid
     *   The GUID of the tag to remove from all notes.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.guid" - tag not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public void untagAll(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Permanently deletes the tag with the provided GUID, if present.
     * 
     * @param guid
     *   The GUID of the tag to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Tag.guid" - tag not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public int expungeTag(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns a list of the searches in the account.  Evernote does not support
     * the undeletion of searches, so this will only include active searches.
     * 
     * @param authenticationToken
     */
    public Vector listSearches(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Returns the current state of the search with the provided GUID.
     * 
     * @param guid
     *   The GUID of the search to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "SavedSearch" - private Tag, user doesn't own
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public com.evernote.edam.type.SavedSearch getSearch(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Asks the service to make a saved search with a set of information.
     * 
     * @param search
     *   The desired list of fields for the search are specified in this
     *   object.  The caller must specify the
     *   name, query, and format of the search.
     * 
     * @return
     *   The newly created SavedSearch.  The server-side GUID will be
     *   saved in this object.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
     *   </li>
     *   <li> BAD_DATA_FORMAT "SavedSearch.format" - not a valid QueryFormat value
     *   </li>
     *   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
     *   </li>
     *   <li> LIMIT_REACHED "SavedSearch" - at max number of searches
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param search
     */
    public com.evernote.edam.type.SavedSearch createSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Submits search changes to the service.  The provided data must include
     * the search's guid field for identification.  The service will apply
     * updates to the following search fields:  name, query, and format
     * 
     * @param search
     *   The search object containing the requested changes.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
     *   </li>
     *   <li> BAD_DATA_FORMAT "SavedSearch.format" - not a valid QueryFormat value
     *   </li>
     *   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
     *   </li>
     *   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own tag
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "SavedSearch.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param search
     */
    public int updateSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Permanently deletes the search with the provided GUID, if present.
     * 
     * @param guid
     *   The GUID of the search to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the guid parameter is empty
     *   </li>
     *   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "SavedSearch.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public int expungeSearch(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Used to find a set of the notes from a user's account based on various
     * criteria specified via a NoteFilter object.
     * The Notes (and any embedded Resources) will have empty Data bodies for
     * contents, resource data, and resource recognition fields.  These values
     * must be retrieved individually.
     * 
     * @param authenticationToken
     *   Must be a valid token for the user's account unless the NoteFilter
     *   'notebookGuid' is the GUID of a public notebook.
     * 
     * @param filter
     *   The list of criteria that will constrain the notes to be returned.
     * 
     * @param offset
     *   The numeric index of the first note to show within the sorted
     *   results.  The numbering scheme starts with "0".  This can be used for
     *   pagination.
     * 
     * @param maxNotes
     *   The most notes to return in this query.  The service will return a set
     *   of notes that is no larger than this number, but may return fewer notes
     *   if needed.  The NoteList.totalNotes field in the return value will
     *   indicate whether there are more values available after the returned set.
     * 
     * @return
     *   The list of notes that match the criteria.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
     *   </li>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param filter
     * @param offset
     * @param maxNotes
     */
    public NoteList findNotes(String authenticationToken, NoteFilter filter, int offset, int maxNotes) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Finds the position of a note within a sorted subset of all of the user's
     * notes. This may be useful for thin clients that are displaying a paginated
     * listing of a large account, which need to know where a particular note
     * sits in the list without retrieving all notes first.
     * 
     * @param authenticationToken
     *   Must be a valid token for the user's account unless the NoteFilter
     *   'notebookGuid' is the GUID of a public notebook.
     * 
     * @param filter
     *   The list of criteria that will constrain the notes to be returned.
     * 
     * @param guid
     *   The GUID of the note to be retrieved.
     * 
     * @return
     *   If the note with the provided GUID is found within the matching note
     *   list, this will return the offset of that note within that list (where
     *   the first offset is 0).  If the note is not found within the set of
     *   notes, this will return -1.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
     *   </li>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID
     *   </li>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param filter
     * @param guid
     */
    public int findNoteOffset(String authenticationToken, NoteFilter filter, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Used to find the high-level information about a set of the notes from a
     * user's account based on various criteria specified via a NoteFilter object.
     * This should be used instead of 'findNotes' whenever the client doesn't
     * really need all of the deep structure of every Note and Resource, but
     * just wants a high-level list of information.  This will save time and
     * bandwidth.
     * 
     * @param authenticationToken
     *   Must be a valid token for the user's account unless the NoteFilter
     *   'notebookGuid' is the GUID of a public notebook.
     * 
     * @param filter
     *   The list of criteria that will constrain the notes to be returned.
     * 
     * @param offset
     *   The numeric index of the first note to show within the sorted
     *   results.  The numbering scheme starts with "0".  This can be used for
     *   pagination.
     * 
     * @param maxNotes
     *   The mximum notes to return in this query.  The service will return a set
     *   of notes that is no larger than this number, but may return fewer notes
     *   if needed.  The NoteList.totalNotes field in the return value will
     *   indicate whether there are more values available after the returned set.
     * 
     * @param resultSpec
     *   This specifies which information should be returned for each matching
     *   Note. The fields on this structure can be used to eliminate data that
     *   the client doesn't need, which will reduce the time and bandwidth
     *   to receive and process the reply.
     * 
     * @return
     *   The list of notes that match the criteria.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
     *   </li>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param filter
     * @param offset
     * @param maxNotes
     * @param resultSpec
     */
    public NotesMetadataList findNotesMetadata(String authenticationToken, NoteFilter filter, int offset, int maxNotes, NotesMetadataResultSpec resultSpec) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * This function is used to determine how many notes are found for each
     * notebook and tag in the user's account, given a current set of filter
     * parameters that determine the current selection.  This function will
     * return a structure that gives the note count for each notebook and tag
     * that has at least one note under the requested filter.  Any notebook or
     * tag that has zero notes in the filtered set will not be listed in the
     * reply to this function (so they can be assumed to be 0).
     * 
     * @param authenticationToken
     *   Must be a valid token for the user's account unless the NoteFilter
     *   'notebookGuid' is the GUID of a public notebook.
     * 
     * @param filter
     *   The note selection filter that is currently being applied.  The note
     *   counts are to be calculated with this filter applied to the total set
     *   of notes in the user's account.
     * 
     * @param withTrash
     *   If true, then the NoteCollectionCounts.trashCount will be calculated
     *   and supplied in the reply. Otherwise, the trash value will be omitted.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuids" - if any are malformed
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
     *   </li>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param filter
     * @param withTrash
     */
    public NoteCollectionCounts findNoteCounts(String authenticationToken, NoteFilter filter, boolean withTrash) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns the current state of the note in the service with the provided
     * GUID.  The ENML contents of the note will only be provided if the
     * 'withContent' parameter is true.  The service will include the meta-data
     * for each resource in the note, but the binary contents of the resources
     * and their recognition data will be omitted.
     * If the Note is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the note to be retrieved.
     * 
     * @param withContent
     *   If true, the note will include the ENML contents of its
     *   'content' field.
     * 
     * @param withResourcesData
     *   If true, any Resource elements in this Note will include the binary
     *   contents of their 'data' field's body.
     * 
     * @param withResourcesRecognition
     *   If true, any Resource elements will include the binary contents of the
     *   'recognition' field's body if recognition data is present.
     * 
     * @param withResourcesAlternateData
     *   If true, any Resource elements in this Note will include the binary
     *   contents of their 'alternateData' fields' body, if an alternate form
     *   is present.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     * @param withContent
     * @param withResourcesData
     * @param withResourcesRecognition
     * @param withResourcesAlternateData
     */
    public com.evernote.edam.type.Note getNote(String authenticationToken, String guid, boolean withContent, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns XHTML contents of the note with the provided GUID.
     * If the Note is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the note to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public String getNoteContent(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns a block of the extracted plain text contents of the note with the
     * provided GUID.  This text can be indexed for search purposes by a light
     * client that doesn't have capabilities to extract all of the searchable
     * text content from the note and its resources.
     * 
     * If the Note is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the note to be retrieved.
     * 
     * @param noteOnly
     *   If true, this will only return the text extracted from the ENML contents
     *   of the note itself.  If false, this will also include the extracted text
     *   from any text-bearing resources (PDF, recognized images)
     * 
     * @param tokenizeForIndexing
     *   If true, this will break the text into cleanly separated and sanitized
     *   tokens.  If false, this will return the more raw text extraction, with
     *   its original punctuation, capitalization, spacing, etc.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     * @param noteOnly
     * @param tokenizeForIndexing
     */
    public String getNoteSearchText(String authenticationToken, String guid, boolean noteOnly, boolean tokenizeForIndexing) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns a block of the extracted plain text contents of the resource with
     * the provided GUID.  This text can be indexed for search purposes by a light
     * client that doesn't have capability to extract all of the searchable
     * text content from a resource.
     * 
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the resource to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public String getResourceSearchText(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns a list of the names of the tags for the note with the provided
     * guid.  This can be used with authentication to get the tags for a
     * user's own note, or can be used without valid authentication to retrieve
     * the names of the tags for a note in a public notebook.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public Vector getNoteTagNames(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Asks the service to make a note with the provided set of information.
     * 
     * @param note
     *   A Note object containing the desired fields to be populated on
     *   the service.
     * 
     * @return
     *   The newly created Note from the service.  The server-side
     *   GUIDs for the Note and any Resources will be saved in this object.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML content
     *   </li>
     *   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
     *   </li>
     *   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
     *   </li>
     *   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
     *   </li>
     *   <li> DATA_REQUIRED "Resource.data" - resource data body missing
     *   </li>
     *   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
     *   </li>
     *   <li> LIMIT_REACHED "Note" - at max number per account
     *   </li>
     *   <li> LIMIT_REACHED "Note.size" - total note size too large
     *   </li>
     *   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
     *   </li>
     *   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
     *   </li>
     *   <li> LIMIT_REACHED "Resource.data.size" - resource too large
     *   </li>
     *   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
     *   </li>
     *   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
     *   </li>
     *   <li> PERMISSION_DENIED "Note.notebookGuid" - NB not owned by user
     *   </li>
     *   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
     *   </li>
     *   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
     *     of the specified tags had an invalid length or pattern
     *   </li>
     *   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
     *     new tags would exceed the maximum number per account
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.notebookGuid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param note
     */
    public com.evernote.edam.type.Note createNote(String authenticationToken, com.evernote.edam.type.Note note) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Submit a set of changes to a note to the service.  The provided data
     * must include the note's guid field for identification.
     * 
     * @param note
     *   A Note object containing the desired fields to be populated on
     *   the service.
     * 
     * @return
     *   The metadata (no contents) for the Note on the server after the update
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML body
     *   </li>
     *   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
     *   </li>
     *   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
     *   </li>
     *   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
     *   </li>
     *   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
     *   </li>
     *   <li> DATA_REQUIRED "Resource.data" - resource data body missing
     *   </li>
     *   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
     *   </li>
     *   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
     *   </li>
     *   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
     *   </li>
     *   <li> LIMIT_REACHED "Note.size" - total note size too large
     *   </li>
     *   <li> LIMIT_REACHED "Resource.data.size" - resource too large
     *   </li>
     *   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
     *   </li>
     *   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - user doesn't own
     *   </li>
     *   <li> PERMISSION_DENIED "Note.notebookGuid" - user doesn't own destination
     *   </li>
     *   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
     *   </li>
     *   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
     *     of the specified tags had an invalid length or pattern
     *   </li>
     *   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
     *     new tags would exceed the maximum number per account
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - note not found, by GUID
     *   </li>
     *   <li> "Note.notebookGuid" - if notebookGuid provided, but not found
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param note
     */
    public com.evernote.edam.type.Note updateNote(String authenticationToken, com.evernote.edam.type.Note note) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Moves the note into the trash. The note may still be undeleted, unless it
     * is expunged.  This is equivalent to calling udpateNote() after setting
     * Note.active = false
     * 
     * @param guid
     *   The GUID of the note to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "Note" - user doesn't have permission to
     *          update the note.
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public int deleteNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Permanently removes the Note, and all of its Resources,
     * from the service.
     * 
     * @param guid
     *   The GUID of the note to delete.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "Note" - user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public int expungeNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Permanently removes a list of Notes, and all of their Resources, from
     * the service.  This should be invoked with a small number of Note GUIDs
     * (e.g. 100 or less) on each call.  To expunge a larger number of notes,
     * call this method multiple times.  This should also be used to reduce the
     * number of Notes in a notebook before calling expungeNotebook() or
     * in the trash before calling expungeInactiveNotes(), since these calls may
     * be prohibitively slow if there are more than a few hundred notes.
     * If an exception is thrown for any of the GUIDs, then none of the notes
     * will be deleted.  I.e. this call can be treated as an atomic transaction.
     * 
     * @param noteGuids
     *   The list of GUIDs for the Notes to remove.
     * 
     * @return
     *   The account's updateCount at the end of this operation
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "Note" - user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param noteGuids
     */
    public int expungeNotes(String authenticationToken, Vector noteGuids) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Permanently removes all of the Notes that are currently marked as
     * inactive.  This is equivalent to "emptying the trash", and these Notes
     * will be gone permanently.
     * <p/>
     * This operation may be relatively slow if the account contains a large
     * number of inactive Notes.
     * 
     * @return
     *    The number of notes that were expunged.
     * 
     * @param authenticationToken
     */
    public int expungeInactiveNotes(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Performs a deep copy of the Note with the provided GUID 'noteGuid' into
     * the Notebook with the provided GUID 'toNotebookGuid'.
     * The caller must be the owner of both the Note and the Notebook.
     * This creates a new Note in the destination Notebook with new content and
     * Resources that match all of the content and Resources from the original
     * Note, but with new GUID identifiers.
     * The original Note is not modified by this operation.
     * The copied note is considered as an "upload" for the purpose of upload
     * transfer limit calculation, so its size is added to the upload count for
     * the owner.
     * 
     * @param noteGuid
     *   The GUID of the Note to copy.
     * 
     * @param toNotebookGuid
     *   The GUID of the Notebook that should receive the new Note.
     * 
     * @return
     *   The metadata for the new Note that was created.  This will include the
     *   new GUID for this Note (and any copied Resources), but will not include
     *   the content body or the binary bodies of any Resources.
     * 
     * @throws EDAMUserException <ul>
     *   <li> LIMIT_REACHED "Note" - at max number per account
     *   </li>
     *   <li> PERMISSION_DENIED "Notebook.guid" - destination not owned by user
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - user doesn't own
     *   </li>
     *   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Notebook.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param noteGuid
     * @param toNotebookGuid
     */
    public com.evernote.edam.type.Note copyNote(String authenticationToken, String noteGuid, String toNotebookGuid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns a list of the prior versions of a particular note that are
     * saved within the service.  These prior versions are stored to provide a
     * recovery from unintentional removal of content from a note. The identifiers
     * that are returned by this call can be used with getNoteVersion to retrieve
     * the previous note.
     * The identifiers will be listed from the most recent versions to the oldest.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param noteGuid
     */
    public Vector listNoteVersions(String authenticationToken, String noteGuid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * This can be used to retrieve a previous version of a Note after it has been
     * updated within the service.  The caller must identify the note (via its
     * guid) and the version (via the updateSequenceNumber of that version).
     * to find a listing of the stored version USNs for a note, call
     * listNoteVersions.
     * This call is only available for notes in Premium accounts.  (I.e. access
     * to past versions of Notes is a Premium-only feature.)
     * 
     * @param guid
     *   The GUID of the note to be retrieved.
     * 
     * @param updateSequenceNum
     *   The USN of the version of the note that is being retrieved
     * 
     * @param withResourcesData
     *   If true, any Resource elements in this Note will include the binary
     *   contents of their 'data' field's body.
     * 
     * @param withResourcesRecognition
     *   If true, any Resource elements will include the binary contents of the
     *   'recognition' field's body if recognition data is present.
     * 
     * @param withResourcesAlternateData
     *   If true, any Resource elements in this Note will include the binary
     *   contents of their 'alternateData' fields' body, if an alternate form
     *   is present.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     *   <li> PERMISSION_DENIED "updateSequenceNum" -
     *     The account isn't permitted to access previous versions of notes.
     *     (i.e. this is a Free account.)
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     *   <li> "Note.updateSequenceNumber" - the Note doesn't have a version with
     *      the corresponding USN.
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param noteGuid
     * @param updateSequenceNum
     * @param withResourcesData
     * @param withResourcesRecognition
     * @param withResourcesAlternateData
     */
    public com.evernote.edam.type.Note getNoteVersion(String authenticationToken, String noteGuid, int updateSequenceNum, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns the current state of the resource in the service with the
     * provided GUID.
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the resource to be retrieved.
     * 
     * @param withData
     *   If true, the Resource will include the binary contents of the
     *   'data' field's body.
     * 
     * @param withRecognition
     *   If true, the Resource will include the binary contents of the
     *   'recognition' field's body if recognition data is present.
     * 
     * @param withAttributes
     *   If true, the Resource will include the attributes
     * 
     * @param withAlternateData
     *   If true, the Resource will include the binary contents of the
     *   'alternateData' field's body, if an alternate form is present.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     * @param withData
     * @param withRecognition
     * @param withAttributes
     * @param withAlternateData
     */
    public com.evernote.edam.type.Resource getResource(String authenticationToken, String guid, boolean withData, boolean withRecognition, boolean withAttributes, boolean withAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Submit a set of changes to a resource to the service.  This can be used
     * to update the meta-data about the resource, but cannot be used to change
     * the binary contents of the resource (including the length and hash).  These
     * cannot be changed directly without creating a new resource and removing the
     * old one via updateNote.
     * 
     * @param resource
     *   A Resource object containing the desired fields to be populated on
     *   the service.  The service will attempt to update the resource with the
     *   following fields from the client:
     *   <ul>
     *      <li>guid:  must be provided to identify the resource
     *      </li>
     *      <li>mime
     *      </li>
     *      <li>width
     *      </li>
     *      <li>height
     *      </li>
     *      <li>duration
     *      </li>
     *      <li>recognition:  if this is provided, it must include the
     *          data body for the resource recognition index data and the
     *          recoFormat must be provided.  If absent,
     *          the recognition on the server won't be changed.
     *      </li>
     *      <li>attributes:  optional.  if present, the set of attributes will
     *           be replaced.
     *      </li>
     *   </ul>
     * 
     * @return
     *   The Update Sequence Number of the resource after the changes have been
     *   applied.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
     *   </li>
     *   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
     *   </li>
     *   <li> DATA_REQUIRED "Resource.data" - resource data body missing
     *   </li>
     *   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param resource
     */
    public int updateResource(String authenticationToken, com.evernote.edam.type.Resource resource) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns binary data of the resource with the provided GUID.  For
     * example, if this were an image resource, this would contain the
     * raw bits of the image.
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the resource to be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public byte[] getResourceData(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns the current state of a resource, referenced by containing
     * note GUID and resource content hash.
     * 
     * @param noteGuid
     *   The GUID of the note that holds the resource to be retrieved.
     * 
     * @param contentHash
     *   The MD5 checksum of the resource within that note.
     * 
     * @param withData
     *   If true, the Resource will include the binary contents of the
     *   'data' field's body.
     * 
     * @param withRecognition
     *   If true, the Resource will include the binary contents of the
     *   'recognition' field's body.
     *   
     * @param withAlternateData
     *   If true, the Resource will include the binary contents of the
     *   'alternateData' field's body, if an alternate form is present.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "Note.guid" - noteGuid param missing
     *   </li>
     *   <li> DATA_REQUIRED "Note.contentHash" - contentHash param missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note" - not found, by guid
     *   </li>
     *   <li> "Resource" - not found, by hash
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param noteGuid
     * @param contentHash
     * @param withData
     * @param withRecognition
     * @param withAlternateData
     */
    public com.evernote.edam.type.Resource getResourceByHash(String authenticationToken, String noteGuid, byte[] contentHash, boolean withData, boolean withRecognition, boolean withAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns the binary contents of the recognition index for the resource
     * with the provided GUID.  If the caller asks about a resource that has
     * no recognition data, this will throw EDAMNotFoundException.
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the resource whose recognition data should be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     *   <li> "Resource.recognition" - resource has no recognition
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public byte[] getResourceRecognition(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * If the Resource with the provided GUID has an alternate data representation
     * (indicated via the Resource.alternateData field), then this request can
     * be used to retrieve the binary contents of that alternate data file.
     * If the caller asks about a resource that has no alternate data form, this
     * will throw EDAMNotFoundException.
     * 
     * @param guid
     *    The GUID of the resource whose recognition data should be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     *   <li> "Resource.alternateData" - resource has no recognition
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public byte[] getResourceAlternateData(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Returns the set of attributes for the Resource with the provided GUID.
     * If the Resource is found in a public notebook, the authenticationToken
     * will be ignored (so it could be an empty string).
     * 
     * @param guid
     *   The GUID of the resource whose attributes should be retrieved.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Resource.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public com.evernote.edam.type.ResourceAttributes getResourceAttributes(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * @deprecated -
     *   This function is deprecated, and should no longer be used.  This will
     *   always return a value of '0'.
     * 
     * @param authenticationToken
     */
    public long getAccountSize(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Clients should make this call once per day to receive a bundle of ads that
     * will be displayed for the subsequent 24 hour period.
     * 
     * @param adParameters
     *   A set of parameters that help the service determine which ads to return.
     * 
     * @param authenticationToken
     * @param adParameters
     */
    public Vector getAds(String authenticationToken, AdParameters adParameters) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * A thin client should make this call to retrieve a single random ad for
     * immediate display.
     * 
     * @param adParameters
     *   A set of parameters to help the service determine which ad to return.
     *   The 'impression' field should either be absent (if no ads have been
     *   displayed previously), or else it should contain the identifier for
     *   the most recently-displayed ad so that the service can give a different
     *   ad.
     * 
     * @param authenticationToken
     * @param adParameters
     */
    public com.evernote.edam.type.Ad getRandomAd(String authenticationToken, AdParameters adParameters) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Looks for a user account with the provided userId on this NoteStore
     * shard and determines whether that account contains a public notebook
     * with the given URI.  If the account is not found, or no public notebook
     * exists with this URI, this will throw an EDAMNotFoundException,
     * otherwise this will return the information for that Notebook.
     * 
     * @param userId
     *    The numeric identifier for the user who owns the public notebook.
     *    To find this value based on a username string, you can invoke
     *    UserStore.getPublicUserInfo
     * 
     * @param publicUri
     *    The uri string for the public notebook, from Notebook.publishing.uri.
     *    If a notebook is visible on the web with a full URL like
     *    http://www.evernote.com/pub/ensupport/faq
     *    Then 'ensupport' is the username and 'faq' is the uri.
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Publishing.uri" - not found, by URI
     *   </li>
     * </ul>
     * 
     * @param userId
     * @param publicUri
     */
    public com.evernote.edam.type.Notebook getPublicNotebook(int userId, String publicUri) throws com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;

    /**
     * Used to construct a shared notebook object. The constructed notebook will
     * contain a "share key" which serve as a unique identifer and access token
     * for a user to access the notebook of the shared notebook owner.
     * 
     * @param sharedNotebook
     *   An shared notebook object populated with the email address of the share
     *   recipient, the notebook guid and the access permissions. All other
     *   attributes of the shared object are ignored.
     * @return
     *   The fully populated SharedNotebook object including the server assigned
     *   share id and shareKey which can both the used to uniquely identify the
     *   SharedNotebook.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "SharedNotebook.email" - if the  email was not valid
     *   </li>
     *   </ul>
     * @throws EDAMNotFoundException <ul>
     *   <li> Notebook.guid - if the notebookGuid is not a valid guid for the user
     *   </li>
     *   </ul>
     * 
     * @param authenticationToken
     * @param sharedNotebook
     */
    public com.evernote.edam.type.SharedNotebook createSharedNotebook(String authenticationToken, com.evernote.edam.type.SharedNotebook sharedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Lists the collection of shared notebooks for all notebooks in the
     * users account.
     * 
     * @return
     *  The list of all SharedNotebooks for the user
     * 
     * @param authenticationToken
     */
    public Vector listSharedNotebooks(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Expunges the SharedNotebooks in the user's account using the
     * SharedNotebook.id as the identifier.
     * @param
     *   sharedNotebookIds - a list of ShardNotebook.id longs identifying the
     *       objects to delete permanently.
     * @return
     *   The account's update sequence number.
     * 
     * @param authenticationToken
     * @param sharedNotebookIds
     */
    public int expungeSharedNotebooks(String authenticationToken, Vector sharedNotebookIds) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Asks the service to make a linked notebook with the provided name, username
     * of the owner and identifiers provided. A linked notebook can be either a
     * link to a public notebook or to a private shared notebook.
     * 
     * @param linkedNotebook
     *   The desired fields for the linked notebook must be provided on this
     *   object.  The name of the linked notebook must be set. Either a username
     *   uri or a shard id and share key must be provided otherwise a
     *   EDAMUserException is thrown.
     * 
     * @return
     *   The newly created LinkedNotebook.  The server-side id will be
     *   saved in this object's 'id' field.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
     *   </li>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.username" - bad username format
     *   </li>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.uri" -
     *     if public notebook set but bad uri
     *   </li>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.shareKey" -
     *     if private notebook set but bad shareKey
     *   </li>
     *   <li> DATA_REQUIRED "LinkedNotebook.shardId" -
     *     if private notebook but shard id not provided
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param linkedNotebook
     */
    public com.evernote.edam.type.LinkedNotebook createLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * @param linkedNotebook
     *   Updates the name of a linked notebook.
     * 
     * @return
     *   The Update Sequence Number for this change within the account.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param linkedNotebook
     */
    public int updateLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Returns a list of linked notebooks
     * 
     * @param authenticationToken
     */
    public Vector listLinkedNotebooks(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Permanently expunges the linked notebook from the account.
     * 
     * @param guid
     *   The LinkedNotebook.guid field of the LinkedNotebook to permanently remove
     *   from the account.
     * 
     * @param authenticationToken
     * @param guid
     */
    public int expungeLinkedNotebook(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Asks the service to produce an authentication token that can be used to
     * access the contents of a shared notebook from someone else's account.
     * This authenticationToken can be used with the various other NoteStore
     * calls to find and retrieve notes, and if the permissions in the shared
     * notebook are sufficient, to make changes to the contents of the notebook.
     * 
     * @param shareKey
     *   The 'shareKey' identifier from the SharedNotebook that was granted to
     *   some recipient.  This string internally encodes the notebook identifier
     *   and a security signature.
     * 
     * @param authenticationToken
     *   If a non-empty string is provided, this is the full user-based
     *   authentication token that identifies the user who is currently logged in
     *   and trying to access the shared notebook.  This may be required if the
     *   notebook was created with 'requireLogin'.
     *   If this string is empty, the service will attempt to authenticate to the
     *   shared notebook without any logged in user.
     * 
     * @throws EDAMSystemException <ul>
     *   <li> BAD_DATA_FORMAT "shareKey" - invalid shareKey string
     *   </li>
     *   <li> INVALID_AUTH "shareKey" - bad signature on shareKey string
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "SharedNotebook.id" - the shared notebook no longer exists
     *   </li>
     * </ul>
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "authenticationToken" - the share requires login, and
     *          no valid authentication token was provided.
     *   </li>
     *   <li> PERMISSION_DENIED "SharedNotebook.username" - share requires login,
     *          and another username has already been bound to this notebook.
     *   </li>
     * </ul>
     * 
     * @param shareKey
     * @param authenticationToken
     */
    public com.evernote.edam.userstore.AuthenticationResult authenticateToSharedNotebook(String shareKey, String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * This function is used to retrieve extended information about a shared
     * notebook by a guest who has already authenticated to access that notebook.
     * This requires an 'authenticationToken' parameter which should be the
     * resut of a call to authenticateToSharedNotebook(...).
     * I.e. this is the token that gives access to the particular shared notebook
     * in someone else's account -- it's not the authenticationToken for the
     * owner of the notebook itself.
     * 
     * @param authenticationToken
     *   Should be the authentication token retrieved from the reply of
     *   authenticateToSharedNotebook(), proving access to a particular shared
     *   notebook.
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "authenticationToken" -
     *          authentication token doesn't correspond to a valid shared notebook
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "SharedNotebook.id" - the shared notebook no longer exists
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     */
    public com.evernote.edam.type.SharedNotebook getSharedNotebookByAuth(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Attempts to send a single note to one or more email recipients.
     * 
     * @param authenticationToken
     *    The note will be sent as the user logged in via this token, using that
     *    user's registered email address.  If the authenticated user doesn't
     *    have permission to read that note, the emailing will fail.
     * 
     * @param parameters
     *    The note must be specified either by GUID (in which case it will be
     *    sent using the existing data in the service), or else the full Note
     *    must be passed to this call.  This also specifies the additional
     *    email fields that will be used in the email.
     * 
     * @throws EDAMUserException <ul>
     *   <li> LIMIT_REACHED "NoteEmailParameters.toAddresses" -
     *     The email can't be sent because this would exceed the user's daily
     *     email limit.
     *   </li>
     *   <li> BAD_DATA_FORMAT "(email address)" -
     *     email address malformed
     *   </li>
     *   <li> DATA_REQUIRED "NoteEmailParameters.toAddresses" -
     *     if there are no To: or Cc: addresses provided.
     *   </li>
     *   <li> DATA_REQUIRED "Note.title" -
     *     if the caller provides a Note parameter with no title
     *   </li>
     *   <li> DATA_REQUIRED "Note.content" -
     *     if the caller provides a Note parameter with no content
     *   </li>
     *   <li> DATA_REQUIRED "NoteEmailParameters.note" -
     *     if no guid or note provided
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param parameters
     */
    public void emailNote(String authenticationToken, NoteEmailParameters parameters) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * If this note is not already shared (via its own direct URL), then this
     * will start sharing that note.
     * This will return the secret "Note Key" for this note that
     * can currently be used in conjunction with the Note's GUID to gain direct
     * read-only access to the Note.
     * If the note is already shared, then this won't make any changes to the
     * note, and the existing "Note Key" will be returned.  The only way to change
     * the Note Key for an existing note is to stopSharingNote first, and then
     * call this function.
     * 
     * @param guid
     *   The GUID of the note to be shared.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public String shareNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * If this note is not already shared then this will stop sharing that note
     * and invalidate its "Note Key", so any existing URLs to access that Note
     * will stop working.
     * If the Note is not shared, then this function will do nothing.
     * 
     * @param guid
     *   The GUID of the note to be un-shared.
     * 
     * @throws EDAMUserException <ul>
     *   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
     *   </li>
     *   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "Note.guid" - not found, by GUID
     *   </li>
     * </ul>
     * 
     * @param authenticationToken
     * @param guid
     */
    public void stopSharingNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Asks the service to produce an authentication token that can be used to
     * access the contents of a single Note which was individually shared
     * from someone's account.
     * This authenticationToken can be used with the various other NoteStore
     * calls to find and retrieve the Note and its directly-referenced children.
     * 
     * @param guid
     *   The GUID identifying this Note on this shard.
     * 
     * @param noteKey
     *   The 'noteKey' identifier from the Note that was originally created via
     *   a call to shareNote() and then given to a recipient to access.
     * 
     * @throws EDAMUserException <ul>
     *   <li> PERMISSION_DENIED "Note" - the Note with that GUID is either not
     *     shared, or the noteKey doesn't match the current key for this note
     *   </li>
     * </ul>
     * 
     * @throws EDAMNotFoundException <ul>
     *   <li> "guid" - the note with that GUID is not found
     *   </li>
     * </ul>
     * 
     * @param guid
     * @param noteKey
     */
    public com.evernote.edam.userstore.AuthenticationResult authenticateToSharedNote(String guid, String noteKey) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public SyncState getSyncState(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getSyncState(authenticationToken);
      return recv_getSyncState();
    }

    public void send_getSyncState(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSyncState", TMessageType.CALL, ++seqid_));
      getSyncState_args args = new getSyncState_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SyncState recv_getSyncState() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSyncState failed: out of sequence response");
      }
      getSyncState_result result = new getSyncState_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSyncState failed: unknown result");
    }

    public SyncChunk getSyncChunk(String authenticationToken, int afterUSN, int maxEntries, boolean fullSyncOnly) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly);
      return recv_getSyncChunk();
    }

    public void send_getSyncChunk(String authenticationToken, int afterUSN, int maxEntries, boolean fullSyncOnly) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSyncChunk", TMessageType.CALL, ++seqid_));
      getSyncChunk_args args = new getSyncChunk_args();
      args.setAuthenticationToken(authenticationToken);
      args.setAfterUSN(afterUSN);
      args.setMaxEntries(maxEntries);
      args.setFullSyncOnly(fullSyncOnly);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SyncChunk recv_getSyncChunk() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSyncChunk failed: out of sequence response");
      }
      getSyncChunk_result result = new getSyncChunk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSyncChunk failed: unknown result");
    }

    public SyncState getLinkedNotebookSyncState(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getLinkedNotebookSyncState(authenticationToken, linkedNotebook);
      return recv_getLinkedNotebookSyncState();
    }

    public void send_getLinkedNotebookSyncState(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLinkedNotebookSyncState", TMessageType.CALL, ++seqid_));
      getLinkedNotebookSyncState_args args = new getLinkedNotebookSyncState_args();
      args.setAuthenticationToken(authenticationToken);
      args.setLinkedNotebook(linkedNotebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SyncState recv_getLinkedNotebookSyncState() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLinkedNotebookSyncState failed: out of sequence response");
      }
      getLinkedNotebookSyncState_result result = new getLinkedNotebookSyncState_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLinkedNotebookSyncState failed: unknown result");
    }

    public SyncChunk getLinkedNotebookSyncChunk(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook, int afterUSN, int maxEntries, boolean fullSyncOnly) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly);
      return recv_getLinkedNotebookSyncChunk();
    }

    public void send_getLinkedNotebookSyncChunk(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook, int afterUSN, int maxEntries, boolean fullSyncOnly) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLinkedNotebookSyncChunk", TMessageType.CALL, ++seqid_));
      getLinkedNotebookSyncChunk_args args = new getLinkedNotebookSyncChunk_args();
      args.setAuthenticationToken(authenticationToken);
      args.setLinkedNotebook(linkedNotebook);
      args.setAfterUSN(afterUSN);
      args.setMaxEntries(maxEntries);
      args.setFullSyncOnly(fullSyncOnly);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SyncChunk recv_getLinkedNotebookSyncChunk() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLinkedNotebookSyncChunk failed: out of sequence response");
      }
      getLinkedNotebookSyncChunk_result result = new getLinkedNotebookSyncChunk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLinkedNotebookSyncChunk failed: unknown result");
    }

    public Vector listNotebooks(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listNotebooks(authenticationToken);
      return recv_listNotebooks();
    }

    public void send_listNotebooks(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listNotebooks", TMessageType.CALL, ++seqid_));
      listNotebooks_args args = new listNotebooks_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_listNotebooks() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listNotebooks failed: out of sequence response");
      }
      listNotebooks_result result = new listNotebooks_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listNotebooks failed: unknown result");
    }

    public com.evernote.edam.type.Notebook getNotebook(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNotebook(authenticationToken, guid);
      return recv_getNotebook();
    }

    public void send_getNotebook(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNotebook", TMessageType.CALL, ++seqid_));
      getNotebook_args args = new getNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Notebook recv_getNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNotebook failed: out of sequence response");
      }
      getNotebook_result result = new getNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNotebook failed: unknown result");
    }

    public com.evernote.edam.type.Notebook getDefaultNotebook(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getDefaultNotebook(authenticationToken);
      return recv_getDefaultNotebook();
    }

    public void send_getDefaultNotebook(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getDefaultNotebook", TMessageType.CALL, ++seqid_));
      getDefaultNotebook_args args = new getDefaultNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Notebook recv_getDefaultNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getDefaultNotebook failed: out of sequence response");
      }
      getDefaultNotebook_result result = new getDefaultNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDefaultNotebook failed: unknown result");
    }

    public com.evernote.edam.type.Notebook createNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_createNotebook(authenticationToken, notebook);
      return recv_createNotebook();
    }

    public void send_createNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createNotebook", TMessageType.CALL, ++seqid_));
      createNotebook_args args = new createNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNotebook(notebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Notebook recv_createNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createNotebook failed: out of sequence response");
      }
      createNotebook_result result = new createNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createNotebook failed: unknown result");
    }

    public int updateNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateNotebook(authenticationToken, notebook);
      return recv_updateNotebook();
    }

    public void send_updateNotebook(String authenticationToken, com.evernote.edam.type.Notebook notebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateNotebook", TMessageType.CALL, ++seqid_));
      updateNotebook_args args = new updateNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNotebook(notebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateNotebook failed: out of sequence response");
      }
      updateNotebook_result result = new updateNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateNotebook failed: unknown result");
    }

    public int expungeNotebook(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeNotebook(authenticationToken, guid);
      return recv_expungeNotebook();
    }

    public void send_expungeNotebook(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeNotebook", TMessageType.CALL, ++seqid_));
      expungeNotebook_args args = new expungeNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeNotebook failed: out of sequence response");
      }
      expungeNotebook_result result = new expungeNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeNotebook failed: unknown result");
    }

    public Vector listTags(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listTags(authenticationToken);
      return recv_listTags();
    }

    public void send_listTags(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listTags", TMessageType.CALL, ++seqid_));
      listTags_args args = new listTags_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_listTags() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listTags failed: out of sequence response");
      }
      listTags_result result = new listTags_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listTags failed: unknown result");
    }

    public Vector listTagsByNotebook(String authenticationToken, String notebookGuid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_listTagsByNotebook(authenticationToken, notebookGuid);
      return recv_listTagsByNotebook();
    }

    public void send_listTagsByNotebook(String authenticationToken, String notebookGuid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listTagsByNotebook", TMessageType.CALL, ++seqid_));
      listTagsByNotebook_args args = new listTagsByNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNotebookGuid(notebookGuid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_listTagsByNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listTagsByNotebook failed: out of sequence response");
      }
      listTagsByNotebook_result result = new listTagsByNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listTagsByNotebook failed: unknown result");
    }

    public com.evernote.edam.type.Tag getTag(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getTag(authenticationToken, guid);
      return recv_getTag();
    }

    public void send_getTag(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getTag", TMessageType.CALL, ++seqid_));
      getTag_args args = new getTag_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Tag recv_getTag() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getTag failed: out of sequence response");
      }
      getTag_result result = new getTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTag failed: unknown result");
    }

    public com.evernote.edam.type.Tag createTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_createTag(authenticationToken, tag);
      return recv_createTag();
    }

    public void send_createTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createTag", TMessageType.CALL, ++seqid_));
      createTag_args args = new createTag_args();
      args.setAuthenticationToken(authenticationToken);
      args.setTag(tag);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Tag recv_createTag() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createTag failed: out of sequence response");
      }
      createTag_result result = new createTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createTag failed: unknown result");
    }

    public int updateTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateTag(authenticationToken, tag);
      return recv_updateTag();
    }

    public void send_updateTag(String authenticationToken, com.evernote.edam.type.Tag tag) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateTag", TMessageType.CALL, ++seqid_));
      updateTag_args args = new updateTag_args();
      args.setAuthenticationToken(authenticationToken);
      args.setTag(tag);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateTag() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateTag failed: out of sequence response");
      }
      updateTag_result result = new updateTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateTag failed: unknown result");
    }

    public void untagAll(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_untagAll(authenticationToken, guid);
      recv_untagAll();
    }

    public void send_untagAll(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("untagAll", TMessageType.CALL, ++seqid_));
      untagAll_args args = new untagAll_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_untagAll() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "untagAll failed: out of sequence response");
      }
      untagAll_result result = new untagAll_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      return;
    }

    public int expungeTag(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeTag(authenticationToken, guid);
      return recv_expungeTag();
    }

    public void send_expungeTag(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeTag", TMessageType.CALL, ++seqid_));
      expungeTag_args args = new expungeTag_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeTag() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeTag failed: out of sequence response");
      }
      expungeTag_result result = new expungeTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeTag failed: unknown result");
    }

    public Vector listSearches(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listSearches(authenticationToken);
      return recv_listSearches();
    }

    public void send_listSearches(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listSearches", TMessageType.CALL, ++seqid_));
      listSearches_args args = new listSearches_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_listSearches() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listSearches failed: out of sequence response");
      }
      listSearches_result result = new listSearches_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listSearches failed: unknown result");
    }

    public com.evernote.edam.type.SavedSearch getSearch(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getSearch(authenticationToken, guid);
      return recv_getSearch();
    }

    public void send_getSearch(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSearch", TMessageType.CALL, ++seqid_));
      getSearch_args args = new getSearch_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.SavedSearch recv_getSearch() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSearch failed: out of sequence response");
      }
      getSearch_result result = new getSearch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSearch failed: unknown result");
    }

    public com.evernote.edam.type.SavedSearch createSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_createSearch(authenticationToken, search);
      return recv_createSearch();
    }

    public void send_createSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createSearch", TMessageType.CALL, ++seqid_));
      createSearch_args args = new createSearch_args();
      args.setAuthenticationToken(authenticationToken);
      args.setSearch(search);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.SavedSearch recv_createSearch() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createSearch failed: out of sequence response");
      }
      createSearch_result result = new createSearch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createSearch failed: unknown result");
    }

    public int updateSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateSearch(authenticationToken, search);
      return recv_updateSearch();
    }

    public void send_updateSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateSearch", TMessageType.CALL, ++seqid_));
      updateSearch_args args = new updateSearch_args();
      args.setAuthenticationToken(authenticationToken);
      args.setSearch(search);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateSearch() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateSearch failed: out of sequence response");
      }
      updateSearch_result result = new updateSearch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateSearch failed: unknown result");
    }

    public int expungeSearch(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeSearch(authenticationToken, guid);
      return recv_expungeSearch();
    }

    public void send_expungeSearch(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeSearch", TMessageType.CALL, ++seqid_));
      expungeSearch_args args = new expungeSearch_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeSearch() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeSearch failed: out of sequence response");
      }
      expungeSearch_result result = new expungeSearch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeSearch failed: unknown result");
    }

    public NoteList findNotes(String authenticationToken, NoteFilter filter, int offset, int maxNotes) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_findNotes(authenticationToken, filter, offset, maxNotes);
      return recv_findNotes();
    }

    public void send_findNotes(String authenticationToken, NoteFilter filter, int offset, int maxNotes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findNotes", TMessageType.CALL, ++seqid_));
      findNotes_args args = new findNotes_args();
      args.setAuthenticationToken(authenticationToken);
      args.setFilter(filter);
      args.setOffset(offset);
      args.setMaxNotes(maxNotes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public NoteList recv_findNotes() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findNotes failed: out of sequence response");
      }
      findNotes_result result = new findNotes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findNotes failed: unknown result");
    }

    public int findNoteOffset(String authenticationToken, NoteFilter filter, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_findNoteOffset(authenticationToken, filter, guid);
      return recv_findNoteOffset();
    }

    public void send_findNoteOffset(String authenticationToken, NoteFilter filter, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findNoteOffset", TMessageType.CALL, ++seqid_));
      findNoteOffset_args args = new findNoteOffset_args();
      args.setAuthenticationToken(authenticationToken);
      args.setFilter(filter);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_findNoteOffset() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findNoteOffset failed: out of sequence response");
      }
      findNoteOffset_result result = new findNoteOffset_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findNoteOffset failed: unknown result");
    }

    public NotesMetadataList findNotesMetadata(String authenticationToken, NoteFilter filter, int offset, int maxNotes, NotesMetadataResultSpec resultSpec) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_findNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec);
      return recv_findNotesMetadata();
    }

    public void send_findNotesMetadata(String authenticationToken, NoteFilter filter, int offset, int maxNotes, NotesMetadataResultSpec resultSpec) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findNotesMetadata", TMessageType.CALL, ++seqid_));
      findNotesMetadata_args args = new findNotesMetadata_args();
      args.setAuthenticationToken(authenticationToken);
      args.setFilter(filter);
      args.setOffset(offset);
      args.setMaxNotes(maxNotes);
      args.setResultSpec(resultSpec);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public NotesMetadataList recv_findNotesMetadata() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findNotesMetadata failed: out of sequence response");
      }
      findNotesMetadata_result result = new findNotesMetadata_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findNotesMetadata failed: unknown result");
    }

    public NoteCollectionCounts findNoteCounts(String authenticationToken, NoteFilter filter, boolean withTrash) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_findNoteCounts(authenticationToken, filter, withTrash);
      return recv_findNoteCounts();
    }

    public void send_findNoteCounts(String authenticationToken, NoteFilter filter, boolean withTrash) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findNoteCounts", TMessageType.CALL, ++seqid_));
      findNoteCounts_args args = new findNoteCounts_args();
      args.setAuthenticationToken(authenticationToken);
      args.setFilter(filter);
      args.setWithTrash(withTrash);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public NoteCollectionCounts recv_findNoteCounts() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findNoteCounts failed: out of sequence response");
      }
      findNoteCounts_result result = new findNoteCounts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findNoteCounts failed: unknown result");
    }

    public com.evernote.edam.type.Note getNote(String authenticationToken, String guid, boolean withContent, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
      return recv_getNote();
    }

    public void send_getNote(String authenticationToken, String guid, boolean withContent, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNote", TMessageType.CALL, ++seqid_));
      getNote_args args = new getNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setWithContent(withContent);
      args.setWithResourcesData(withResourcesData);
      args.setWithResourcesRecognition(withResourcesRecognition);
      args.setWithResourcesAlternateData(withResourcesAlternateData);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_getNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNote failed: out of sequence response");
      }
      getNote_result result = new getNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNote failed: unknown result");
    }

    public String getNoteContent(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteContent(authenticationToken, guid);
      return recv_getNoteContent();
    }

    public void send_getNoteContent(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteContent", TMessageType.CALL, ++seqid_));
      getNoteContent_args args = new getNoteContent_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getNoteContent() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteContent failed: out of sequence response");
      }
      getNoteContent_result result = new getNoteContent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteContent failed: unknown result");
    }

    public String getNoteSearchText(String authenticationToken, String guid, boolean noteOnly, boolean tokenizeForIndexing) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing);
      return recv_getNoteSearchText();
    }

    public void send_getNoteSearchText(String authenticationToken, String guid, boolean noteOnly, boolean tokenizeForIndexing) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteSearchText", TMessageType.CALL, ++seqid_));
      getNoteSearchText_args args = new getNoteSearchText_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setNoteOnly(noteOnly);
      args.setTokenizeForIndexing(tokenizeForIndexing);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getNoteSearchText() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteSearchText failed: out of sequence response");
      }
      getNoteSearchText_result result = new getNoteSearchText_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteSearchText failed: unknown result");
    }

    public String getResourceSearchText(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceSearchText(authenticationToken, guid);
      return recv_getResourceSearchText();
    }

    public void send_getResourceSearchText(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceSearchText", TMessageType.CALL, ++seqid_));
      getResourceSearchText_args args = new getResourceSearchText_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getResourceSearchText() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceSearchText failed: out of sequence response");
      }
      getResourceSearchText_result result = new getResourceSearchText_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceSearchText failed: unknown result");
    }

    public Vector getNoteTagNames(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteTagNames(authenticationToken, guid);
      return recv_getNoteTagNames();
    }

    public void send_getNoteTagNames(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteTagNames", TMessageType.CALL, ++seqid_));
      getNoteTagNames_args args = new getNoteTagNames_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getNoteTagNames() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteTagNames failed: out of sequence response");
      }
      getNoteTagNames_result result = new getNoteTagNames_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteTagNames failed: unknown result");
    }

    public com.evernote.edam.type.Note createNote(String authenticationToken, com.evernote.edam.type.Note note) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_createNote(authenticationToken, note);
      return recv_createNote();
    }

    public void send_createNote(String authenticationToken, com.evernote.edam.type.Note note) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createNote", TMessageType.CALL, ++seqid_));
      createNote_args args = new createNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNote(note);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_createNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createNote failed: out of sequence response");
      }
      createNote_result result = new createNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createNote failed: unknown result");
    }

    public com.evernote.edam.type.Note updateNote(String authenticationToken, com.evernote.edam.type.Note note) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateNote(authenticationToken, note);
      return recv_updateNote();
    }

    public void send_updateNote(String authenticationToken, com.evernote.edam.type.Note note) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateNote", TMessageType.CALL, ++seqid_));
      updateNote_args args = new updateNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNote(note);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_updateNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateNote failed: out of sequence response");
      }
      updateNote_result result = new updateNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateNote failed: unknown result");
    }

    public int deleteNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_deleteNote(authenticationToken, guid);
      return recv_deleteNote();
    }

    public void send_deleteNote(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("deleteNote", TMessageType.CALL, ++seqid_));
      deleteNote_args args = new deleteNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_deleteNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "deleteNote failed: out of sequence response");
      }
      deleteNote_result result = new deleteNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "deleteNote failed: unknown result");
    }

    public int expungeNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeNote(authenticationToken, guid);
      return recv_expungeNote();
    }

    public void send_expungeNote(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeNote", TMessageType.CALL, ++seqid_));
      expungeNote_args args = new expungeNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeNote failed: out of sequence response");
      }
      expungeNote_result result = new expungeNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeNote failed: unknown result");
    }

    public int expungeNotes(String authenticationToken, Vector noteGuids) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_expungeNotes(authenticationToken, noteGuids);
      return recv_expungeNotes();
    }

    public void send_expungeNotes(String authenticationToken, Vector noteGuids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeNotes", TMessageType.CALL, ++seqid_));
      expungeNotes_args args = new expungeNotes_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuids(noteGuids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeNotes() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeNotes failed: out of sequence response");
      }
      expungeNotes_result result = new expungeNotes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeNotes failed: unknown result");
    }

    public int expungeInactiveNotes(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_expungeInactiveNotes(authenticationToken);
      return recv_expungeInactiveNotes();
    }

    public void send_expungeInactiveNotes(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.CALL, ++seqid_));
      expungeInactiveNotes_args args = new expungeInactiveNotes_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeInactiveNotes() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeInactiveNotes failed: out of sequence response");
      }
      expungeInactiveNotes_result result = new expungeInactiveNotes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeInactiveNotes failed: unknown result");
    }

    public com.evernote.edam.type.Note copyNote(String authenticationToken, String noteGuid, String toNotebookGuid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_copyNote(authenticationToken, noteGuid, toNotebookGuid);
      return recv_copyNote();
    }

    public void send_copyNote(String authenticationToken, String noteGuid, String toNotebookGuid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("copyNote", TMessageType.CALL, ++seqid_));
      copyNote_args args = new copyNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuid(noteGuid);
      args.setToNotebookGuid(toNotebookGuid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_copyNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "copyNote failed: out of sequence response");
      }
      copyNote_result result = new copyNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "copyNote failed: unknown result");
    }

    public Vector listNoteVersions(String authenticationToken, String noteGuid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_listNoteVersions(authenticationToken, noteGuid);
      return recv_listNoteVersions();
    }

    public void send_listNoteVersions(String authenticationToken, String noteGuid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listNoteVersions", TMessageType.CALL, ++seqid_));
      listNoteVersions_args args = new listNoteVersions_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuid(noteGuid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_listNoteVersions() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listNoteVersions failed: out of sequence response");
      }
      listNoteVersions_result result = new listNoteVersions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listNoteVersions failed: unknown result");
    }

    public com.evernote.edam.type.Note getNoteVersion(String authenticationToken, String noteGuid, int updateSequenceNum, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData);
      return recv_getNoteVersion();
    }

    public void send_getNoteVersion(String authenticationToken, String noteGuid, int updateSequenceNum, boolean withResourcesData, boolean withResourcesRecognition, boolean withResourcesAlternateData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNoteVersion", TMessageType.CALL, ++seqid_));
      getNoteVersion_args args = new getNoteVersion_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuid(noteGuid);
      args.setUpdateSequenceNum(updateSequenceNum);
      args.setWithResourcesData(withResourcesData);
      args.setWithResourcesRecognition(withResourcesRecognition);
      args.setWithResourcesAlternateData(withResourcesAlternateData);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Note recv_getNoteVersion() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNoteVersion failed: out of sequence response");
      }
      getNoteVersion_result result = new getNoteVersion_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNoteVersion failed: unknown result");
    }

    public com.evernote.edam.type.Resource getResource(String authenticationToken, String guid, boolean withData, boolean withRecognition, boolean withAttributes, boolean withAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData);
      return recv_getResource();
    }

    public void send_getResource(String authenticationToken, String guid, boolean withData, boolean withRecognition, boolean withAttributes, boolean withAlternateData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResource", TMessageType.CALL, ++seqid_));
      getResource_args args = new getResource_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.setWithData(withData);
      args.setWithRecognition(withRecognition);
      args.setWithAttributes(withAttributes);
      args.setWithAlternateData(withAlternateData);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Resource recv_getResource() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResource failed: out of sequence response");
      }
      getResource_result result = new getResource_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResource failed: unknown result");
    }

    public int updateResource(String authenticationToken, com.evernote.edam.type.Resource resource) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_updateResource(authenticationToken, resource);
      return recv_updateResource();
    }

    public void send_updateResource(String authenticationToken, com.evernote.edam.type.Resource resource) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateResource", TMessageType.CALL, ++seqid_));
      updateResource_args args = new updateResource_args();
      args.setAuthenticationToken(authenticationToken);
      args.setResource(resource);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateResource() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateResource failed: out of sequence response");
      }
      updateResource_result result = new updateResource_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateResource failed: unknown result");
    }

    public byte[] getResourceData(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceData(authenticationToken, guid);
      return recv_getResourceData();
    }

    public void send_getResourceData(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceData", TMessageType.CALL, ++seqid_));
      getResourceData_args args = new getResourceData_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_getResourceData() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceData failed: out of sequence response");
      }
      getResourceData_result result = new getResourceData_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceData failed: unknown result");
    }

    public com.evernote.edam.type.Resource getResourceByHash(String authenticationToken, String noteGuid, byte[] contentHash, boolean withData, boolean withRecognition, boolean withAlternateData) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData);
      return recv_getResourceByHash();
    }

    public void send_getResourceByHash(String authenticationToken, String noteGuid, byte[] contentHash, boolean withData, boolean withRecognition, boolean withAlternateData) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceByHash", TMessageType.CALL, ++seqid_));
      getResourceByHash_args args = new getResourceByHash_args();
      args.setAuthenticationToken(authenticationToken);
      args.setNoteGuid(noteGuid);
      args.setContentHash(contentHash);
      args.setWithData(withData);
      args.setWithRecognition(withRecognition);
      args.setWithAlternateData(withAlternateData);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Resource recv_getResourceByHash() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceByHash failed: out of sequence response");
      }
      getResourceByHash_result result = new getResourceByHash_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceByHash failed: unknown result");
    }

    public byte[] getResourceRecognition(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceRecognition(authenticationToken, guid);
      return recv_getResourceRecognition();
    }

    public void send_getResourceRecognition(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceRecognition", TMessageType.CALL, ++seqid_));
      getResourceRecognition_args args = new getResourceRecognition_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_getResourceRecognition() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceRecognition failed: out of sequence response");
      }
      getResourceRecognition_result result = new getResourceRecognition_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceRecognition failed: unknown result");
    }

    public byte[] getResourceAlternateData(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceAlternateData(authenticationToken, guid);
      return recv_getResourceAlternateData();
    }

    public void send_getResourceAlternateData(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceAlternateData", TMessageType.CALL, ++seqid_));
      getResourceAlternateData_args args = new getResourceAlternateData_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_getResourceAlternateData() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceAlternateData failed: out of sequence response");
      }
      getResourceAlternateData_result result = new getResourceAlternateData_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceAlternateData failed: unknown result");
    }

    public com.evernote.edam.type.ResourceAttributes getResourceAttributes(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getResourceAttributes(authenticationToken, guid);
      return recv_getResourceAttributes();
    }

    public void send_getResourceAttributes(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResourceAttributes", TMessageType.CALL, ++seqid_));
      getResourceAttributes_args args = new getResourceAttributes_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.ResourceAttributes recv_getResourceAttributes() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getResourceAttributes failed: out of sequence response");
      }
      getResourceAttributes_result result = new getResourceAttributes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResourceAttributes failed: unknown result");
    }

    public long getAccountSize(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getAccountSize(authenticationToken);
      return recv_getAccountSize();
    }

    public void send_getAccountSize(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAccountSize", TMessageType.CALL, ++seqid_));
      getAccountSize_args args = new getAccountSize_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getAccountSize() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAccountSize failed: out of sequence response");
      }
      getAccountSize_result result = new getAccountSize_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAccountSize failed: unknown result");
    }

    public Vector getAds(String authenticationToken, AdParameters adParameters) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getAds(authenticationToken, adParameters);
      return recv_getAds();
    }

    public void send_getAds(String authenticationToken, AdParameters adParameters) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAds", TMessageType.CALL, ++seqid_));
      getAds_args args = new getAds_args();
      args.setAuthenticationToken(authenticationToken);
      args.setAdParameters(adParameters);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getAds() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAds failed: out of sequence response");
      }
      getAds_result result = new getAds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAds failed: unknown result");
    }

    public com.evernote.edam.type.Ad getRandomAd(String authenticationToken, AdParameters adParameters) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getRandomAd(authenticationToken, adParameters);
      return recv_getRandomAd();
    }

    public void send_getRandomAd(String authenticationToken, AdParameters adParameters) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRandomAd", TMessageType.CALL, ++seqid_));
      getRandomAd_args args = new getRandomAd_args();
      args.setAuthenticationToken(authenticationToken);
      args.setAdParameters(adParameters);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Ad recv_getRandomAd() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRandomAd failed: out of sequence response");
      }
      getRandomAd_result result = new getRandomAd_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRandomAd failed: unknown result");
    }

    public com.evernote.edam.type.Notebook getPublicNotebook(int userId, String publicUri) throws com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      send_getPublicNotebook(userId, publicUri);
      return recv_getPublicNotebook();
    }

    public void send_getPublicNotebook(int userId, String publicUri) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPublicNotebook", TMessageType.CALL, ++seqid_));
      getPublicNotebook_args args = new getPublicNotebook_args();
      args.setUserId(userId);
      args.setPublicUri(publicUri);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.Notebook recv_getPublicNotebook() throws com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPublicNotebook failed: out of sequence response");
      }
      getPublicNotebook_result result = new getPublicNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPublicNotebook failed: unknown result");
    }

    public com.evernote.edam.type.SharedNotebook createSharedNotebook(String authenticationToken, com.evernote.edam.type.SharedNotebook sharedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_createSharedNotebook(authenticationToken, sharedNotebook);
      return recv_createSharedNotebook();
    }

    public void send_createSharedNotebook(String authenticationToken, com.evernote.edam.type.SharedNotebook sharedNotebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createSharedNotebook", TMessageType.CALL, ++seqid_));
      createSharedNotebook_args args = new createSharedNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setSharedNotebook(sharedNotebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.SharedNotebook recv_createSharedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createSharedNotebook failed: out of sequence response");
      }
      createSharedNotebook_result result = new createSharedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createSharedNotebook failed: unknown result");
    }

    public Vector listSharedNotebooks(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listSharedNotebooks(authenticationToken);
      return recv_listSharedNotebooks();
    }

    public void send_listSharedNotebooks(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listSharedNotebooks", TMessageType.CALL, ++seqid_));
      listSharedNotebooks_args args = new listSharedNotebooks_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_listSharedNotebooks() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listSharedNotebooks failed: out of sequence response");
      }
      listSharedNotebooks_result result = new listSharedNotebooks_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listSharedNotebooks failed: unknown result");
    }

    public int expungeSharedNotebooks(String authenticationToken, Vector sharedNotebookIds) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_expungeSharedNotebooks(authenticationToken, sharedNotebookIds);
      return recv_expungeSharedNotebooks();
    }

    public void send_expungeSharedNotebooks(String authenticationToken, Vector sharedNotebookIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.CALL, ++seqid_));
      expungeSharedNotebooks_args args = new expungeSharedNotebooks_args();
      args.setAuthenticationToken(authenticationToken);
      args.setSharedNotebookIds(sharedNotebookIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeSharedNotebooks() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeSharedNotebooks failed: out of sequence response");
      }
      expungeSharedNotebooks_result result = new expungeSharedNotebooks_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeSharedNotebooks failed: unknown result");
    }

    public com.evernote.edam.type.LinkedNotebook createLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_createLinkedNotebook(authenticationToken, linkedNotebook);
      return recv_createLinkedNotebook();
    }

    public void send_createLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createLinkedNotebook", TMessageType.CALL, ++seqid_));
      createLinkedNotebook_args args = new createLinkedNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setLinkedNotebook(linkedNotebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.LinkedNotebook recv_createLinkedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createLinkedNotebook failed: out of sequence response");
      }
      createLinkedNotebook_result result = new createLinkedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createLinkedNotebook failed: unknown result");
    }

    public int updateLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_updateLinkedNotebook(authenticationToken, linkedNotebook);
      return recv_updateLinkedNotebook();
    }

    public void send_updateLinkedNotebook(String authenticationToken, com.evernote.edam.type.LinkedNotebook linkedNotebook) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.CALL, ++seqid_));
      updateLinkedNotebook_args args = new updateLinkedNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setLinkedNotebook(linkedNotebook);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateLinkedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateLinkedNotebook failed: out of sequence response");
      }
      updateLinkedNotebook_result result = new updateLinkedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateLinkedNotebook failed: unknown result");
    }

    public Vector listLinkedNotebooks(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_listLinkedNotebooks(authenticationToken);
      return recv_listLinkedNotebooks();
    }

    public void send_listLinkedNotebooks(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.CALL, ++seqid_));
      listLinkedNotebooks_args args = new listLinkedNotebooks_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_listLinkedNotebooks() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "listLinkedNotebooks failed: out of sequence response");
      }
      listLinkedNotebooks_result result = new listLinkedNotebooks_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "listLinkedNotebooks failed: unknown result");
    }

    public int expungeLinkedNotebook(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_expungeLinkedNotebook(authenticationToken, guid);
      return recv_expungeLinkedNotebook();
    }

    public void send_expungeLinkedNotebook(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.CALL, ++seqid_));
      expungeLinkedNotebook_args args = new expungeLinkedNotebook_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_expungeLinkedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "expungeLinkedNotebook failed: out of sequence response");
      }
      expungeLinkedNotebook_result result = new expungeLinkedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "expungeLinkedNotebook failed: unknown result");
    }

    public com.evernote.edam.userstore.AuthenticationResult authenticateToSharedNotebook(String shareKey, String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_authenticateToSharedNotebook(shareKey, authenticationToken);
      return recv_authenticateToSharedNotebook();
    }

    public void send_authenticateToSharedNotebook(String shareKey, String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.CALL, ++seqid_));
      authenticateToSharedNotebook_args args = new authenticateToSharedNotebook_args();
      args.setShareKey(shareKey);
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.userstore.AuthenticationResult recv_authenticateToSharedNotebook() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "authenticateToSharedNotebook failed: out of sequence response");
      }
      authenticateToSharedNotebook_result result = new authenticateToSharedNotebook_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "authenticateToSharedNotebook failed: unknown result");
    }

    public com.evernote.edam.type.SharedNotebook getSharedNotebookByAuth(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getSharedNotebookByAuth(authenticationToken);
      return recv_getSharedNotebookByAuth();
    }

    public void send_getSharedNotebookByAuth(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.CALL, ++seqid_));
      getSharedNotebookByAuth_args args = new getSharedNotebookByAuth_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.SharedNotebook recv_getSharedNotebookByAuth() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSharedNotebookByAuth failed: out of sequence response");
      }
      getSharedNotebookByAuth_result result = new getSharedNotebookByAuth_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSharedNotebookByAuth failed: unknown result");
    }

    public void emailNote(String authenticationToken, NoteEmailParameters parameters) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_emailNote(authenticationToken, parameters);
      recv_emailNote();
    }

    public void send_emailNote(String authenticationToken, NoteEmailParameters parameters) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("emailNote", TMessageType.CALL, ++seqid_));
      emailNote_args args = new emailNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setParameters(parameters);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_emailNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "emailNote failed: out of sequence response");
      }
      emailNote_result result = new emailNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      return;
    }

    public String shareNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_shareNote(authenticationToken, guid);
      return recv_shareNote();
    }

    public void send_shareNote(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("shareNote", TMessageType.CALL, ++seqid_));
      shareNote_args args = new shareNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_shareNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "shareNote failed: out of sequence response");
      }
      shareNote_result result = new shareNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "shareNote failed: unknown result");
    }

    public void stopSharingNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_stopSharingNote(authenticationToken, guid);
      recv_stopSharingNote();
    }

    public void send_stopSharingNote(String authenticationToken, String guid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("stopSharingNote", TMessageType.CALL, ++seqid_));
      stopSharingNote_args args = new stopSharingNote_args();
      args.setAuthenticationToken(authenticationToken);
      args.setGuid(guid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_stopSharingNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "stopSharingNote failed: out of sequence response");
      }
      stopSharingNote_result result = new stopSharingNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      return;
    }

    public com.evernote.edam.userstore.AuthenticationResult authenticateToSharedNote(String guid, String noteKey) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_authenticateToSharedNote(guid, noteKey);
      return recv_authenticateToSharedNote();
    }

    public void send_authenticateToSharedNote(String guid, String noteKey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("authenticateToSharedNote", TMessageType.CALL, ++seqid_));
      authenticateToSharedNote_args args = new authenticateToSharedNote_args();
      args.setGuid(guid);
      args.setNoteKey(noteKey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.userstore.AuthenticationResult recv_authenticateToSharedNote() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "authenticateToSharedNote failed: out of sequence response");
      }
      authenticateToSharedNote_result result = new authenticateToSharedNote_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "authenticateToSharedNote failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getSyncState", new getSyncState());
      processMap_.put("getSyncChunk", new getSyncChunk());
      processMap_.put("getLinkedNotebookSyncState", new getLinkedNotebookSyncState());
      processMap_.put("getLinkedNotebookSyncChunk", new getLinkedNotebookSyncChunk());
      processMap_.put("listNotebooks", new listNotebooks());
      processMap_.put("getNotebook", new getNotebook());
      processMap_.put("getDefaultNotebook", new getDefaultNotebook());
      processMap_.put("createNotebook", new createNotebook());
      processMap_.put("updateNotebook", new updateNotebook());
      processMap_.put("expungeNotebook", new expungeNotebook());
      processMap_.put("listTags", new listTags());
      processMap_.put("listTagsByNotebook", new listTagsByNotebook());
      processMap_.put("getTag", new getTag());
      processMap_.put("createTag", new createTag());
      processMap_.put("updateTag", new updateTag());
      processMap_.put("untagAll", new untagAll());
      processMap_.put("expungeTag", new expungeTag());
      processMap_.put("listSearches", new listSearches());
      processMap_.put("getSearch", new getSearch());
      processMap_.put("createSearch", new createSearch());
      processMap_.put("updateSearch", new updateSearch());
      processMap_.put("expungeSearch", new expungeSearch());
      processMap_.put("findNotes", new findNotes());
      processMap_.put("findNoteOffset", new findNoteOffset());
      processMap_.put("findNotesMetadata", new findNotesMetadata());
      processMap_.put("findNoteCounts", new findNoteCounts());
      processMap_.put("getNote", new getNote());
      processMap_.put("getNoteContent", new getNoteContent());
      processMap_.put("getNoteSearchText", new getNoteSearchText());
      processMap_.put("getResourceSearchText", new getResourceSearchText());
      processMap_.put("getNoteTagNames", new getNoteTagNames());
      processMap_.put("createNote", new createNote());
      processMap_.put("updateNote", new updateNote());
      processMap_.put("deleteNote", new deleteNote());
      processMap_.put("expungeNote", new expungeNote());
      processMap_.put("expungeNotes", new expungeNotes());
      processMap_.put("expungeInactiveNotes", new expungeInactiveNotes());
      processMap_.put("copyNote", new copyNote());
      processMap_.put("listNoteVersions", new listNoteVersions());
      processMap_.put("getNoteVersion", new getNoteVersion());
      processMap_.put("getResource", new getResource());
      processMap_.put("updateResource", new updateResource());
      processMap_.put("getResourceData", new getResourceData());
      processMap_.put("getResourceByHash", new getResourceByHash());
      processMap_.put("getResourceRecognition", new getResourceRecognition());
      processMap_.put("getResourceAlternateData", new getResourceAlternateData());
      processMap_.put("getResourceAttributes", new getResourceAttributes());
      processMap_.put("getAccountSize", new getAccountSize());
      processMap_.put("getAds", new getAds());
      processMap_.put("getRandomAd", new getRandomAd());
      processMap_.put("getPublicNotebook", new getPublicNotebook());
      processMap_.put("createSharedNotebook", new createSharedNotebook());
      processMap_.put("listSharedNotebooks", new listSharedNotebooks());
      processMap_.put("expungeSharedNotebooks", new expungeSharedNotebooks());
      processMap_.put("createLinkedNotebook", new createLinkedNotebook());
      processMap_.put("updateLinkedNotebook", new updateLinkedNotebook());
      processMap_.put("listLinkedNotebooks", new listLinkedNotebooks());
      processMap_.put("expungeLinkedNotebook", new expungeLinkedNotebook());
      processMap_.put("authenticateToSharedNotebook", new authenticateToSharedNotebook());
      processMap_.put("getSharedNotebookByAuth", new getSharedNotebookByAuth());
      processMap_.put("emailNote", new emailNote());
      processMap_.put("shareNote", new shareNote());
      processMap_.put("stopSharingNote", new stopSharingNote());
      processMap_.put("authenticateToSharedNote", new authenticateToSharedNote());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getSyncState implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSyncState_args args = new getSyncState_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSyncState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSyncState_result result = new getSyncState_result();
        try {
          result.success = iface_.getSyncState(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSyncState");
          oprot.writeMessageBegin(new TMessage("getSyncState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSyncState", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSyncChunk implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSyncChunk_args args = new getSyncChunk_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSyncChunk_result result = new getSyncChunk_result();
        try {
          result.success = iface_.getSyncChunk(args.authenticationToken, args.afterUSN, args.maxEntries, args.fullSyncOnly);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSyncChunk");
          oprot.writeMessageBegin(new TMessage("getSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSyncChunk", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLinkedNotebookSyncState implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLinkedNotebookSyncState_args args = new getLinkedNotebookSyncState_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLinkedNotebookSyncState_result result = new getLinkedNotebookSyncState_result();
        try {
          result.success = iface_.getLinkedNotebookSyncState(args.authenticationToken, args.linkedNotebook);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLinkedNotebookSyncState");
          oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncState", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncState", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLinkedNotebookSyncChunk implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLinkedNotebookSyncChunk_args args = new getLinkedNotebookSyncChunk_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLinkedNotebookSyncChunk_result result = new getLinkedNotebookSyncChunk_result();
        try {
          result.success = iface_.getLinkedNotebookSyncChunk(args.authenticationToken, args.linkedNotebook, args.afterUSN, args.maxEntries, args.fullSyncOnly);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLinkedNotebookSyncChunk");
          oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncChunk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getLinkedNotebookSyncChunk", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listNotebooks implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listNotebooks_args args = new listNotebooks_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listNotebooks_result result = new listNotebooks_result();
        try {
          result.success = iface_.listNotebooks(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listNotebooks");
          oprot.writeMessageBegin(new TMessage("listNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listNotebooks", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNotebook_args args = new getNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNotebook_result result = new getNotebook_result();
        try {
          result.success = iface_.getNotebook(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNotebook");
          oprot.writeMessageBegin(new TMessage("getNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDefaultNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getDefaultNotebook_args args = new getDefaultNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getDefaultNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDefaultNotebook_result result = new getDefaultNotebook_result();
        try {
          result.success = iface_.getDefaultNotebook(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getDefaultNotebook");
          oprot.writeMessageBegin(new TMessage("getDefaultNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getDefaultNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createNotebook_args args = new createNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createNotebook_result result = new createNotebook_result();
        try {
          result.success = iface_.createNotebook(args.authenticationToken, args.notebook);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createNotebook");
          oprot.writeMessageBegin(new TMessage("createNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateNotebook_args args = new updateNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateNotebook_result result = new updateNotebook_result();
        try {
          result.success = iface_.updateNotebook(args.authenticationToken, args.notebook);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateNotebook");
          oprot.writeMessageBegin(new TMessage("updateNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeNotebook_args args = new expungeNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeNotebook_result result = new expungeNotebook_result();
        try {
          result.success = iface_.expungeNotebook(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeNotebook");
          oprot.writeMessageBegin(new TMessage("expungeNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listTags implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listTags_args args = new listTags_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listTags", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listTags_result result = new listTags_result();
        try {
          result.success = iface_.listTags(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listTags");
          oprot.writeMessageBegin(new TMessage("listTags", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listTags", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listTagsByNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listTagsByNotebook_args args = new listTagsByNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listTagsByNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listTagsByNotebook_result result = new listTagsByNotebook_result();
        try {
          result.success = iface_.listTagsByNotebook(args.authenticationToken, args.notebookGuid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listTagsByNotebook");
          oprot.writeMessageBegin(new TMessage("listTagsByNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listTagsByNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getTag_args args = new getTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTag_result result = new getTag_result();
        try {
          result.success = iface_.getTag(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getTag");
          oprot.writeMessageBegin(new TMessage("getTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createTag_args args = new createTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createTag_result result = new createTag_result();
        try {
          result.success = iface_.createTag(args.authenticationToken, args.tag);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createTag");
          oprot.writeMessageBegin(new TMessage("createTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateTag_args args = new updateTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateTag_result result = new updateTag_result();
        try {
          result.success = iface_.updateTag(args.authenticationToken, args.tag);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateTag");
          oprot.writeMessageBegin(new TMessage("updateTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class untagAll implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        untagAll_args args = new untagAll_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("untagAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        untagAll_result result = new untagAll_result();
        try {
          iface_.untagAll(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing untagAll");
          oprot.writeMessageBegin(new TMessage("untagAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("untagAll", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeTag_args args = new expungeTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeTag_result result = new expungeTag_result();
        try {
          result.success = iface_.expungeTag(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeTag");
          oprot.writeMessageBegin(new TMessage("expungeTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listSearches implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listSearches_args args = new listSearches_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listSearches", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listSearches_result result = new listSearches_result();
        try {
          result.success = iface_.listSearches(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listSearches");
          oprot.writeMessageBegin(new TMessage("listSearches", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listSearches", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSearch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSearch_args args = new getSearch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSearch_result result = new getSearch_result();
        try {
          result.success = iface_.getSearch(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSearch");
          oprot.writeMessageBegin(new TMessage("getSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSearch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createSearch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createSearch_args args = new createSearch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createSearch_result result = new createSearch_result();
        try {
          result.success = iface_.createSearch(args.authenticationToken, args.search);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createSearch");
          oprot.writeMessageBegin(new TMessage("createSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createSearch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateSearch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateSearch_args args = new updateSearch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateSearch_result result = new updateSearch_result();
        try {
          result.success = iface_.updateSearch(args.authenticationToken, args.search);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSearch");
          oprot.writeMessageBegin(new TMessage("updateSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateSearch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeSearch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeSearch_args args = new expungeSearch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeSearch_result result = new expungeSearch_result();
        try {
          result.success = iface_.expungeSearch(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeSearch");
          oprot.writeMessageBegin(new TMessage("expungeSearch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeSearch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findNotes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findNotes_args args = new findNotes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findNotes_result result = new findNotes_result();
        try {
          result.success = iface_.findNotes(args.authenticationToken, args.filter, args.offset, args.maxNotes);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findNotes");
          oprot.writeMessageBegin(new TMessage("findNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findNotes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findNoteOffset implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findNoteOffset_args args = new findNoteOffset_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findNoteOffset", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findNoteOffset_result result = new findNoteOffset_result();
        try {
          result.success = iface_.findNoteOffset(args.authenticationToken, args.filter, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findNoteOffset");
          oprot.writeMessageBegin(new TMessage("findNoteOffset", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findNoteOffset", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findNotesMetadata implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findNotesMetadata_args args = new findNotesMetadata_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findNotesMetadata", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findNotesMetadata_result result = new findNotesMetadata_result();
        try {
          result.success = iface_.findNotesMetadata(args.authenticationToken, args.filter, args.offset, args.maxNotes, args.resultSpec);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findNotesMetadata");
          oprot.writeMessageBegin(new TMessage("findNotesMetadata", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findNotesMetadata", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findNoteCounts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findNoteCounts_args args = new findNoteCounts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findNoteCounts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findNoteCounts_result result = new findNoteCounts_result();
        try {
          result.success = iface_.findNoteCounts(args.authenticationToken, args.filter, args.withTrash);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findNoteCounts");
          oprot.writeMessageBegin(new TMessage("findNoteCounts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findNoteCounts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNote_args args = new getNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNote_result result = new getNote_result();
        try {
          result.success = iface_.getNote(args.authenticationToken, args.guid, args.withContent, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNote");
          oprot.writeMessageBegin(new TMessage("getNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteContent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteContent_args args = new getNoteContent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteContent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteContent_result result = new getNoteContent_result();
        try {
          result.success = iface_.getNoteContent(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteContent");
          oprot.writeMessageBegin(new TMessage("getNoteContent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteContent", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteSearchText implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteSearchText_args args = new getNoteSearchText_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteSearchText", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteSearchText_result result = new getNoteSearchText_result();
        try {
          result.success = iface_.getNoteSearchText(args.authenticationToken, args.guid, args.noteOnly, args.tokenizeForIndexing);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteSearchText");
          oprot.writeMessageBegin(new TMessage("getNoteSearchText", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteSearchText", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceSearchText implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceSearchText_args args = new getResourceSearchText_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceSearchText", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceSearchText_result result = new getResourceSearchText_result();
        try {
          result.success = iface_.getResourceSearchText(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceSearchText");
          oprot.writeMessageBegin(new TMessage("getResourceSearchText", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceSearchText", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteTagNames implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteTagNames_args args = new getNoteTagNames_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteTagNames", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteTagNames_result result = new getNoteTagNames_result();
        try {
          result.success = iface_.getNoteTagNames(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteTagNames");
          oprot.writeMessageBegin(new TMessage("getNoteTagNames", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteTagNames", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createNote_args args = new createNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createNote_result result = new createNote_result();
        try {
          result.success = iface_.createNote(args.authenticationToken, args.note);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createNote");
          oprot.writeMessageBegin(new TMessage("createNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateNote_args args = new updateNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateNote_result result = new updateNote_result();
        try {
          result.success = iface_.updateNote(args.authenticationToken, args.note);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateNote");
          oprot.writeMessageBegin(new TMessage("updateNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class deleteNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        deleteNote_args args = new deleteNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("deleteNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        deleteNote_result result = new deleteNote_result();
        try {
          result.success = iface_.deleteNote(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing deleteNote");
          oprot.writeMessageBegin(new TMessage("deleteNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("deleteNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeNote_args args = new expungeNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeNote_result result = new expungeNote_result();
        try {
          result.success = iface_.expungeNote(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeNote");
          oprot.writeMessageBegin(new TMessage("expungeNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeNotes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeNotes_args args = new expungeNotes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeNotes_result result = new expungeNotes_result();
        try {
          result.success = iface_.expungeNotes(args.authenticationToken, args.noteGuids);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeNotes");
          oprot.writeMessageBegin(new TMessage("expungeNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeNotes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeInactiveNotes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeInactiveNotes_args args = new expungeInactiveNotes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeInactiveNotes_result result = new expungeInactiveNotes_result();
        try {
          result.success = iface_.expungeInactiveNotes(args.authenticationToken);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeInactiveNotes");
          oprot.writeMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeInactiveNotes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class copyNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        copyNote_args args = new copyNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("copyNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        copyNote_result result = new copyNote_result();
        try {
          result.success = iface_.copyNote(args.authenticationToken, args.noteGuid, args.toNotebookGuid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing copyNote");
          oprot.writeMessageBegin(new TMessage("copyNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("copyNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listNoteVersions implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listNoteVersions_args args = new listNoteVersions_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listNoteVersions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listNoteVersions_result result = new listNoteVersions_result();
        try {
          result.success = iface_.listNoteVersions(args.authenticationToken, args.noteGuid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listNoteVersions");
          oprot.writeMessageBegin(new TMessage("listNoteVersions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listNoteVersions", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNoteVersion implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNoteVersion_args args = new getNoteVersion_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNoteVersion", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNoteVersion_result result = new getNoteVersion_result();
        try {
          result.success = iface_.getNoteVersion(args.authenticationToken, args.noteGuid, args.updateSequenceNum, args.withResourcesData, args.withResourcesRecognition, args.withResourcesAlternateData);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNoteVersion");
          oprot.writeMessageBegin(new TMessage("getNoteVersion", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNoteVersion", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResource implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResource_args args = new getResource_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResource", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResource_result result = new getResource_result();
        try {
          result.success = iface_.getResource(args.authenticationToken, args.guid, args.withData, args.withRecognition, args.withAttributes, args.withAlternateData);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResource");
          oprot.writeMessageBegin(new TMessage("getResource", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResource", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateResource implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateResource_args args = new updateResource_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateResource", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateResource_result result = new updateResource_result();
        try {
          result.success = iface_.updateResource(args.authenticationToken, args.resource);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateResource");
          oprot.writeMessageBegin(new TMessage("updateResource", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateResource", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceData implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceData_args args = new getResourceData_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceData_result result = new getResourceData_result();
        try {
          result.success = iface_.getResourceData(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceData");
          oprot.writeMessageBegin(new TMessage("getResourceData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceData", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceByHash implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceByHash_args args = new getResourceByHash_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceByHash", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceByHash_result result = new getResourceByHash_result();
        try {
          result.success = iface_.getResourceByHash(args.authenticationToken, args.noteGuid, args.contentHash, args.withData, args.withRecognition, args.withAlternateData);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceByHash");
          oprot.writeMessageBegin(new TMessage("getResourceByHash", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceByHash", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceRecognition implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceRecognition_args args = new getResourceRecognition_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceRecognition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceRecognition_result result = new getResourceRecognition_result();
        try {
          result.success = iface_.getResourceRecognition(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceRecognition");
          oprot.writeMessageBegin(new TMessage("getResourceRecognition", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceRecognition", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceAlternateData implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceAlternateData_args args = new getResourceAlternateData_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceAlternateData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceAlternateData_result result = new getResourceAlternateData_result();
        try {
          result.success = iface_.getResourceAlternateData(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceAlternateData");
          oprot.writeMessageBegin(new TMessage("getResourceAlternateData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceAlternateData", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResourceAttributes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResourceAttributes_args args = new getResourceAttributes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getResourceAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getResourceAttributes_result result = new getResourceAttributes_result();
        try {
          result.success = iface_.getResourceAttributes(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getResourceAttributes");
          oprot.writeMessageBegin(new TMessage("getResourceAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getResourceAttributes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAccountSize implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAccountSize_args args = new getAccountSize_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAccountSize", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAccountSize_result result = new getAccountSize_result();
        try {
          result.success = iface_.getAccountSize(args.authenticationToken);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAccountSize");
          oprot.writeMessageBegin(new TMessage("getAccountSize", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAccountSize", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAds_args args = new getAds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAds_result result = new getAds_result();
        try {
          result.success = iface_.getAds(args.authenticationToken, args.adParameters);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAds");
          oprot.writeMessageBegin(new TMessage("getAds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRandomAd implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRandomAd_args args = new getRandomAd_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRandomAd", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRandomAd_result result = new getRandomAd_result();
        try {
          result.success = iface_.getRandomAd(args.authenticationToken, args.adParameters);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRandomAd");
          oprot.writeMessageBegin(new TMessage("getRandomAd", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRandomAd", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPublicNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPublicNotebook_args args = new getPublicNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPublicNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPublicNotebook_result result = new getPublicNotebook_result();
        try {
          result.success = iface_.getPublicNotebook(args.userId, args.publicUri);
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPublicNotebook");
          oprot.writeMessageBegin(new TMessage("getPublicNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPublicNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createSharedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createSharedNotebook_args args = new createSharedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createSharedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createSharedNotebook_result result = new createSharedNotebook_result();
        try {
          result.success = iface_.createSharedNotebook(args.authenticationToken, args.sharedNotebook);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createSharedNotebook");
          oprot.writeMessageBegin(new TMessage("createSharedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createSharedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listSharedNotebooks implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listSharedNotebooks_args args = new listSharedNotebooks_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listSharedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listSharedNotebooks_result result = new listSharedNotebooks_result();
        try {
          result.success = iface_.listSharedNotebooks(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listSharedNotebooks");
          oprot.writeMessageBegin(new TMessage("listSharedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listSharedNotebooks", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeSharedNotebooks implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeSharedNotebooks_args args = new expungeSharedNotebooks_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeSharedNotebooks_result result = new expungeSharedNotebooks_result();
        try {
          result.success = iface_.expungeSharedNotebooks(args.authenticationToken, args.sharedNotebookIds);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeSharedNotebooks");
          oprot.writeMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeSharedNotebooks", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createLinkedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createLinkedNotebook_args args = new createLinkedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createLinkedNotebook_result result = new createLinkedNotebook_result();
        try {
          result.success = iface_.createLinkedNotebook(args.authenticationToken, args.linkedNotebook);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createLinkedNotebook");
          oprot.writeMessageBegin(new TMessage("createLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createLinkedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateLinkedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateLinkedNotebook_args args = new updateLinkedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateLinkedNotebook_result result = new updateLinkedNotebook_result();
        try {
          result.success = iface_.updateLinkedNotebook(args.authenticationToken, args.linkedNotebook);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateLinkedNotebook");
          oprot.writeMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateLinkedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class listLinkedNotebooks implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        listLinkedNotebooks_args args = new listLinkedNotebooks_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        listLinkedNotebooks_result result = new listLinkedNotebooks_result();
        try {
          result.success = iface_.listLinkedNotebooks(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing listLinkedNotebooks");
          oprot.writeMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("listLinkedNotebooks", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class expungeLinkedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        expungeLinkedNotebook_args args = new expungeLinkedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        expungeLinkedNotebook_result result = new expungeLinkedNotebook_result();
        try {
          result.success = iface_.expungeLinkedNotebook(args.authenticationToken, args.guid);
          result.setSuccessIsSet(true);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing expungeLinkedNotebook");
          oprot.writeMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("expungeLinkedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class authenticateToSharedNotebook implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        authenticateToSharedNotebook_args args = new authenticateToSharedNotebook_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        authenticateToSharedNotebook_result result = new authenticateToSharedNotebook_result();
        try {
          result.success = iface_.authenticateToSharedNotebook(args.shareKey, args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing authenticateToSharedNotebook");
          oprot.writeMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("authenticateToSharedNotebook", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSharedNotebookByAuth implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSharedNotebookByAuth_args args = new getSharedNotebookByAuth_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSharedNotebookByAuth_result result = new getSharedNotebookByAuth_result();
        try {
          result.success = iface_.getSharedNotebookByAuth(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSharedNotebookByAuth");
          oprot.writeMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSharedNotebookByAuth", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class emailNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        emailNote_args args = new emailNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("emailNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        emailNote_result result = new emailNote_result();
        try {
          iface_.emailNote(args.authenticationToken, args.parameters);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing emailNote");
          oprot.writeMessageBegin(new TMessage("emailNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("emailNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class shareNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        shareNote_args args = new shareNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("shareNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        shareNote_result result = new shareNote_result();
        try {
          result.success = iface_.shareNote(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing shareNote");
          oprot.writeMessageBegin(new TMessage("shareNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("shareNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class stopSharingNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        stopSharingNote_args args = new stopSharingNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("stopSharingNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        stopSharingNote_result result = new stopSharingNote_result();
        try {
          iface_.stopSharingNote(args.authenticationToken, args.guid);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing stopSharingNote");
          oprot.writeMessageBegin(new TMessage("stopSharingNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("stopSharingNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class authenticateToSharedNote implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        authenticateToSharedNote_args args = new authenticateToSharedNote_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("authenticateToSharedNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        authenticateToSharedNote_result result = new authenticateToSharedNote_result();
        try {
          result.success = iface_.authenticateToSharedNote(args.guid, args.noteKey);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing authenticateToSharedNote");
          oprot.writeMessageBegin(new TMessage("authenticateToSharedNote", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("authenticateToSharedNote", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getSyncState_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSyncState_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public getSyncState_args() {
    }

    public getSyncState_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyncState_args(getSyncState_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public getSyncState_args deepCopy() {
      return new getSyncState_args(this);
    }

    public getSyncState_args clone() {
      return new getSyncState_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncState_args)
        return this.equals((getSyncState_args)that);
      return false;
    }

    public boolean equals(getSyncState_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSyncState_args other = (getSyncState_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSyncState_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSyncState_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSyncState_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private SyncState success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public getSyncState_result() {
    }

    public getSyncState_result(
      SyncState success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyncState_result(getSyncState_result other) {
      if (other.isSetSuccess()) {
        this.success = new SyncState(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getSyncState_result deepCopy() {
      return new getSyncState_result(this);
    }

    public getSyncState_result clone() {
      return new getSyncState_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public SyncState getSuccess() {
      return this.success;
    }

    public void setSuccess(SyncState success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncState_result)
        return this.equals((getSyncState_result)that);
      return false;
    }

    public boolean equals(getSyncState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSyncState_result other = (getSyncState_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SyncState();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSyncState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSyncChunk_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSyncChunk_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField AFTER_USN_FIELD_DESC = new TField("afterUSN", TType.I32, (short)2);
    private static final TField MAX_ENTRIES_FIELD_DESC = new TField("maxEntries", TType.I32, (short)3);
    private static final TField FULL_SYNC_ONLY_FIELD_DESC = new TField("fullSyncOnly", TType.BOOL, (short)4);

    private String authenticationToken;
    private int afterUSN;
    private int maxEntries;
    private boolean fullSyncOnly;

    // isset id assignments
    private static final int __AFTERUSN_ISSET_ID = 0;
    private static final int __MAXENTRIES_ISSET_ID = 1;
    private static final int __FULLSYNCONLY_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public getSyncChunk_args() {
    }

    public getSyncChunk_args(
      String authenticationToken,
      int afterUSN,
      int maxEntries,
      boolean fullSyncOnly)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
      this.fullSyncOnly = fullSyncOnly;
      setFullSyncOnlyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyncChunk_args(getSyncChunk_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      this.afterUSN = other.afterUSN;
      this.maxEntries = other.maxEntries;
      this.fullSyncOnly = other.fullSyncOnly;
    }

    public getSyncChunk_args deepCopy() {
      return new getSyncChunk_args(this);
    }

    public getSyncChunk_args clone() {
      return new getSyncChunk_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      setAfterUSNIsSet(false);
      this.afterUSN = 0;
      setMaxEntriesIsSet(false);
      this.maxEntries = 0;
      setFullSyncOnlyIsSet(false);
      this.fullSyncOnly = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public int getAfterUSN() {
      return this.afterUSN;
    }

    public void setAfterUSN(int afterUSN) {
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
    }

    public void unsetAfterUSN() {
      __isset_vector[__AFTERUSN_ISSET_ID] = false;
    }

    /** Returns true if field afterUSN is set (has been asigned a value) and false otherwise */
    public boolean isSetAfterUSN() {
      return __isset_vector[__AFTERUSN_ISSET_ID];
    }

    public void setAfterUSNIsSet(boolean value) {
      __isset_vector[__AFTERUSN_ISSET_ID] = value;
    }

    public int getMaxEntries() {
      return this.maxEntries;
    }

    public void setMaxEntries(int maxEntries) {
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
    }

    public void unsetMaxEntries() {
      __isset_vector[__MAXENTRIES_ISSET_ID] = false;
    }

    /** Returns true if field maxEntries is set (has been asigned a value) and false otherwise */
    public boolean isSetMaxEntries() {
      return __isset_vector[__MAXENTRIES_ISSET_ID];
    }

    public void setMaxEntriesIsSet(boolean value) {
      __isset_vector[__MAXENTRIES_ISSET_ID] = value;
    }

    public boolean isFullSyncOnly() {
      return this.fullSyncOnly;
    }

    public void setFullSyncOnly(boolean fullSyncOnly) {
      this.fullSyncOnly = fullSyncOnly;
      setFullSyncOnlyIsSet(true);
    }

    public void unsetFullSyncOnly() {
      __isset_vector[__FULLSYNCONLY_ISSET_ID] = false;
    }

    /** Returns true if field fullSyncOnly is set (has been asigned a value) and false otherwise */
    public boolean isSetFullSyncOnly() {
      return __isset_vector[__FULLSYNCONLY_ISSET_ID];
    }

    public void setFullSyncOnlyIsSet(boolean value) {
      __isset_vector[__FULLSYNCONLY_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncChunk_args)
        return this.equals((getSyncChunk_args)that);
      return false;
    }

    public boolean equals(getSyncChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_afterUSN = true;
      boolean that_present_afterUSN = true;
      if (this_present_afterUSN || that_present_afterUSN) {
        if (!(this_present_afterUSN && that_present_afterUSN))
          return false;
        if (this.afterUSN != that.afterUSN)
          return false;
      }

      boolean this_present_maxEntries = true;
      boolean that_present_maxEntries = true;
      if (this_present_maxEntries || that_present_maxEntries) {
        if (!(this_present_maxEntries && that_present_maxEntries))
          return false;
        if (this.maxEntries != that.maxEntries)
          return false;
      }

      boolean this_present_fullSyncOnly = true;
      boolean that_present_fullSyncOnly = true;
      if (this_present_fullSyncOnly || that_present_fullSyncOnly) {
        if (!(this_present_fullSyncOnly && that_present_fullSyncOnly))
          return false;
        if (this.fullSyncOnly != that.fullSyncOnly)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSyncChunk_args other = (getSyncChunk_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAfterUSN(), other.isSetAfterUSN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAfterUSN()) {
        lastComparison = TBaseHelper.compareTo(this.afterUSN, other.afterUSN);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMaxEntries(), other.isSetMaxEntries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxEntries()) {
        lastComparison = TBaseHelper.compareTo(this.maxEntries, other.maxEntries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetFullSyncOnly(), other.isSetFullSyncOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFullSyncOnly()) {
        lastComparison = TBaseHelper.compareTo(this.fullSyncOnly, other.fullSyncOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AFTER_USN
            if (field.type == TType.I32) {
              this.afterUSN = iprot.readI32();
              setAfterUSNIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MAX_ENTRIES
            if (field.type == TType.I32) {
              this.maxEntries = iprot.readI32();
              setMaxEntriesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // FULL_SYNC_ONLY
            if (field.type == TType.BOOL) {
              this.fullSyncOnly = iprot.readBool();
              setFullSyncOnlyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AFTER_USN_FIELD_DESC);
      oprot.writeI32(this.afterUSN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ENTRIES_FIELD_DESC);
      oprot.writeI32(this.maxEntries);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FULL_SYNC_ONLY_FIELD_DESC);
      oprot.writeBool(this.fullSyncOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSyncChunk_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("afterUSN:");
      sb.append(this.afterUSN);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxEntries:");
      sb.append(this.maxEntries);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fullSyncOnly:");
      sb.append(this.fullSyncOnly);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSyncChunk_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSyncChunk_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private SyncChunk success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public getSyncChunk_result() {
    }

    public getSyncChunk_result(
      SyncChunk success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSyncChunk_result(getSyncChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = new SyncChunk(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getSyncChunk_result deepCopy() {
      return new getSyncChunk_result(this);
    }

    public getSyncChunk_result clone() {
      return new getSyncChunk_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public SyncChunk getSuccess() {
      return this.success;
    }

    public void setSuccess(SyncChunk success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncChunk_result)
        return this.equals((getSyncChunk_result)that);
      return false;
    }

    public boolean equals(getSyncChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSyncChunk_result other = (getSyncChunk_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SyncChunk();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSyncChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLinkedNotebookSyncState_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLinkedNotebookSyncState_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.LinkedNotebook linkedNotebook;

    // isset id assignments

    public getLinkedNotebookSyncState_args() {
    }

    public getLinkedNotebookSyncState_args(
      String authenticationToken,
      com.evernote.edam.type.LinkedNotebook linkedNotebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.linkedNotebook = linkedNotebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedNotebookSyncState_args(getLinkedNotebookSyncState_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetLinkedNotebook()) {
        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
      }
    }

    public getLinkedNotebookSyncState_args deepCopy() {
      return new getLinkedNotebookSyncState_args(this);
    }

    public getLinkedNotebookSyncState_args clone() {
      return new getLinkedNotebookSyncState_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.linkedNotebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
      return this.linkedNotebook;
    }

    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
      this.linkedNotebook = linkedNotebook;
    }

    public void unsetLinkedNotebook() {
      this.linkedNotebook = null;
    }

    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetLinkedNotebook() {
      return this.linkedNotebook != null;
    }

    public void setLinkedNotebookIsSet(boolean value) {
      if (!value) {
        this.linkedNotebook = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedNotebookSyncState_args)
        return this.equals((getLinkedNotebookSyncState_args)that);
      return false;
    }

    public boolean equals(getLinkedNotebookSyncState_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
      if (this_present_linkedNotebook || that_present_linkedNotebook) {
        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
          return false;
        if (!this.linkedNotebook.equals(that.linkedNotebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLinkedNotebookSyncState_args other = (getLinkedNotebookSyncState_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLinkedNotebook(), other.isSetLinkedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedNotebook()) {
        lastComparison = this.linkedNotebook.compareTo(other.linkedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LINKED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
              this.linkedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.linkedNotebook != null) {
        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
        this.linkedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLinkedNotebookSyncState_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedNotebook:");
      if (this.linkedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedNotebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLinkedNotebookSyncState_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLinkedNotebookSyncState_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private SyncState success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getLinkedNotebookSyncState_result() {
    }

    public getLinkedNotebookSyncState_result(
      SyncState success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedNotebookSyncState_result(getLinkedNotebookSyncState_result other) {
      if (other.isSetSuccess()) {
        this.success = new SyncState(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getLinkedNotebookSyncState_result deepCopy() {
      return new getLinkedNotebookSyncState_result(this);
    }

    public getLinkedNotebookSyncState_result clone() {
      return new getLinkedNotebookSyncState_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public SyncState getSuccess() {
      return this.success;
    }

    public void setSuccess(SyncState success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedNotebookSyncState_result)
        return this.equals((getLinkedNotebookSyncState_result)that);
      return false;
    }

    public boolean equals(getLinkedNotebookSyncState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLinkedNotebookSyncState_result other = (getLinkedNotebookSyncState_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SyncState();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLinkedNotebookSyncState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLinkedNotebookSyncChunk_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLinkedNotebookSyncChunk_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);
    private static final TField AFTER_USN_FIELD_DESC = new TField("afterUSN", TType.I32, (short)3);
    private static final TField MAX_ENTRIES_FIELD_DESC = new TField("maxEntries", TType.I32, (short)4);
    private static final TField FULL_SYNC_ONLY_FIELD_DESC = new TField("fullSyncOnly", TType.BOOL, (short)5);

    private String authenticationToken;
    private com.evernote.edam.type.LinkedNotebook linkedNotebook;
    private int afterUSN;
    private int maxEntries;
    private boolean fullSyncOnly;

    // isset id assignments
    private static final int __AFTERUSN_ISSET_ID = 0;
    private static final int __MAXENTRIES_ISSET_ID = 1;
    private static final int __FULLSYNCONLY_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public getLinkedNotebookSyncChunk_args() {
    }

    public getLinkedNotebookSyncChunk_args(
      String authenticationToken,
      com.evernote.edam.type.LinkedNotebook linkedNotebook,
      int afterUSN,
      int maxEntries,
      boolean fullSyncOnly)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.linkedNotebook = linkedNotebook;
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
      this.fullSyncOnly = fullSyncOnly;
      setFullSyncOnlyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedNotebookSyncChunk_args(getLinkedNotebookSyncChunk_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetLinkedNotebook()) {
        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
      }
      this.afterUSN = other.afterUSN;
      this.maxEntries = other.maxEntries;
      this.fullSyncOnly = other.fullSyncOnly;
    }

    public getLinkedNotebookSyncChunk_args deepCopy() {
      return new getLinkedNotebookSyncChunk_args(this);
    }

    public getLinkedNotebookSyncChunk_args clone() {
      return new getLinkedNotebookSyncChunk_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.linkedNotebook = null;
      setAfterUSNIsSet(false);
      this.afterUSN = 0;
      setMaxEntriesIsSet(false);
      this.maxEntries = 0;
      setFullSyncOnlyIsSet(false);
      this.fullSyncOnly = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
      return this.linkedNotebook;
    }

    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
      this.linkedNotebook = linkedNotebook;
    }

    public void unsetLinkedNotebook() {
      this.linkedNotebook = null;
    }

    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetLinkedNotebook() {
      return this.linkedNotebook != null;
    }

    public void setLinkedNotebookIsSet(boolean value) {
      if (!value) {
        this.linkedNotebook = null;
      }
    }

    public int getAfterUSN() {
      return this.afterUSN;
    }

    public void setAfterUSN(int afterUSN) {
      this.afterUSN = afterUSN;
      setAfterUSNIsSet(true);
    }

    public void unsetAfterUSN() {
      __isset_vector[__AFTERUSN_ISSET_ID] = false;
    }

    /** Returns true if field afterUSN is set (has been asigned a value) and false otherwise */
    public boolean isSetAfterUSN() {
      return __isset_vector[__AFTERUSN_ISSET_ID];
    }

    public void setAfterUSNIsSet(boolean value) {
      __isset_vector[__AFTERUSN_ISSET_ID] = value;
    }

    public int getMaxEntries() {
      return this.maxEntries;
    }

    public void setMaxEntries(int maxEntries) {
      this.maxEntries = maxEntries;
      setMaxEntriesIsSet(true);
    }

    public void unsetMaxEntries() {
      __isset_vector[__MAXENTRIES_ISSET_ID] = false;
    }

    /** Returns true if field maxEntries is set (has been asigned a value) and false otherwise */
    public boolean isSetMaxEntries() {
      return __isset_vector[__MAXENTRIES_ISSET_ID];
    }

    public void setMaxEntriesIsSet(boolean value) {
      __isset_vector[__MAXENTRIES_ISSET_ID] = value;
    }

    public boolean isFullSyncOnly() {
      return this.fullSyncOnly;
    }

    public void setFullSyncOnly(boolean fullSyncOnly) {
      this.fullSyncOnly = fullSyncOnly;
      setFullSyncOnlyIsSet(true);
    }

    public void unsetFullSyncOnly() {
      __isset_vector[__FULLSYNCONLY_ISSET_ID] = false;
    }

    /** Returns true if field fullSyncOnly is set (has been asigned a value) and false otherwise */
    public boolean isSetFullSyncOnly() {
      return __isset_vector[__FULLSYNCONLY_ISSET_ID];
    }

    public void setFullSyncOnlyIsSet(boolean value) {
      __isset_vector[__FULLSYNCONLY_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedNotebookSyncChunk_args)
        return this.equals((getLinkedNotebookSyncChunk_args)that);
      return false;
    }

    public boolean equals(getLinkedNotebookSyncChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
      if (this_present_linkedNotebook || that_present_linkedNotebook) {
        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
          return false;
        if (!this.linkedNotebook.equals(that.linkedNotebook))
          return false;
      }

      boolean this_present_afterUSN = true;
      boolean that_present_afterUSN = true;
      if (this_present_afterUSN || that_present_afterUSN) {
        if (!(this_present_afterUSN && that_present_afterUSN))
          return false;
        if (this.afterUSN != that.afterUSN)
          return false;
      }

      boolean this_present_maxEntries = true;
      boolean that_present_maxEntries = true;
      if (this_present_maxEntries || that_present_maxEntries) {
        if (!(this_present_maxEntries && that_present_maxEntries))
          return false;
        if (this.maxEntries != that.maxEntries)
          return false;
      }

      boolean this_present_fullSyncOnly = true;
      boolean that_present_fullSyncOnly = true;
      if (this_present_fullSyncOnly || that_present_fullSyncOnly) {
        if (!(this_present_fullSyncOnly && that_present_fullSyncOnly))
          return false;
        if (this.fullSyncOnly != that.fullSyncOnly)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLinkedNotebookSyncChunk_args other = (getLinkedNotebookSyncChunk_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLinkedNotebook(), other.isSetLinkedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedNotebook()) {
        lastComparison = this.linkedNotebook.compareTo(other.linkedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAfterUSN(), other.isSetAfterUSN());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAfterUSN()) {
        lastComparison = TBaseHelper.compareTo(this.afterUSN, other.afterUSN);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMaxEntries(), other.isSetMaxEntries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxEntries()) {
        lastComparison = TBaseHelper.compareTo(this.maxEntries, other.maxEntries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetFullSyncOnly(), other.isSetFullSyncOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFullSyncOnly()) {
        lastComparison = TBaseHelper.compareTo(this.fullSyncOnly, other.fullSyncOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LINKED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
              this.linkedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // AFTER_USN
            if (field.type == TType.I32) {
              this.afterUSN = iprot.readI32();
              setAfterUSNIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_ENTRIES
            if (field.type == TType.I32) {
              this.maxEntries = iprot.readI32();
              setMaxEntriesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // FULL_SYNC_ONLY
            if (field.type == TType.BOOL) {
              this.fullSyncOnly = iprot.readBool();
              setFullSyncOnlyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.linkedNotebook != null) {
        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
        this.linkedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AFTER_USN_FIELD_DESC);
      oprot.writeI32(this.afterUSN);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ENTRIES_FIELD_DESC);
      oprot.writeI32(this.maxEntries);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FULL_SYNC_ONLY_FIELD_DESC);
      oprot.writeBool(this.fullSyncOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLinkedNotebookSyncChunk_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedNotebook:");
      if (this.linkedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedNotebook);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("afterUSN:");
      sb.append(this.afterUSN);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxEntries:");
      sb.append(this.maxEntries);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fullSyncOnly:");
      sb.append(this.fullSyncOnly);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLinkedNotebookSyncChunk_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLinkedNotebookSyncChunk_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private SyncChunk success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getLinkedNotebookSyncChunk_result() {
    }

    public getLinkedNotebookSyncChunk_result(
      SyncChunk success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLinkedNotebookSyncChunk_result(getLinkedNotebookSyncChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = new SyncChunk(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getLinkedNotebookSyncChunk_result deepCopy() {
      return new getLinkedNotebookSyncChunk_result(this);
    }

    public getLinkedNotebookSyncChunk_result clone() {
      return new getLinkedNotebookSyncChunk_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public SyncChunk getSuccess() {
      return this.success;
    }

    public void setSuccess(SyncChunk success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLinkedNotebookSyncChunk_result)
        return this.equals((getLinkedNotebookSyncChunk_result)that);
      return false;
    }

    public boolean equals(getLinkedNotebookSyncChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLinkedNotebookSyncChunk_result other = (getLinkedNotebookSyncChunk_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SyncChunk();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLinkedNotebookSyncChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listNotebooks_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listNotebooks_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public listNotebooks_args() {
    }

    public listNotebooks_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNotebooks_args(listNotebooks_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listNotebooks_args deepCopy() {
      return new listNotebooks_args(this);
    }

    public listNotebooks_args clone() {
      return new listNotebooks_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNotebooks_args)
        return this.equals((listNotebooks_args)that);
      return false;
    }

    public boolean equals(listNotebooks_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listNotebooks_args other = (listNotebooks_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listNotebooks_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listNotebooks_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listNotebooks_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private Vector success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public listNotebooks_result() {
    }

    public listNotebooks_result(
      Vector success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNotebooks_result(listNotebooks_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          com.evernote.edam.type.Notebook other_element = (com.evernote.edam.type.Notebook)other_enum.nextElement();
          __this__success.addElement(new com.evernote.edam.type.Notebook(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listNotebooks_result deepCopy() {
      return new listNotebooks_result(this);
    }

    public listNotebooks_result clone() {
      return new listNotebooks_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(com.evernote.edam.type.Notebook elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNotebooks_result)
        return this.equals((listNotebooks_result)that);
      return false;
    }

    public boolean equals(listNotebooks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listNotebooks_result other = (listNotebooks_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list103 = iprot.readListBegin();
                this.success = new Vector(_list103.size);
                for (int _i104 = 0; _i104 < _list103.size; ++_i104)
                {
                  com.evernote.edam.type.Notebook _elem105;
                  _elem105 = new com.evernote.edam.type.Notebook();
                  _elem105.read(iprot);
                  this.success.addElement(_elem105);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter106_enum = this.success.elements(); _iter106_enum.hasMoreElements(); )           {
            com.evernote.edam.type.Notebook _iter106 = (com.evernote.edam.type.Notebook)_iter106_enum.nextElement();
            _iter106.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listNotebooks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getNotebook_args() {
    }

    public getNotebook_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotebook_args(getNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getNotebook_args deepCopy() {
      return new getNotebook_args(this);
    }

    public getNotebook_args clone() {
      return new getNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotebook_args)
        return this.equals((getNotebook_args)that);
      return false;
    }

    public boolean equals(getNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNotebook_args other = (getNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Notebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getNotebook_result() {
    }

    public getNotebook_result(
      com.evernote.edam.type.Notebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotebook_result(getNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Notebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNotebook_result deepCopy() {
      return new getNotebook_result(this);
    }

    public getNotebook_result clone() {
      return new getNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Notebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Notebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotebook_result)
        return this.equals((getNotebook_result)that);
      return false;
    }

    public boolean equals(getNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNotebook_result other = (getNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Notebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDefaultNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDefaultNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public getDefaultNotebook_args() {
    }

    public getDefaultNotebook_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDefaultNotebook_args(getDefaultNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public getDefaultNotebook_args deepCopy() {
      return new getDefaultNotebook_args(this);
    }

    public getDefaultNotebook_args clone() {
      return new getDefaultNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDefaultNotebook_args)
        return this.equals((getDefaultNotebook_args)that);
      return false;
    }

    public boolean equals(getDefaultNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDefaultNotebook_args other = (getDefaultNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDefaultNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDefaultNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDefaultNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.Notebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public getDefaultNotebook_result() {
    }

    public getDefaultNotebook_result(
      com.evernote.edam.type.Notebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDefaultNotebook_result(getDefaultNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Notebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getDefaultNotebook_result deepCopy() {
      return new getDefaultNotebook_result(this);
    }

    public getDefaultNotebook_result clone() {
      return new getDefaultNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.Notebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Notebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDefaultNotebook_result)
        return this.equals((getDefaultNotebook_result)that);
      return false;
    }

    public boolean equals(getDefaultNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDefaultNotebook_result other = (getDefaultNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Notebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDefaultNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTEBOOK_FIELD_DESC = new TField("notebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Notebook notebook;

    // isset id assignments

    public createNotebook_args() {
    }

    public createNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.Notebook notebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.notebook = notebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNotebook_args(createNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNotebook()) {
        this.notebook = new com.evernote.edam.type.Notebook(other.notebook);
      }
    }

    public createNotebook_args deepCopy() {
      return new createNotebook_args(this);
    }

    public createNotebook_args clone() {
      return new createNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.notebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Notebook getNotebook() {
      return this.notebook;
    }

    public void setNotebook(com.evernote.edam.type.Notebook notebook) {
      this.notebook = notebook;
    }

    public void unsetNotebook() {
      this.notebook = null;
    }

    /** Returns true if field notebook is set (has been asigned a value) and false otherwise */
    public boolean isSetNotebook() {
      return this.notebook != null;
    }

    public void setNotebookIsSet(boolean value) {
      if (!value) {
        this.notebook = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNotebook_args)
        return this.equals((createNotebook_args)that);
      return false;
    }

    public boolean equals(createNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_notebook = true && this.isSetNotebook();
      boolean that_present_notebook = true && that.isSetNotebook();
      if (this_present_notebook || that_present_notebook) {
        if (!(this_present_notebook && that_present_notebook))
          return false;
        if (!this.notebook.equals(that.notebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNotebook_args other = (createNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotebook(), other.isSetNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotebook()) {
        lastComparison = this.notebook.compareTo(other.notebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.notebook = new com.evernote.edam.type.Notebook();
              this.notebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.notebook != null) {
        oprot.writeFieldBegin(NOTEBOOK_FIELD_DESC);
        this.notebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notebook:");
      if (this.notebook == null) {
        sb.append("null");
      } else {
        sb.append(this.notebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.Notebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public createNotebook_result() {
    }

    public createNotebook_result(
      com.evernote.edam.type.Notebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNotebook_result(createNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Notebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public createNotebook_result deepCopy() {
      return new createNotebook_result(this);
    }

    public createNotebook_result clone() {
      return new createNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.Notebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Notebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNotebook_result)
        return this.equals((createNotebook_result)that);
      return false;
    }

    public boolean equals(createNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNotebook_result other = (createNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Notebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTEBOOK_FIELD_DESC = new TField("notebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Notebook notebook;

    // isset id assignments

    public updateNotebook_args() {
    }

    public updateNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.Notebook notebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.notebook = notebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNotebook_args(updateNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNotebook()) {
        this.notebook = new com.evernote.edam.type.Notebook(other.notebook);
      }
    }

    public updateNotebook_args deepCopy() {
      return new updateNotebook_args(this);
    }

    public updateNotebook_args clone() {
      return new updateNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.notebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Notebook getNotebook() {
      return this.notebook;
    }

    public void setNotebook(com.evernote.edam.type.Notebook notebook) {
      this.notebook = notebook;
    }

    public void unsetNotebook() {
      this.notebook = null;
    }

    /** Returns true if field notebook is set (has been asigned a value) and false otherwise */
    public boolean isSetNotebook() {
      return this.notebook != null;
    }

    public void setNotebookIsSet(boolean value) {
      if (!value) {
        this.notebook = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNotebook_args)
        return this.equals((updateNotebook_args)that);
      return false;
    }

    public boolean equals(updateNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_notebook = true && this.isSetNotebook();
      boolean that_present_notebook = true && that.isSetNotebook();
      if (this_present_notebook || that_present_notebook) {
        if (!(this_present_notebook && that_present_notebook))
          return false;
        if (!this.notebook.equals(that.notebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateNotebook_args other = (updateNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotebook(), other.isSetNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotebook()) {
        lastComparison = this.notebook.compareTo(other.notebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.notebook = new com.evernote.edam.type.Notebook();
              this.notebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.notebook != null) {
        oprot.writeFieldBegin(NOTEBOOK_FIELD_DESC);
        this.notebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notebook:");
      if (this.notebook == null) {
        sb.append("null");
      } else {
        sb.append(this.notebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateNotebook_result() {
    }

    public updateNotebook_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNotebook_result(updateNotebook_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateNotebook_result deepCopy() {
      return new updateNotebook_result(this);
    }

    public updateNotebook_result clone() {
      return new updateNotebook_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNotebook_result)
        return this.equals((updateNotebook_result)that);
      return false;
    }

    public boolean equals(updateNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateNotebook_result other = (updateNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateNotebook_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public expungeNotebook_args() {
    }

    public expungeNotebook_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNotebook_args(expungeNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeNotebook_args deepCopy() {
      return new expungeNotebook_args(this);
    }

    public expungeNotebook_args clone() {
      return new expungeNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNotebook_args)
        return this.equals((expungeNotebook_args)that);
      return false;
    }

    public boolean equals(expungeNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeNotebook_args other = (expungeNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public expungeNotebook_result() {
    }

    public expungeNotebook_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNotebook_result(expungeNotebook_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeNotebook_result deepCopy() {
      return new expungeNotebook_result(this);
    }

    public expungeNotebook_result clone() {
      return new expungeNotebook_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNotebook_result)
        return this.equals((expungeNotebook_result)that);
      return false;
    }

    public boolean equals(expungeNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeNotebook_result other = (expungeNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeNotebook_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listTags_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listTags_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public listTags_args() {
    }

    public listTags_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTags_args(listTags_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listTags_args deepCopy() {
      return new listTags_args(this);
    }

    public listTags_args clone() {
      return new listTags_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTags_args)
        return this.equals((listTags_args)that);
      return false;
    }

    public boolean equals(listTags_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listTags_args other = (listTags_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listTags_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listTags_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listTags_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private Vector success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public listTags_result() {
    }

    public listTags_result(
      Vector success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTags_result(listTags_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          com.evernote.edam.type.Tag other_element = (com.evernote.edam.type.Tag)other_enum.nextElement();
          __this__success.addElement(new com.evernote.edam.type.Tag(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listTags_result deepCopy() {
      return new listTags_result(this);
    }

    public listTags_result clone() {
      return new listTags_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(com.evernote.edam.type.Tag elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTags_result)
        return this.equals((listTags_result)that);
      return false;
    }

    public boolean equals(listTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listTags_result other = (listTags_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list107 = iprot.readListBegin();
                this.success = new Vector(_list107.size);
                for (int _i108 = 0; _i108 < _list107.size; ++_i108)
                {
                  com.evernote.edam.type.Tag _elem109;
                  _elem109 = new com.evernote.edam.type.Tag();
                  _elem109.read(iprot);
                  this.success.addElement(_elem109);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter110_enum = this.success.elements(); _iter110_enum.hasMoreElements(); )           {
            com.evernote.edam.type.Tag _iter110 = (com.evernote.edam.type.Tag)_iter110_enum.nextElement();
            _iter110.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listTagsByNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listTagsByNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTEBOOK_GUID_FIELD_DESC = new TField("notebookGuid", TType.STRING, (short)2);

    private String authenticationToken;
    private String notebookGuid;

    // isset id assignments

    public listTagsByNotebook_args() {
    }

    public listTagsByNotebook_args(
      String authenticationToken,
      String notebookGuid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.notebookGuid = notebookGuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTagsByNotebook_args(listTagsByNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNotebookGuid()) {
        this.notebookGuid = other.notebookGuid;
      }
    }

    public listTagsByNotebook_args deepCopy() {
      return new listTagsByNotebook_args(this);
    }

    public listTagsByNotebook_args clone() {
      return new listTagsByNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.notebookGuid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNotebookGuid() {
      return this.notebookGuid;
    }

    public void setNotebookGuid(String notebookGuid) {
      this.notebookGuid = notebookGuid;
    }

    public void unsetNotebookGuid() {
      this.notebookGuid = null;
    }

    /** Returns true if field notebookGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNotebookGuid() {
      return this.notebookGuid != null;
    }

    public void setNotebookGuidIsSet(boolean value) {
      if (!value) {
        this.notebookGuid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTagsByNotebook_args)
        return this.equals((listTagsByNotebook_args)that);
      return false;
    }

    public boolean equals(listTagsByNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_notebookGuid = true && this.isSetNotebookGuid();
      boolean that_present_notebookGuid = true && that.isSetNotebookGuid();
      if (this_present_notebookGuid || that_present_notebookGuid) {
        if (!(this_present_notebookGuid && that_present_notebookGuid))
          return false;
        if (!this.notebookGuid.equals(that.notebookGuid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listTagsByNotebook_args other = (listTagsByNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotebookGuid(), other.isSetNotebookGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotebookGuid()) {
        lastComparison = TBaseHelper.compareTo(this.notebookGuid, other.notebookGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTEBOOK_GUID
            if (field.type == TType.STRING) {
              this.notebookGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.notebookGuid != null) {
        oprot.writeFieldBegin(NOTEBOOK_GUID_FIELD_DESC);
        oprot.writeString(this.notebookGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listTagsByNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notebookGuid:");
      if (this.notebookGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.notebookGuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listTagsByNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listTagsByNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private Vector success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public listTagsByNotebook_result() {
    }

    public listTagsByNotebook_result(
      Vector success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listTagsByNotebook_result(listTagsByNotebook_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          com.evernote.edam.type.Tag other_element = (com.evernote.edam.type.Tag)other_enum.nextElement();
          __this__success.addElement(new com.evernote.edam.type.Tag(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public listTagsByNotebook_result deepCopy() {
      return new listTagsByNotebook_result(this);
    }

    public listTagsByNotebook_result clone() {
      return new listTagsByNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(com.evernote.edam.type.Tag elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listTagsByNotebook_result)
        return this.equals((listTagsByNotebook_result)that);
      return false;
    }

    public boolean equals(listTagsByNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listTagsByNotebook_result other = (listTagsByNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list111 = iprot.readListBegin();
                this.success = new Vector(_list111.size);
                for (int _i112 = 0; _i112 < _list111.size; ++_i112)
                {
                  com.evernote.edam.type.Tag _elem113;
                  _elem113 = new com.evernote.edam.type.Tag();
                  _elem113.read(iprot);
                  this.success.addElement(_elem113);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter114_enum = this.success.elements(); _iter114_enum.hasMoreElements(); )           {
            com.evernote.edam.type.Tag _iter114 = (com.evernote.edam.type.Tag)_iter114_enum.nextElement();
            _iter114.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listTagsByNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTag_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getTag_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getTag_args() {
    }

    public getTag_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTag_args(getTag_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getTag_args deepCopy() {
      return new getTag_args(this);
    }

    public getTag_args clone() {
      return new getTag_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTag_args)
        return this.equals((getTag_args)that);
      return false;
    }

    public boolean equals(getTag_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getTag_args other = (getTag_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getTag_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTag_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Tag success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getTag_result() {
    }

    public getTag_result(
      com.evernote.edam.type.Tag success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTag_result(getTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Tag(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getTag_result deepCopy() {
      return new getTag_result(this);
    }

    public getTag_result clone() {
      return new getTag_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Tag getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Tag success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTag_result)
        return this.equals((getTag_result)that);
      return false;
    }

    public boolean equals(getTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getTag_result other = (getTag_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Tag();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createTag_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createTag_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField TAG_FIELD_DESC = new TField("tag", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Tag tag;

    // isset id assignments

    public createTag_args() {
    }

    public createTag_args(
      String authenticationToken,
      com.evernote.edam.type.Tag tag)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.tag = tag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTag_args(createTag_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetTag()) {
        this.tag = new com.evernote.edam.type.Tag(other.tag);
      }
    }

    public createTag_args deepCopy() {
      return new createTag_args(this);
    }

    public createTag_args clone() {
      return new createTag_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.tag = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Tag getTag() {
      return this.tag;
    }

    public void setTag(com.evernote.edam.type.Tag tag) {
      this.tag = tag;
    }

    public void unsetTag() {
      this.tag = null;
    }

    /** Returns true if field tag is set (has been asigned a value) and false otherwise */
    public boolean isSetTag() {
      return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
      if (!value) {
        this.tag = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTag_args)
        return this.equals((createTag_args)that);
      return false;
    }

    public boolean equals(createTag_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_tag = true && this.isSetTag();
      boolean that_present_tag = true && that.isSetTag();
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (!this.tag.equals(that.tag))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createTag_args other = (createTag_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTag(), other.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {
        lastComparison = this.tag.compareTo(other.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG
            if (field.type == TType.STRUCT) {
              this.tag = new com.evernote.edam.type.Tag();
              this.tag.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        this.tag.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createTag_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createTag_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Tag success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public createTag_result() {
    }

    public createTag_result(
      com.evernote.edam.type.Tag success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTag_result(createTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Tag(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public createTag_result deepCopy() {
      return new createTag_result(this);
    }

    public createTag_result clone() {
      return new createTag_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Tag getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Tag success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTag_result)
        return this.equals((createTag_result)that);
      return false;
    }

    public boolean equals(createTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createTag_result other = (createTag_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Tag();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateTag_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateTag_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField TAG_FIELD_DESC = new TField("tag", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Tag tag;

    // isset id assignments

    public updateTag_args() {
    }

    public updateTag_args(
      String authenticationToken,
      com.evernote.edam.type.Tag tag)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.tag = tag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTag_args(updateTag_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetTag()) {
        this.tag = new com.evernote.edam.type.Tag(other.tag);
      }
    }

    public updateTag_args deepCopy() {
      return new updateTag_args(this);
    }

    public updateTag_args clone() {
      return new updateTag_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.tag = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Tag getTag() {
      return this.tag;
    }

    public void setTag(com.evernote.edam.type.Tag tag) {
      this.tag = tag;
    }

    public void unsetTag() {
      this.tag = null;
    }

    /** Returns true if field tag is set (has been asigned a value) and false otherwise */
    public boolean isSetTag() {
      return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
      if (!value) {
        this.tag = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTag_args)
        return this.equals((updateTag_args)that);
      return false;
    }

    public boolean equals(updateTag_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_tag = true && this.isSetTag();
      boolean that_present_tag = true && that.isSetTag();
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (!this.tag.equals(that.tag))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateTag_args other = (updateTag_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTag(), other.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {
        lastComparison = this.tag.compareTo(other.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TAG
            if (field.type == TType.STRUCT) {
              this.tag = new com.evernote.edam.type.Tag();
              this.tag.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        this.tag.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateTag_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateTag_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateTag_result() {
    }

    public updateTag_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateTag_result(updateTag_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateTag_result deepCopy() {
      return new updateTag_result(this);
    }

    public updateTag_result clone() {
      return new updateTag_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateTag_result)
        return this.equals((updateTag_result)that);
      return false;
    }

    public boolean equals(updateTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateTag_result other = (updateTag_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateTag_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class untagAll_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("untagAll_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public untagAll_args() {
    }

    public untagAll_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public untagAll_args(untagAll_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public untagAll_args deepCopy() {
      return new untagAll_args(this);
    }

    public untagAll_args clone() {
      return new untagAll_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof untagAll_args)
        return this.equals((untagAll_args)that);
      return false;
    }

    public boolean equals(untagAll_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      untagAll_args other = (untagAll_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("untagAll_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class untagAll_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("untagAll_result");

    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public untagAll_result() {
    }

    public untagAll_result(
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public untagAll_result(untagAll_result other) {
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public untagAll_result deepCopy() {
      return new untagAll_result(this);
    }

    public untagAll_result clone() {
      return new untagAll_result(this);
    }

    public void clear() {
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof untagAll_result)
        return this.equals((untagAll_result)that);
      return false;
    }

    public boolean equals(untagAll_result that) {
      if (that == null)
        return false;

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      untagAll_result other = (untagAll_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("untagAll_result(");
      boolean first = true;

      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeTag_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeTag_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public expungeTag_args() {
    }

    public expungeTag_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeTag_args(expungeTag_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeTag_args deepCopy() {
      return new expungeTag_args(this);
    }

    public expungeTag_args clone() {
      return new expungeTag_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeTag_args)
        return this.equals((expungeTag_args)that);
      return false;
    }

    public boolean equals(expungeTag_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeTag_args other = (expungeTag_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeTag_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeTag_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public expungeTag_result() {
    }

    public expungeTag_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeTag_result(expungeTag_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeTag_result deepCopy() {
      return new expungeTag_result(this);
    }

    public expungeTag_result clone() {
      return new expungeTag_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeTag_result)
        return this.equals((expungeTag_result)that);
      return false;
    }

    public boolean equals(expungeTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeTag_result other = (expungeTag_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeTag_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listSearches_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listSearches_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public listSearches_args() {
    }

    public listSearches_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSearches_args(listSearches_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listSearches_args deepCopy() {
      return new listSearches_args(this);
    }

    public listSearches_args clone() {
      return new listSearches_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSearches_args)
        return this.equals((listSearches_args)that);
      return false;
    }

    public boolean equals(listSearches_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listSearches_args other = (listSearches_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listSearches_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listSearches_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listSearches_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private Vector success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public listSearches_result() {
    }

    public listSearches_result(
      Vector success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSearches_result(listSearches_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          com.evernote.edam.type.SavedSearch other_element = (com.evernote.edam.type.SavedSearch)other_enum.nextElement();
          __this__success.addElement(new com.evernote.edam.type.SavedSearch(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listSearches_result deepCopy() {
      return new listSearches_result(this);
    }

    public listSearches_result clone() {
      return new listSearches_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(com.evernote.edam.type.SavedSearch elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSearches_result)
        return this.equals((listSearches_result)that);
      return false;
    }

    public boolean equals(listSearches_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listSearches_result other = (listSearches_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list115 = iprot.readListBegin();
                this.success = new Vector(_list115.size);
                for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                {
                  com.evernote.edam.type.SavedSearch _elem117;
                  _elem117 = new com.evernote.edam.type.SavedSearch();
                  _elem117.read(iprot);
                  this.success.addElement(_elem117);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter118_enum = this.success.elements(); _iter118_enum.hasMoreElements(); )           {
            com.evernote.edam.type.SavedSearch _iter118 = (com.evernote.edam.type.SavedSearch)_iter118_enum.nextElement();
            _iter118.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listSearches_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSearch_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSearch_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getSearch_args() {
    }

    public getSearch_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearch_args(getSearch_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getSearch_args deepCopy() {
      return new getSearch_args(this);
    }

    public getSearch_args clone() {
      return new getSearch_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearch_args)
        return this.equals((getSearch_args)that);
      return false;
    }

    public boolean equals(getSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSearch_args other = (getSearch_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSearch_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSearch_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSearch_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.SavedSearch success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getSearch_result() {
    }

    public getSearch_result(
      com.evernote.edam.type.SavedSearch success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearch_result(getSearch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.SavedSearch(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getSearch_result deepCopy() {
      return new getSearch_result(this);
    }

    public getSearch_result clone() {
      return new getSearch_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.SavedSearch getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.SavedSearch success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearch_result)
        return this.equals((getSearch_result)that);
      return false;
    }

    public boolean equals(getSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSearch_result other = (getSearch_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.SavedSearch();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSearch_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createSearch_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField SEARCH_FIELD_DESC = new TField("search", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.SavedSearch search;

    // isset id assignments

    public createSearch_args() {
    }

    public createSearch_args(
      String authenticationToken,
      com.evernote.edam.type.SavedSearch search)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.search = search;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSearch_args(createSearch_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetSearch()) {
        this.search = new com.evernote.edam.type.SavedSearch(other.search);
      }
    }

    public createSearch_args deepCopy() {
      return new createSearch_args(this);
    }

    public createSearch_args clone() {
      return new createSearch_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.search = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.SavedSearch getSearch() {
      return this.search;
    }

    public void setSearch(com.evernote.edam.type.SavedSearch search) {
      this.search = search;
    }

    public void unsetSearch() {
      this.search = null;
    }

    /** Returns true if field search is set (has been asigned a value) and false otherwise */
    public boolean isSetSearch() {
      return this.search != null;
    }

    public void setSearchIsSet(boolean value) {
      if (!value) {
        this.search = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSearch_args)
        return this.equals((createSearch_args)that);
      return false;
    }

    public boolean equals(createSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_search = true && this.isSetSearch();
      boolean that_present_search = true && that.isSetSearch();
      if (this_present_search || that_present_search) {
        if (!(this_present_search && that_present_search))
          return false;
        if (!this.search.equals(that.search))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createSearch_args other = (createSearch_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSearch(), other.isSetSearch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearch()) {
        lastComparison = this.search.compareTo(other.search);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SEARCH
            if (field.type == TType.STRUCT) {
              this.search = new com.evernote.edam.type.SavedSearch();
              this.search.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.search != null) {
        oprot.writeFieldBegin(SEARCH_FIELD_DESC);
        this.search.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createSearch_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("search:");
      if (this.search == null) {
        sb.append("null");
      } else {
        sb.append(this.search);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSearch_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createSearch_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.SavedSearch success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public createSearch_result() {
    }

    public createSearch_result(
      com.evernote.edam.type.SavedSearch success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSearch_result(createSearch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.SavedSearch(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public createSearch_result deepCopy() {
      return new createSearch_result(this);
    }

    public createSearch_result clone() {
      return new createSearch_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.SavedSearch getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.SavedSearch success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSearch_result)
        return this.equals((createSearch_result)that);
      return false;
    }

    public boolean equals(createSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createSearch_result other = (createSearch_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.SavedSearch();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSearch_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSearch_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField SEARCH_FIELD_DESC = new TField("search", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.SavedSearch search;

    // isset id assignments

    public updateSearch_args() {
    }

    public updateSearch_args(
      String authenticationToken,
      com.evernote.edam.type.SavedSearch search)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.search = search;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSearch_args(updateSearch_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetSearch()) {
        this.search = new com.evernote.edam.type.SavedSearch(other.search);
      }
    }

    public updateSearch_args deepCopy() {
      return new updateSearch_args(this);
    }

    public updateSearch_args clone() {
      return new updateSearch_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.search = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.SavedSearch getSearch() {
      return this.search;
    }

    public void setSearch(com.evernote.edam.type.SavedSearch search) {
      this.search = search;
    }

    public void unsetSearch() {
      this.search = null;
    }

    /** Returns true if field search is set (has been asigned a value) and false otherwise */
    public boolean isSetSearch() {
      return this.search != null;
    }

    public void setSearchIsSet(boolean value) {
      if (!value) {
        this.search = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSearch_args)
        return this.equals((updateSearch_args)that);
      return false;
    }

    public boolean equals(updateSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_search = true && this.isSetSearch();
      boolean that_present_search = true && that.isSetSearch();
      if (this_present_search || that_present_search) {
        if (!(this_present_search && that_present_search))
          return false;
        if (!this.search.equals(that.search))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSearch_args other = (updateSearch_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSearch(), other.isSetSearch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearch()) {
        lastComparison = this.search.compareTo(other.search);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SEARCH
            if (field.type == TType.STRUCT) {
              this.search = new com.evernote.edam.type.SavedSearch();
              this.search.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.search != null) {
        oprot.writeFieldBegin(SEARCH_FIELD_DESC);
        this.search.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSearch_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("search:");
      if (this.search == null) {
        sb.append("null");
      } else {
        sb.append(this.search);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSearch_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSearch_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateSearch_result() {
    }

    public updateSearch_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSearch_result(updateSearch_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateSearch_result deepCopy() {
      return new updateSearch_result(this);
    }

    public updateSearch_result clone() {
      return new updateSearch_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSearch_result)
        return this.equals((updateSearch_result)that);
      return false;
    }

    public boolean equals(updateSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSearch_result other = (updateSearch_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSearch_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeSearch_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeSearch_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public expungeSearch_args() {
    }

    public expungeSearch_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeSearch_args(expungeSearch_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeSearch_args deepCopy() {
      return new expungeSearch_args(this);
    }

    public expungeSearch_args clone() {
      return new expungeSearch_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeSearch_args)
        return this.equals((expungeSearch_args)that);
      return false;
    }

    public boolean equals(expungeSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeSearch_args other = (expungeSearch_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeSearch_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeSearch_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeSearch_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public expungeSearch_result() {
    }

    public expungeSearch_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeSearch_result(expungeSearch_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeSearch_result deepCopy() {
      return new expungeSearch_result(this);
    }

    public expungeSearch_result clone() {
      return new expungeSearch_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeSearch_result)
        return this.equals((expungeSearch_result)that);
      return false;
    }

    public boolean equals(expungeSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeSearch_result other = (expungeSearch_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeSearch_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNotes_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findNotes_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRUCT, (short)2);
    private static final TField OFFSET_FIELD_DESC = new TField("offset", TType.I32, (short)3);
    private static final TField MAX_NOTES_FIELD_DESC = new TField("maxNotes", TType.I32, (short)4);

    private String authenticationToken;
    private NoteFilter filter;
    private int offset;
    private int maxNotes;

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __MAXNOTES_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public findNotes_args() {
    }

    public findNotes_args(
      String authenticationToken,
      NoteFilter filter,
      int offset,
      int maxNotes)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.filter = filter;
      this.offset = offset;
      setOffsetIsSet(true);
      this.maxNotes = maxNotes;
      setMaxNotesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotes_args(findNotes_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetFilter()) {
        this.filter = new NoteFilter(other.filter);
      }
      this.offset = other.offset;
      this.maxNotes = other.maxNotes;
    }

    public findNotes_args deepCopy() {
      return new findNotes_args(this);
    }

    public findNotes_args clone() {
      return new findNotes_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.filter = null;
      setOffsetIsSet(false);
      this.offset = 0;
      setMaxNotesIsSet(false);
      this.maxNotes = 0;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteFilter getFilter() {
      return this.filter;
    }

    public void setFilter(NoteFilter filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been asigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public int getOffset() {
      return this.offset;
    }

    public void setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
    }

    public void unsetOffset() {
      __isset_vector[__OFFSET_ISSET_ID] = false;
    }

    /** Returns true if field offset is set (has been asigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_vector[__OFFSET_ISSET_ID];
    }

    public void setOffsetIsSet(boolean value) {
      __isset_vector[__OFFSET_ISSET_ID] = value;
    }

    public int getMaxNotes() {
      return this.maxNotes;
    }

    public void setMaxNotes(int maxNotes) {
      this.maxNotes = maxNotes;
      setMaxNotesIsSet(true);
    }

    public void unsetMaxNotes() {
      __isset_vector[__MAXNOTES_ISSET_ID] = false;
    }

    /** Returns true if field maxNotes is set (has been asigned a value) and false otherwise */
    public boolean isSetMaxNotes() {
      return __isset_vector[__MAXNOTES_ISSET_ID];
    }

    public void setMaxNotesIsSet(boolean value) {
      __isset_vector[__MAXNOTES_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotes_args)
        return this.equals((findNotes_args)that);
      return false;
    }

    public boolean equals(findNotes_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_maxNotes = true;
      boolean that_present_maxNotes = true;
      if (this_present_maxNotes || that_present_maxNotes) {
        if (!(this_present_maxNotes && that_present_maxNotes))
          return false;
        if (this.maxNotes != that.maxNotes)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findNotes_args other = (findNotes_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetFilter(), other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = this.filter.compareTo(other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOffset(), other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMaxNotes(), other.isSetMaxNotes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxNotes()) {
        lastComparison = TBaseHelper.compareTo(this.maxNotes, other.maxNotes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == TType.STRUCT) {
              this.filter = new NoteFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // OFFSET
            if (field.type == TType.I32) {
              this.offset = iprot.readI32();
              setOffsetIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_NOTES
            if (field.type == TType.I32) {
              this.maxNotes = iprot.readI32();
              setMaxNotesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(this.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NOTES_FIELD_DESC);
      oprot.writeI32(this.maxNotes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findNotes_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxNotes:");
      sb.append(this.maxNotes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNotes_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findNotes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private NoteList success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public findNotes_result() {
    }

    public findNotes_result(
      NoteList success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotes_result(findNotes_result other) {
      if (other.isSetSuccess()) {
        this.success = new NoteList(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public findNotes_result deepCopy() {
      return new findNotes_result(this);
    }

    public findNotes_result clone() {
      return new findNotes_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public NoteList getSuccess() {
      return this.success;
    }

    public void setSuccess(NoteList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotes_result)
        return this.equals((findNotes_result)that);
      return false;
    }

    public boolean equals(findNotes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findNotes_result other = (findNotes_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new NoteList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findNotes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNoteOffset_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findNoteOffset_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRUCT, (short)2);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)3);

    private String authenticationToken;
    private NoteFilter filter;
    private String guid;

    // isset id assignments

    public findNoteOffset_args() {
    }

    public findNoteOffset_args(
      String authenticationToken,
      NoteFilter filter,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.filter = filter;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoteOffset_args(findNoteOffset_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetFilter()) {
        this.filter = new NoteFilter(other.filter);
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public findNoteOffset_args deepCopy() {
      return new findNoteOffset_args(this);
    }

    public findNoteOffset_args clone() {
      return new findNoteOffset_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.filter = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteFilter getFilter() {
      return this.filter;
    }

    public void setFilter(NoteFilter filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been asigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoteOffset_args)
        return this.equals((findNoteOffset_args)that);
      return false;
    }

    public boolean equals(findNoteOffset_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findNoteOffset_args other = (findNoteOffset_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetFilter(), other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = this.filter.compareTo(other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == TType.STRUCT) {
              this.filter = new NoteFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findNoteOffset_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNoteOffset_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findNoteOffset_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public findNoteOffset_result() {
    }

    public findNoteOffset_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoteOffset_result(findNoteOffset_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public findNoteOffset_result deepCopy() {
      return new findNoteOffset_result(this);
    }

    public findNoteOffset_result clone() {
      return new findNoteOffset_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoteOffset_result)
        return this.equals((findNoteOffset_result)that);
      return false;
    }

    public boolean equals(findNoteOffset_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findNoteOffset_result other = (findNoteOffset_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findNoteOffset_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNotesMetadata_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findNotesMetadata_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRUCT, (short)2);
    private static final TField OFFSET_FIELD_DESC = new TField("offset", TType.I32, (short)3);
    private static final TField MAX_NOTES_FIELD_DESC = new TField("maxNotes", TType.I32, (short)4);
    private static final TField RESULT_SPEC_FIELD_DESC = new TField("resultSpec", TType.STRUCT, (short)5);

    private String authenticationToken;
    private NoteFilter filter;
    private int offset;
    private int maxNotes;
    private NotesMetadataResultSpec resultSpec;

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __MAXNOTES_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public findNotesMetadata_args() {
    }

    public findNotesMetadata_args(
      String authenticationToken,
      NoteFilter filter,
      int offset,
      int maxNotes,
      NotesMetadataResultSpec resultSpec)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.filter = filter;
      this.offset = offset;
      setOffsetIsSet(true);
      this.maxNotes = maxNotes;
      setMaxNotesIsSet(true);
      this.resultSpec = resultSpec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotesMetadata_args(findNotesMetadata_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetFilter()) {
        this.filter = new NoteFilter(other.filter);
      }
      this.offset = other.offset;
      this.maxNotes = other.maxNotes;
      if (other.isSetResultSpec()) {
        this.resultSpec = new NotesMetadataResultSpec(other.resultSpec);
      }
    }

    public findNotesMetadata_args deepCopy() {
      return new findNotesMetadata_args(this);
    }

    public findNotesMetadata_args clone() {
      return new findNotesMetadata_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.filter = null;
      setOffsetIsSet(false);
      this.offset = 0;
      setMaxNotesIsSet(false);
      this.maxNotes = 0;
      this.resultSpec = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteFilter getFilter() {
      return this.filter;
    }

    public void setFilter(NoteFilter filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been asigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public int getOffset() {
      return this.offset;
    }

    public void setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
    }

    public void unsetOffset() {
      __isset_vector[__OFFSET_ISSET_ID] = false;
    }

    /** Returns true if field offset is set (has been asigned a value) and false otherwise */
    public boolean isSetOffset() {
      return __isset_vector[__OFFSET_ISSET_ID];
    }

    public void setOffsetIsSet(boolean value) {
      __isset_vector[__OFFSET_ISSET_ID] = value;
    }

    public int getMaxNotes() {
      return this.maxNotes;
    }

    public void setMaxNotes(int maxNotes) {
      this.maxNotes = maxNotes;
      setMaxNotesIsSet(true);
    }

    public void unsetMaxNotes() {
      __isset_vector[__MAXNOTES_ISSET_ID] = false;
    }

    /** Returns true if field maxNotes is set (has been asigned a value) and false otherwise */
    public boolean isSetMaxNotes() {
      return __isset_vector[__MAXNOTES_ISSET_ID];
    }

    public void setMaxNotesIsSet(boolean value) {
      __isset_vector[__MAXNOTES_ISSET_ID] = value;
    }

    public NotesMetadataResultSpec getResultSpec() {
      return this.resultSpec;
    }

    public void setResultSpec(NotesMetadataResultSpec resultSpec) {
      this.resultSpec = resultSpec;
    }

    public void unsetResultSpec() {
      this.resultSpec = null;
    }

    /** Returns true if field resultSpec is set (has been asigned a value) and false otherwise */
    public boolean isSetResultSpec() {
      return this.resultSpec != null;
    }

    public void setResultSpecIsSet(boolean value) {
      if (!value) {
        this.resultSpec = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotesMetadata_args)
        return this.equals((findNotesMetadata_args)that);
      return false;
    }

    public boolean equals(findNotesMetadata_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_maxNotes = true;
      boolean that_present_maxNotes = true;
      if (this_present_maxNotes || that_present_maxNotes) {
        if (!(this_present_maxNotes && that_present_maxNotes))
          return false;
        if (this.maxNotes != that.maxNotes)
          return false;
      }

      boolean this_present_resultSpec = true && this.isSetResultSpec();
      boolean that_present_resultSpec = true && that.isSetResultSpec();
      if (this_present_resultSpec || that_present_resultSpec) {
        if (!(this_present_resultSpec && that_present_resultSpec))
          return false;
        if (!this.resultSpec.equals(that.resultSpec))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findNotesMetadata_args other = (findNotesMetadata_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetFilter(), other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = this.filter.compareTo(other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOffset(), other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMaxNotes(), other.isSetMaxNotes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxNotes()) {
        lastComparison = TBaseHelper.compareTo(this.maxNotes, other.maxNotes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetResultSpec(), other.isSetResultSpec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResultSpec()) {
        lastComparison = this.resultSpec.compareTo(other.resultSpec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == TType.STRUCT) {
              this.filter = new NoteFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // OFFSET
            if (field.type == TType.I32) {
              this.offset = iprot.readI32();
              setOffsetIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_NOTES
            if (field.type == TType.I32) {
              this.maxNotes = iprot.readI32();
              setMaxNotesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // RESULT_SPEC
            if (field.type == TType.STRUCT) {
              this.resultSpec = new NotesMetadataResultSpec();
              this.resultSpec.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(this.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_NOTES_FIELD_DESC);
      oprot.writeI32(this.maxNotes);
      oprot.writeFieldEnd();
      if (this.resultSpec != null) {
        oprot.writeFieldBegin(RESULT_SPEC_FIELD_DESC);
        this.resultSpec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findNotesMetadata_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxNotes:");
      sb.append(this.maxNotes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("resultSpec:");
      if (this.resultSpec == null) {
        sb.append("null");
      } else {
        sb.append(this.resultSpec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNotesMetadata_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findNotesMetadata_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private NotesMetadataList success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public findNotesMetadata_result() {
    }

    public findNotesMetadata_result(
      NotesMetadataList success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNotesMetadata_result(findNotesMetadata_result other) {
      if (other.isSetSuccess()) {
        this.success = new NotesMetadataList(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public findNotesMetadata_result deepCopy() {
      return new findNotesMetadata_result(this);
    }

    public findNotesMetadata_result clone() {
      return new findNotesMetadata_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public NotesMetadataList getSuccess() {
      return this.success;
    }

    public void setSuccess(NotesMetadataList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNotesMetadata_result)
        return this.equals((findNotesMetadata_result)that);
      return false;
    }

    public boolean equals(findNotesMetadata_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findNotesMetadata_result other = (findNotesMetadata_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new NotesMetadataList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findNotesMetadata_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNoteCounts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findNoteCounts_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField FILTER_FIELD_DESC = new TField("filter", TType.STRUCT, (short)2);
    private static final TField WITH_TRASH_FIELD_DESC = new TField("withTrash", TType.BOOL, (short)3);

    private String authenticationToken;
    private NoteFilter filter;
    private boolean withTrash;

    // isset id assignments
    private static final int __WITHTRASH_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public findNoteCounts_args() {
    }

    public findNoteCounts_args(
      String authenticationToken,
      NoteFilter filter,
      boolean withTrash)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.filter = filter;
      this.withTrash = withTrash;
      setWithTrashIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoteCounts_args(findNoteCounts_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetFilter()) {
        this.filter = new NoteFilter(other.filter);
      }
      this.withTrash = other.withTrash;
    }

    public findNoteCounts_args deepCopy() {
      return new findNoteCounts_args(this);
    }

    public findNoteCounts_args clone() {
      return new findNoteCounts_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.filter = null;
      setWithTrashIsSet(false);
      this.withTrash = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteFilter getFilter() {
      return this.filter;
    }

    public void setFilter(NoteFilter filter) {
      this.filter = filter;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been asigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public boolean isWithTrash() {
      return this.withTrash;
    }

    public void setWithTrash(boolean withTrash) {
      this.withTrash = withTrash;
      setWithTrashIsSet(true);
    }

    public void unsetWithTrash() {
      __isset_vector[__WITHTRASH_ISSET_ID] = false;
    }

    /** Returns true if field withTrash is set (has been asigned a value) and false otherwise */
    public boolean isSetWithTrash() {
      return __isset_vector[__WITHTRASH_ISSET_ID];
    }

    public void setWithTrashIsSet(boolean value) {
      __isset_vector[__WITHTRASH_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoteCounts_args)
        return this.equals((findNoteCounts_args)that);
      return false;
    }

    public boolean equals(findNoteCounts_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      boolean this_present_withTrash = true;
      boolean that_present_withTrash = true;
      if (this_present_withTrash || that_present_withTrash) {
        if (!(this_present_withTrash && that_present_withTrash))
          return false;
        if (this.withTrash != that.withTrash)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findNoteCounts_args other = (findNoteCounts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetFilter(), other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = this.filter.compareTo(other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithTrash(), other.isSetWithTrash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithTrash()) {
        lastComparison = TBaseHelper.compareTo(this.withTrash, other.withTrash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // FILTER
            if (field.type == TType.STRUCT) {
              this.filter = new NoteFilter();
              this.filter.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // WITH_TRASH
            if (field.type == TType.BOOL) {
              this.withTrash = iprot.readBool();
              setWithTrashIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        this.filter.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITH_TRASH_FIELD_DESC);
      oprot.writeBool(this.withTrash);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findNoteCounts_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("withTrash:");
      sb.append(this.withTrash);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findNoteCounts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findNoteCounts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private NoteCollectionCounts success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public findNoteCounts_result() {
    }

    public findNoteCounts_result(
      NoteCollectionCounts success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findNoteCounts_result(findNoteCounts_result other) {
      if (other.isSetSuccess()) {
        this.success = new NoteCollectionCounts(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public findNoteCounts_result deepCopy() {
      return new findNoteCounts_result(this);
    }

    public findNoteCounts_result clone() {
      return new findNoteCounts_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public NoteCollectionCounts getSuccess() {
      return this.success;
    }

    public void setSuccess(NoteCollectionCounts success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findNoteCounts_result)
        return this.equals((findNoteCounts_result)that);
      return false;
    }

    public boolean equals(findNoteCounts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findNoteCounts_result other = (findNoteCounts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new NoteCollectionCounts();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findNoteCounts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField WITH_CONTENT_FIELD_DESC = new TField("withContent", TType.BOOL, (short)3);
    private static final TField WITH_RESOURCES_DATA_FIELD_DESC = new TField("withResourcesData", TType.BOOL, (short)4);
    private static final TField WITH_RESOURCES_RECOGNITION_FIELD_DESC = new TField("withResourcesRecognition", TType.BOOL, (short)5);
    private static final TField WITH_RESOURCES_ALTERNATE_DATA_FIELD_DESC = new TField("withResourcesAlternateData", TType.BOOL, (short)6);

    private String authenticationToken;
    private String guid;
    private boolean withContent;
    private boolean withResourcesData;
    private boolean withResourcesRecognition;
    private boolean withResourcesAlternateData;

    // isset id assignments
    private static final int __WITHCONTENT_ISSET_ID = 0;
    private static final int __WITHRESOURCESDATA_ISSET_ID = 1;
    private static final int __WITHRESOURCESRECOGNITION_ISSET_ID = 2;
    private static final int __WITHRESOURCESALTERNATEDATA_ISSET_ID = 3;
    private boolean[] __isset_vector = new boolean[4];

    public getNote_args() {
    }

    public getNote_args(
      String authenticationToken,
      String guid,
      boolean withContent,
      boolean withResourcesData,
      boolean withResourcesRecognition,
      boolean withResourcesAlternateData)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.withContent = withContent;
      setWithContentIsSet(true);
      this.withResourcesData = withResourcesData;
      setWithResourcesDataIsSet(true);
      this.withResourcesRecognition = withResourcesRecognition;
      setWithResourcesRecognitionIsSet(true);
      this.withResourcesAlternateData = withResourcesAlternateData;
      setWithResourcesAlternateDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNote_args(getNote_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      this.withContent = other.withContent;
      this.withResourcesData = other.withResourcesData;
      this.withResourcesRecognition = other.withResourcesRecognition;
      this.withResourcesAlternateData = other.withResourcesAlternateData;
    }

    public getNote_args deepCopy() {
      return new getNote_args(this);
    }

    public getNote_args clone() {
      return new getNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      setWithContentIsSet(false);
      this.withContent = false;
      setWithResourcesDataIsSet(false);
      this.withResourcesData = false;
      setWithResourcesRecognitionIsSet(false);
      this.withResourcesRecognition = false;
      setWithResourcesAlternateDataIsSet(false);
      this.withResourcesAlternateData = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean isWithContent() {
      return this.withContent;
    }

    public void setWithContent(boolean withContent) {
      this.withContent = withContent;
      setWithContentIsSet(true);
    }

    public void unsetWithContent() {
      __isset_vector[__WITHCONTENT_ISSET_ID] = false;
    }

    /** Returns true if field withContent is set (has been asigned a value) and false otherwise */
    public boolean isSetWithContent() {
      return __isset_vector[__WITHCONTENT_ISSET_ID];
    }

    public void setWithContentIsSet(boolean value) {
      __isset_vector[__WITHCONTENT_ISSET_ID] = value;
    }

    public boolean isWithResourcesData() {
      return this.withResourcesData;
    }

    public void setWithResourcesData(boolean withResourcesData) {
      this.withResourcesData = withResourcesData;
      setWithResourcesDataIsSet(true);
    }

    public void unsetWithResourcesData() {
      __isset_vector[__WITHRESOURCESDATA_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesData() {
      return __isset_vector[__WITHRESOURCESDATA_ISSET_ID];
    }

    public void setWithResourcesDataIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESDATA_ISSET_ID] = value;
    }

    public boolean isWithResourcesRecognition() {
      return this.withResourcesRecognition;
    }

    public void setWithResourcesRecognition(boolean withResourcesRecognition) {
      this.withResourcesRecognition = withResourcesRecognition;
      setWithResourcesRecognitionIsSet(true);
    }

    public void unsetWithResourcesRecognition() {
      __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesRecognition is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesRecognition() {
      return __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID];
    }

    public void setWithResourcesRecognitionIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID] = value;
    }

    public boolean isWithResourcesAlternateData() {
      return this.withResourcesAlternateData;
    }

    public void setWithResourcesAlternateData(boolean withResourcesAlternateData) {
      this.withResourcesAlternateData = withResourcesAlternateData;
      setWithResourcesAlternateDataIsSet(true);
    }

    public void unsetWithResourcesAlternateData() {
      __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesAlternateData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesAlternateData() {
      return __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID];
    }

    public void setWithResourcesAlternateDataIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNote_args)
        return this.equals((getNote_args)that);
      return false;
    }

    public boolean equals(getNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_withContent = true;
      boolean that_present_withContent = true;
      if (this_present_withContent || that_present_withContent) {
        if (!(this_present_withContent && that_present_withContent))
          return false;
        if (this.withContent != that.withContent)
          return false;
      }

      boolean this_present_withResourcesData = true;
      boolean that_present_withResourcesData = true;
      if (this_present_withResourcesData || that_present_withResourcesData) {
        if (!(this_present_withResourcesData && that_present_withResourcesData))
          return false;
        if (this.withResourcesData != that.withResourcesData)
          return false;
      }

      boolean this_present_withResourcesRecognition = true;
      boolean that_present_withResourcesRecognition = true;
      if (this_present_withResourcesRecognition || that_present_withResourcesRecognition) {
        if (!(this_present_withResourcesRecognition && that_present_withResourcesRecognition))
          return false;
        if (this.withResourcesRecognition != that.withResourcesRecognition)
          return false;
      }

      boolean this_present_withResourcesAlternateData = true;
      boolean that_present_withResourcesAlternateData = true;
      if (this_present_withResourcesAlternateData || that_present_withResourcesAlternateData) {
        if (!(this_present_withResourcesAlternateData && that_present_withResourcesAlternateData))
          return false;
        if (this.withResourcesAlternateData != that.withResourcesAlternateData)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNote_args other = (getNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithContent(), other.isSetWithContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithContent()) {
        lastComparison = TBaseHelper.compareTo(this.withContent, other.withContent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithResourcesData(), other.isSetWithResourcesData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesData()) {
        lastComparison = TBaseHelper.compareTo(this.withResourcesData, other.withResourcesData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithResourcesRecognition(), other.isSetWithResourcesRecognition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesRecognition()) {
        lastComparison = TBaseHelper.compareTo(this.withResourcesRecognition, other.withResourcesRecognition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithResourcesAlternateData(), other.isSetWithResourcesAlternateData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesAlternateData()) {
        lastComparison = TBaseHelper.compareTo(this.withResourcesAlternateData, other.withResourcesAlternateData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // WITH_CONTENT
            if (field.type == TType.BOOL) {
              this.withContent = iprot.readBool();
              setWithContentIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // WITH_RESOURCES_DATA
            if (field.type == TType.BOOL) {
              this.withResourcesData = iprot.readBool();
              setWithResourcesDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // WITH_RESOURCES_RECOGNITION
            if (field.type == TType.BOOL) {
              this.withResourcesRecognition = iprot.readBool();
              setWithResourcesRecognitionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WITH_RESOURCES_ALTERNATE_DATA
            if (field.type == TType.BOOL) {
              this.withResourcesAlternateData = iprot.readBool();
              setWithResourcesAlternateDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITH_CONTENT_FIELD_DESC);
      oprot.writeBool(this.withContent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_DATA_FIELD_DESC);
      oprot.writeBool(this.withResourcesData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_RECOGNITION_FIELD_DESC);
      oprot.writeBool(this.withResourcesRecognition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_ALTERNATE_DATA_FIELD_DESC);
      oprot.writeBool(this.withResourcesAlternateData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("withContent:");
      sb.append(this.withContent);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesData:");
      sb.append(this.withResourcesData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesRecognition:");
      sb.append(this.withResourcesRecognition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesAlternateData:");
      sb.append(this.withResourcesAlternateData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getNote_result() {
    }

    public getNote_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNote_result(getNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNote_result deepCopy() {
      return new getNote_result(this);
    }

    public getNote_result clone() {
      return new getNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNote_result)
        return this.equals((getNote_result)that);
      return false;
    }

    public boolean equals(getNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNote_result other = (getNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteContent_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteContent_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getNoteContent_args() {
    }

    public getNoteContent_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteContent_args(getNoteContent_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getNoteContent_args deepCopy() {
      return new getNoteContent_args(this);
    }

    public getNoteContent_args clone() {
      return new getNoteContent_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteContent_args)
        return this.equals((getNoteContent_args)that);
      return false;
    }

    public boolean equals(getNoteContent_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNoteContent_args other = (getNoteContent_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNoteContent_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteContent_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteContent_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getNoteContent_result() {
    }

    public getNoteContent_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteContent_result(getNoteContent_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteContent_result deepCopy() {
      return new getNoteContent_result(this);
    }

    public getNoteContent_result clone() {
      return new getNoteContent_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteContent_result)
        return this.equals((getNoteContent_result)that);
      return false;
    }

    public boolean equals(getNoteContent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNoteContent_result other = (getNoteContent_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNoteContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteSearchText_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteSearchText_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField NOTE_ONLY_FIELD_DESC = new TField("noteOnly", TType.BOOL, (short)3);
    private static final TField TOKENIZE_FOR_INDEXING_FIELD_DESC = new TField("tokenizeForIndexing", TType.BOOL, (short)4);

    private String authenticationToken;
    private String guid;
    private boolean noteOnly;
    private boolean tokenizeForIndexing;

    // isset id assignments
    private static final int __NOTEONLY_ISSET_ID = 0;
    private static final int __TOKENIZEFORINDEXING_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getNoteSearchText_args() {
    }

    public getNoteSearchText_args(
      String authenticationToken,
      String guid,
      boolean noteOnly,
      boolean tokenizeForIndexing)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.noteOnly = noteOnly;
      setNoteOnlyIsSet(true);
      this.tokenizeForIndexing = tokenizeForIndexing;
      setTokenizeForIndexingIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteSearchText_args(getNoteSearchText_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      this.noteOnly = other.noteOnly;
      this.tokenizeForIndexing = other.tokenizeForIndexing;
    }

    public getNoteSearchText_args deepCopy() {
      return new getNoteSearchText_args(this);
    }

    public getNoteSearchText_args clone() {
      return new getNoteSearchText_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      setNoteOnlyIsSet(false);
      this.noteOnly = false;
      setTokenizeForIndexingIsSet(false);
      this.tokenizeForIndexing = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean isNoteOnly() {
      return this.noteOnly;
    }

    public void setNoteOnly(boolean noteOnly) {
      this.noteOnly = noteOnly;
      setNoteOnlyIsSet(true);
    }

    public void unsetNoteOnly() {
      __isset_vector[__NOTEONLY_ISSET_ID] = false;
    }

    /** Returns true if field noteOnly is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteOnly() {
      return __isset_vector[__NOTEONLY_ISSET_ID];
    }

    public void setNoteOnlyIsSet(boolean value) {
      __isset_vector[__NOTEONLY_ISSET_ID] = value;
    }

    public boolean isTokenizeForIndexing() {
      return this.tokenizeForIndexing;
    }

    public void setTokenizeForIndexing(boolean tokenizeForIndexing) {
      this.tokenizeForIndexing = tokenizeForIndexing;
      setTokenizeForIndexingIsSet(true);
    }

    public void unsetTokenizeForIndexing() {
      __isset_vector[__TOKENIZEFORINDEXING_ISSET_ID] = false;
    }

    /** Returns true if field tokenizeForIndexing is set (has been asigned a value) and false otherwise */
    public boolean isSetTokenizeForIndexing() {
      return __isset_vector[__TOKENIZEFORINDEXING_ISSET_ID];
    }

    public void setTokenizeForIndexingIsSet(boolean value) {
      __isset_vector[__TOKENIZEFORINDEXING_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteSearchText_args)
        return this.equals((getNoteSearchText_args)that);
      return false;
    }

    public boolean equals(getNoteSearchText_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_noteOnly = true;
      boolean that_present_noteOnly = true;
      if (this_present_noteOnly || that_present_noteOnly) {
        if (!(this_present_noteOnly && that_present_noteOnly))
          return false;
        if (this.noteOnly != that.noteOnly)
          return false;
      }

      boolean this_present_tokenizeForIndexing = true;
      boolean that_present_tokenizeForIndexing = true;
      if (this_present_tokenizeForIndexing || that_present_tokenizeForIndexing) {
        if (!(this_present_tokenizeForIndexing && that_present_tokenizeForIndexing))
          return false;
        if (this.tokenizeForIndexing != that.tokenizeForIndexing)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNoteSearchText_args other = (getNoteSearchText_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNoteOnly(), other.isSetNoteOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteOnly()) {
        lastComparison = TBaseHelper.compareTo(this.noteOnly, other.noteOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTokenizeForIndexing(), other.isSetTokenizeForIndexing());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenizeForIndexing()) {
        lastComparison = TBaseHelper.compareTo(this.tokenizeForIndexing, other.tokenizeForIndexing);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOTE_ONLY
            if (field.type == TType.BOOL) {
              this.noteOnly = iprot.readBool();
              setNoteOnlyIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TOKENIZE_FOR_INDEXING
            if (field.type == TType.BOOL) {
              this.tokenizeForIndexing = iprot.readBool();
              setTokenizeForIndexingIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTE_ONLY_FIELD_DESC);
      oprot.writeBool(this.noteOnly);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOKENIZE_FOR_INDEXING_FIELD_DESC);
      oprot.writeBool(this.tokenizeForIndexing);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNoteSearchText_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteOnly:");
      sb.append(this.noteOnly);
      first = false;
      if (!first) sb.append(", ");
      sb.append("tokenizeForIndexing:");
      sb.append(this.tokenizeForIndexing);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteSearchText_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteSearchText_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getNoteSearchText_result() {
    }

    public getNoteSearchText_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteSearchText_result(getNoteSearchText_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteSearchText_result deepCopy() {
      return new getNoteSearchText_result(this);
    }

    public getNoteSearchText_result clone() {
      return new getNoteSearchText_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteSearchText_result)
        return this.equals((getNoteSearchText_result)that);
      return false;
    }

    public boolean equals(getNoteSearchText_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNoteSearchText_result other = (getNoteSearchText_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNoteSearchText_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceSearchText_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceSearchText_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getResourceSearchText_args() {
    }

    public getResourceSearchText_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceSearchText_args(getResourceSearchText_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceSearchText_args deepCopy() {
      return new getResourceSearchText_args(this);
    }

    public getResourceSearchText_args clone() {
      return new getResourceSearchText_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceSearchText_args)
        return this.equals((getResourceSearchText_args)that);
      return false;
    }

    public boolean equals(getResourceSearchText_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceSearchText_args other = (getResourceSearchText_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceSearchText_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceSearchText_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceSearchText_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getResourceSearchText_result() {
    }

    public getResourceSearchText_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceSearchText_result(getResourceSearchText_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceSearchText_result deepCopy() {
      return new getResourceSearchText_result(this);
    }

    public getResourceSearchText_result clone() {
      return new getResourceSearchText_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceSearchText_result)
        return this.equals((getResourceSearchText_result)that);
      return false;
    }

    public boolean equals(getResourceSearchText_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceSearchText_result other = (getResourceSearchText_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceSearchText_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteTagNames_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteTagNames_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getNoteTagNames_args() {
    }

    public getNoteTagNames_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteTagNames_args(getNoteTagNames_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getNoteTagNames_args deepCopy() {
      return new getNoteTagNames_args(this);
    }

    public getNoteTagNames_args clone() {
      return new getNoteTagNames_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteTagNames_args)
        return this.equals((getNoteTagNames_args)that);
      return false;
    }

    public boolean equals(getNoteTagNames_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNoteTagNames_args other = (getNoteTagNames_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNoteTagNames_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteTagNames_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteTagNames_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private Vector success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getNoteTagNames_result() {
    }

    public getNoteTagNames_result(
      Vector success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteTagNames_result(getNoteTagNames_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteTagNames_result deepCopy() {
      return new getNoteTagNames_result(this);
    }

    public getNoteTagNames_result clone() {
      return new getNoteTagNames_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteTagNames_result)
        return this.equals((getNoteTagNames_result)that);
      return false;
    }

    public boolean equals(getNoteTagNames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNoteTagNames_result other = (getNoteTagNames_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list119 = iprot.readListBegin();
                this.success = new Vector(_list119.size);
                for (int _i120 = 0; _i120 < _list119.size; ++_i120)
                {
                  String _elem121;
                  _elem121 = iprot.readString();
                  this.success.addElement(_elem121);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter122_enum = this.success.elements(); _iter122_enum.hasMoreElements(); )           {
            String _iter122 = (String)_iter122_enum.nextElement();
            oprot.writeString(_iter122);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNoteTagNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_FIELD_DESC = new TField("note", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Note note;

    // isset id assignments

    public createNote_args() {
    }

    public createNote_args(
      String authenticationToken,
      com.evernote.edam.type.Note note)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.note = note;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNote_args(createNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNote()) {
        this.note = new com.evernote.edam.type.Note(other.note);
      }
    }

    public createNote_args deepCopy() {
      return new createNote_args(this);
    }

    public createNote_args clone() {
      return new createNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.note = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Note getNote() {
      return this.note;
    }

    public void setNote(com.evernote.edam.type.Note note) {
      this.note = note;
    }

    public void unsetNote() {
      this.note = null;
    }

    /** Returns true if field note is set (has been asigned a value) and false otherwise */
    public boolean isSetNote() {
      return this.note != null;
    }

    public void setNoteIsSet(boolean value) {
      if (!value) {
        this.note = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNote_args)
        return this.equals((createNote_args)that);
      return false;
    }

    public boolean equals(createNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_note = true && this.isSetNote();
      boolean that_present_note = true && that.isSetNote();
      if (this_present_note || that_present_note) {
        if (!(this_present_note && that_present_note))
          return false;
        if (!this.note.equals(that.note))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNote_args other = (createNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNote(), other.isSetNote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNote()) {
        lastComparison = this.note.compareTo(other.note);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE
            if (field.type == TType.STRUCT) {
              this.note = new com.evernote.edam.type.Note();
              this.note.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        this.note.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public createNote_result() {
    }

    public createNote_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNote_result(createNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public createNote_result deepCopy() {
      return new createNote_result(this);
    }

    public createNote_result clone() {
      return new createNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNote_result)
        return this.equals((createNote_result)that);
      return false;
    }

    public boolean equals(createNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createNote_result other = (createNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_FIELD_DESC = new TField("note", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Note note;

    // isset id assignments

    public updateNote_args() {
    }

    public updateNote_args(
      String authenticationToken,
      com.evernote.edam.type.Note note)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.note = note;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNote_args(updateNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNote()) {
        this.note = new com.evernote.edam.type.Note(other.note);
      }
    }

    public updateNote_args deepCopy() {
      return new updateNote_args(this);
    }

    public updateNote_args clone() {
      return new updateNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.note = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Note getNote() {
      return this.note;
    }

    public void setNote(com.evernote.edam.type.Note note) {
      this.note = note;
    }

    public void unsetNote() {
      this.note = null;
    }

    /** Returns true if field note is set (has been asigned a value) and false otherwise */
    public boolean isSetNote() {
      return this.note != null;
    }

    public void setNoteIsSet(boolean value) {
      if (!value) {
        this.note = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNote_args)
        return this.equals((updateNote_args)that);
      return false;
    }

    public boolean equals(updateNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_note = true && this.isSetNote();
      boolean that_present_note = true && that.isSetNote();
      if (this_present_note || that_present_note) {
        if (!(this_present_note && that_present_note))
          return false;
        if (!this.note.equals(that.note))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateNote_args other = (updateNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNote(), other.isSetNote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNote()) {
        lastComparison = this.note.compareTo(other.note);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE
            if (field.type == TType.STRUCT) {
              this.note = new com.evernote.edam.type.Note();
              this.note.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.note != null) {
        oprot.writeFieldBegin(NOTE_FIELD_DESC);
        this.note.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public updateNote_result() {
    }

    public updateNote_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNote_result(updateNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateNote_result deepCopy() {
      return new updateNote_result(this);
    }

    public updateNote_result clone() {
      return new updateNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNote_result)
        return this.equals((updateNote_result)that);
      return false;
    }

    public boolean equals(updateNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateNote_result other = (updateNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class deleteNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public deleteNote_args() {
    }

    public deleteNote_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNote_args(deleteNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public deleteNote_args deepCopy() {
      return new deleteNote_args(this);
    }

    public deleteNote_args clone() {
      return new deleteNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNote_args)
        return this.equals((deleteNote_args)that);
      return false;
    }

    public boolean equals(deleteNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      deleteNote_args other = (deleteNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("deleteNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class deleteNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("deleteNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public deleteNote_result() {
    }

    public deleteNote_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteNote_result(deleteNote_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public deleteNote_result deepCopy() {
      return new deleteNote_result(this);
    }

    public deleteNote_result clone() {
      return new deleteNote_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteNote_result)
        return this.equals((deleteNote_result)that);
      return false;
    }

    public boolean equals(deleteNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      deleteNote_result other = (deleteNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("deleteNote_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public expungeNote_args() {
    }

    public expungeNote_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNote_args(expungeNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeNote_args deepCopy() {
      return new expungeNote_args(this);
    }

    public expungeNote_args clone() {
      return new expungeNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNote_args)
        return this.equals((expungeNote_args)that);
      return false;
    }

    public boolean equals(expungeNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeNote_args other = (expungeNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public expungeNote_result() {
    }

    public expungeNote_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNote_result(expungeNote_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeNote_result deepCopy() {
      return new expungeNote_result(this);
    }

    public expungeNote_result clone() {
      return new expungeNote_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNote_result)
        return this.equals((expungeNote_result)that);
      return false;
    }

    public boolean equals(expungeNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeNote_result other = (expungeNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeNote_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNotes_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNotes_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUIDS_FIELD_DESC = new TField("noteGuids", TType.LIST, (short)2);

    private String authenticationToken;
    private Vector noteGuids;

    // isset id assignments

    public expungeNotes_args() {
    }

    public expungeNotes_args(
      String authenticationToken,
      Vector noteGuids)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuids = noteGuids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNotes_args(expungeNotes_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuids()) {
        Vector __this__noteGuids = new Vector();
        for (Enumeration other_enum = other.noteGuids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__noteGuids.addElement(other_element);
        }
        this.noteGuids = __this__noteGuids;
      }
    }

    public expungeNotes_args deepCopy() {
      return new expungeNotes_args(this);
    }

    public expungeNotes_args clone() {
      return new expungeNotes_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuids = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public int getNoteGuidsSize() {
      return (this.noteGuids == null) ? 0 : this.noteGuids.size();
    }

    public Enumeration getNoteGuidsEnumeration() {
      return (this.noteGuids == null) ? null : this.noteGuids.elements();
    }

    public void addToNoteGuids(String elem) {
      if (this.noteGuids == null) {
        this.noteGuids = new Vector();
      }
      this.noteGuids.addElement(elem);
    }

    public Vector getNoteGuids() {
      return this.noteGuids;
    }

    public void setNoteGuids(Vector noteGuids) {
      this.noteGuids = noteGuids;
    }

    public void unsetNoteGuids() {
      this.noteGuids = null;
    }

    /** Returns true if field noteGuids is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuids() {
      return this.noteGuids != null;
    }

    public void setNoteGuidsIsSet(boolean value) {
      if (!value) {
        this.noteGuids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNotes_args)
        return this.equals((expungeNotes_args)that);
      return false;
    }

    public boolean equals(expungeNotes_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuids = true && this.isSetNoteGuids();
      boolean that_present_noteGuids = true && that.isSetNoteGuids();
      if (this_present_noteGuids || that_present_noteGuids) {
        if (!(this_present_noteGuids && that_present_noteGuids))
          return false;
        if (!this.noteGuids.equals(that.noteGuids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeNotes_args other = (expungeNotes_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNoteGuids(), other.isSetNoteGuids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuids()) {
        lastComparison = TBaseHelper.compareTo(this.noteGuids, other.noteGuids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUIDS
            if (field.type == TType.LIST) {
              {
                TList _list123 = iprot.readListBegin();
                this.noteGuids = new Vector(_list123.size);
                for (int _i124 = 0; _i124 < _list123.size; ++_i124)
                {
                  String _elem125;
                  _elem125 = iprot.readString();
                  this.noteGuids.addElement(_elem125);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuids != null) {
        oprot.writeFieldBegin(NOTE_GUIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.noteGuids.size()));
          for (Enumeration _iter126_enum = this.noteGuids.elements(); _iter126_enum.hasMoreElements(); )           {
            String _iter126 = (String)_iter126_enum.nextElement();
            oprot.writeString(_iter126);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeNotes_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuids:");
      if (this.noteGuids == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeNotes_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeNotes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public expungeNotes_result() {
    }

    public expungeNotes_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeNotes_result(expungeNotes_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public expungeNotes_result deepCopy() {
      return new expungeNotes_result(this);
    }

    public expungeNotes_result clone() {
      return new expungeNotes_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeNotes_result)
        return this.equals((expungeNotes_result)that);
      return false;
    }

    public boolean equals(expungeNotes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeNotes_result other = (expungeNotes_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeNotes_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeInactiveNotes_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeInactiveNotes_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public expungeInactiveNotes_args() {
    }

    public expungeInactiveNotes_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeInactiveNotes_args(expungeInactiveNotes_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public expungeInactiveNotes_args deepCopy() {
      return new expungeInactiveNotes_args(this);
    }

    public expungeInactiveNotes_args clone() {
      return new expungeInactiveNotes_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeInactiveNotes_args)
        return this.equals((expungeInactiveNotes_args)that);
      return false;
    }

    public boolean equals(expungeInactiveNotes_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeInactiveNotes_args other = (expungeInactiveNotes_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeInactiveNotes_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeInactiveNotes_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeInactiveNotes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public expungeInactiveNotes_result() {
    }

    public expungeInactiveNotes_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeInactiveNotes_result(expungeInactiveNotes_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public expungeInactiveNotes_result deepCopy() {
      return new expungeInactiveNotes_result(this);
    }

    public expungeInactiveNotes_result clone() {
      return new expungeInactiveNotes_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeInactiveNotes_result)
        return this.equals((expungeInactiveNotes_result)that);
      return false;
    }

    public boolean equals(expungeInactiveNotes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeInactiveNotes_result other = (expungeInactiveNotes_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeInactiveNotes_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class copyNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("copyNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)2);
    private static final TField TO_NOTEBOOK_GUID_FIELD_DESC = new TField("toNotebookGuid", TType.STRING, (short)3);

    private String authenticationToken;
    private String noteGuid;
    private String toNotebookGuid;

    // isset id assignments

    public copyNote_args() {
    }

    public copyNote_args(
      String authenticationToken,
      String noteGuid,
      String toNotebookGuid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuid = noteGuid;
      this.toNotebookGuid = toNotebookGuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyNote_args(copyNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuid()) {
        this.noteGuid = other.noteGuid;
      }
      if (other.isSetToNotebookGuid()) {
        this.toNotebookGuid = other.toNotebookGuid;
      }
    }

    public copyNote_args deepCopy() {
      return new copyNote_args(this);
    }

    public copyNote_args clone() {
      return new copyNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuid = null;
      this.toNotebookGuid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNoteGuid() {
      return this.noteGuid;
    }

    public void setNoteGuid(String noteGuid) {
      this.noteGuid = noteGuid;
    }

    public void unsetNoteGuid() {
      this.noteGuid = null;
    }

    /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuid() {
      return this.noteGuid != null;
    }

    public void setNoteGuidIsSet(boolean value) {
      if (!value) {
        this.noteGuid = null;
      }
    }

    public String getToNotebookGuid() {
      return this.toNotebookGuid;
    }

    public void setToNotebookGuid(String toNotebookGuid) {
      this.toNotebookGuid = toNotebookGuid;
    }

    public void unsetToNotebookGuid() {
      this.toNotebookGuid = null;
    }

    /** Returns true if field toNotebookGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetToNotebookGuid() {
      return this.toNotebookGuid != null;
    }

    public void setToNotebookGuidIsSet(boolean value) {
      if (!value) {
        this.toNotebookGuid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyNote_args)
        return this.equals((copyNote_args)that);
      return false;
    }

    public boolean equals(copyNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuid = true && this.isSetNoteGuid();
      boolean that_present_noteGuid = true && that.isSetNoteGuid();
      if (this_present_noteGuid || that_present_noteGuid) {
        if (!(this_present_noteGuid && that_present_noteGuid))
          return false;
        if (!this.noteGuid.equals(that.noteGuid))
          return false;
      }

      boolean this_present_toNotebookGuid = true && this.isSetToNotebookGuid();
      boolean that_present_toNotebookGuid = true && that.isSetToNotebookGuid();
      if (this_present_toNotebookGuid || that_present_toNotebookGuid) {
        if (!(this_present_toNotebookGuid && that_present_toNotebookGuid))
          return false;
        if (!this.toNotebookGuid.equals(that.toNotebookGuid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      copyNote_args other = (copyNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNoteGuid(), other.isSetNoteGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuid()) {
        lastComparison = TBaseHelper.compareTo(this.noteGuid, other.noteGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetToNotebookGuid(), other.isSetToNotebookGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToNotebookGuid()) {
        lastComparison = TBaseHelper.compareTo(this.toNotebookGuid, other.toNotebookGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUID
            if (field.type == TType.STRING) {
              this.noteGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TO_NOTEBOOK_GUID
            if (field.type == TType.STRING) {
              this.toNotebookGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuid != null) {
        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
        oprot.writeString(this.noteGuid);
        oprot.writeFieldEnd();
      }
      if (this.toNotebookGuid != null) {
        oprot.writeFieldBegin(TO_NOTEBOOK_GUID_FIELD_DESC);
        oprot.writeString(this.toNotebookGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("copyNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuid:");
      if (this.noteGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toNotebookGuid:");
      if (this.toNotebookGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.toNotebookGuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class copyNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("copyNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public copyNote_result() {
    }

    public copyNote_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyNote_result(copyNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public copyNote_result deepCopy() {
      return new copyNote_result(this);
    }

    public copyNote_result clone() {
      return new copyNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyNote_result)
        return this.equals((copyNote_result)that);
      return false;
    }

    public boolean equals(copyNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      copyNote_result other = (copyNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("copyNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listNoteVersions_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listNoteVersions_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)2);

    private String authenticationToken;
    private String noteGuid;

    // isset id assignments

    public listNoteVersions_args() {
    }

    public listNoteVersions_args(
      String authenticationToken,
      String noteGuid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuid = noteGuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNoteVersions_args(listNoteVersions_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuid()) {
        this.noteGuid = other.noteGuid;
      }
    }

    public listNoteVersions_args deepCopy() {
      return new listNoteVersions_args(this);
    }

    public listNoteVersions_args clone() {
      return new listNoteVersions_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNoteGuid() {
      return this.noteGuid;
    }

    public void setNoteGuid(String noteGuid) {
      this.noteGuid = noteGuid;
    }

    public void unsetNoteGuid() {
      this.noteGuid = null;
    }

    /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuid() {
      return this.noteGuid != null;
    }

    public void setNoteGuidIsSet(boolean value) {
      if (!value) {
        this.noteGuid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNoteVersions_args)
        return this.equals((listNoteVersions_args)that);
      return false;
    }

    public boolean equals(listNoteVersions_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuid = true && this.isSetNoteGuid();
      boolean that_present_noteGuid = true && that.isSetNoteGuid();
      if (this_present_noteGuid || that_present_noteGuid) {
        if (!(this_present_noteGuid && that_present_noteGuid))
          return false;
        if (!this.noteGuid.equals(that.noteGuid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listNoteVersions_args other = (listNoteVersions_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNoteGuid(), other.isSetNoteGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuid()) {
        lastComparison = TBaseHelper.compareTo(this.noteGuid, other.noteGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUID
            if (field.type == TType.STRING) {
              this.noteGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuid != null) {
        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
        oprot.writeString(this.noteGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listNoteVersions_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuid:");
      if (this.noteGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listNoteVersions_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listNoteVersions_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private Vector success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public listNoteVersions_result() {
    }

    public listNoteVersions_result(
      Vector success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listNoteVersions_result(listNoteVersions_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          NoteVersionId other_element = (NoteVersionId)other_enum.nextElement();
          __this__success.addElement(new NoteVersionId(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public listNoteVersions_result deepCopy() {
      return new listNoteVersions_result(this);
    }

    public listNoteVersions_result clone() {
      return new listNoteVersions_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(NoteVersionId elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listNoteVersions_result)
        return this.equals((listNoteVersions_result)that);
      return false;
    }

    public boolean equals(listNoteVersions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listNoteVersions_result other = (listNoteVersions_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list127 = iprot.readListBegin();
                this.success = new Vector(_list127.size);
                for (int _i128 = 0; _i128 < _list127.size; ++_i128)
                {
                  NoteVersionId _elem129;
                  _elem129 = new NoteVersionId();
                  _elem129.read(iprot);
                  this.success.addElement(_elem129);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter130_enum = this.success.elements(); _iter130_enum.hasMoreElements(); )           {
            NoteVersionId _iter130 = (NoteVersionId)_iter130_enum.nextElement();
            _iter130.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listNoteVersions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteVersion_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteVersion_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)2);
    private static final TField UPDATE_SEQUENCE_NUM_FIELD_DESC = new TField("updateSequenceNum", TType.I32, (short)3);
    private static final TField WITH_RESOURCES_DATA_FIELD_DESC = new TField("withResourcesData", TType.BOOL, (short)4);
    private static final TField WITH_RESOURCES_RECOGNITION_FIELD_DESC = new TField("withResourcesRecognition", TType.BOOL, (short)5);
    private static final TField WITH_RESOURCES_ALTERNATE_DATA_FIELD_DESC = new TField("withResourcesAlternateData", TType.BOOL, (short)6);

    private String authenticationToken;
    private String noteGuid;
    private int updateSequenceNum;
    private boolean withResourcesData;
    private boolean withResourcesRecognition;
    private boolean withResourcesAlternateData;

    // isset id assignments
    private static final int __UPDATESEQUENCENUM_ISSET_ID = 0;
    private static final int __WITHRESOURCESDATA_ISSET_ID = 1;
    private static final int __WITHRESOURCESRECOGNITION_ISSET_ID = 2;
    private static final int __WITHRESOURCESALTERNATEDATA_ISSET_ID = 3;
    private boolean[] __isset_vector = new boolean[4];

    public getNoteVersion_args() {
    }

    public getNoteVersion_args(
      String authenticationToken,
      String noteGuid,
      int updateSequenceNum,
      boolean withResourcesData,
      boolean withResourcesRecognition,
      boolean withResourcesAlternateData)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuid = noteGuid;
      this.updateSequenceNum = updateSequenceNum;
      setUpdateSequenceNumIsSet(true);
      this.withResourcesData = withResourcesData;
      setWithResourcesDataIsSet(true);
      this.withResourcesRecognition = withResourcesRecognition;
      setWithResourcesRecognitionIsSet(true);
      this.withResourcesAlternateData = withResourcesAlternateData;
      setWithResourcesAlternateDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteVersion_args(getNoteVersion_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuid()) {
        this.noteGuid = other.noteGuid;
      }
      this.updateSequenceNum = other.updateSequenceNum;
      this.withResourcesData = other.withResourcesData;
      this.withResourcesRecognition = other.withResourcesRecognition;
      this.withResourcesAlternateData = other.withResourcesAlternateData;
    }

    public getNoteVersion_args deepCopy() {
      return new getNoteVersion_args(this);
    }

    public getNoteVersion_args clone() {
      return new getNoteVersion_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuid = null;
      setUpdateSequenceNumIsSet(false);
      this.updateSequenceNum = 0;
      setWithResourcesDataIsSet(false);
      this.withResourcesData = false;
      setWithResourcesRecognitionIsSet(false);
      this.withResourcesRecognition = false;
      setWithResourcesAlternateDataIsSet(false);
      this.withResourcesAlternateData = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNoteGuid() {
      return this.noteGuid;
    }

    public void setNoteGuid(String noteGuid) {
      this.noteGuid = noteGuid;
    }

    public void unsetNoteGuid() {
      this.noteGuid = null;
    }

    /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuid() {
      return this.noteGuid != null;
    }

    public void setNoteGuidIsSet(boolean value) {
      if (!value) {
        this.noteGuid = null;
      }
    }

    public int getUpdateSequenceNum() {
      return this.updateSequenceNum;
    }

    public void setUpdateSequenceNum(int updateSequenceNum) {
      this.updateSequenceNum = updateSequenceNum;
      setUpdateSequenceNumIsSet(true);
    }

    public void unsetUpdateSequenceNum() {
      __isset_vector[__UPDATESEQUENCENUM_ISSET_ID] = false;
    }

    /** Returns true if field updateSequenceNum is set (has been asigned a value) and false otherwise */
    public boolean isSetUpdateSequenceNum() {
      return __isset_vector[__UPDATESEQUENCENUM_ISSET_ID];
    }

    public void setUpdateSequenceNumIsSet(boolean value) {
      __isset_vector[__UPDATESEQUENCENUM_ISSET_ID] = value;
    }

    public boolean isWithResourcesData() {
      return this.withResourcesData;
    }

    public void setWithResourcesData(boolean withResourcesData) {
      this.withResourcesData = withResourcesData;
      setWithResourcesDataIsSet(true);
    }

    public void unsetWithResourcesData() {
      __isset_vector[__WITHRESOURCESDATA_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesData() {
      return __isset_vector[__WITHRESOURCESDATA_ISSET_ID];
    }

    public void setWithResourcesDataIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESDATA_ISSET_ID] = value;
    }

    public boolean isWithResourcesRecognition() {
      return this.withResourcesRecognition;
    }

    public void setWithResourcesRecognition(boolean withResourcesRecognition) {
      this.withResourcesRecognition = withResourcesRecognition;
      setWithResourcesRecognitionIsSet(true);
    }

    public void unsetWithResourcesRecognition() {
      __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesRecognition is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesRecognition() {
      return __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID];
    }

    public void setWithResourcesRecognitionIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESRECOGNITION_ISSET_ID] = value;
    }

    public boolean isWithResourcesAlternateData() {
      return this.withResourcesAlternateData;
    }

    public void setWithResourcesAlternateData(boolean withResourcesAlternateData) {
      this.withResourcesAlternateData = withResourcesAlternateData;
      setWithResourcesAlternateDataIsSet(true);
    }

    public void unsetWithResourcesAlternateData() {
      __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID] = false;
    }

    /** Returns true if field withResourcesAlternateData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithResourcesAlternateData() {
      return __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID];
    }

    public void setWithResourcesAlternateDataIsSet(boolean value) {
      __isset_vector[__WITHRESOURCESALTERNATEDATA_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteVersion_args)
        return this.equals((getNoteVersion_args)that);
      return false;
    }

    public boolean equals(getNoteVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuid = true && this.isSetNoteGuid();
      boolean that_present_noteGuid = true && that.isSetNoteGuid();
      if (this_present_noteGuid || that_present_noteGuid) {
        if (!(this_present_noteGuid && that_present_noteGuid))
          return false;
        if (!this.noteGuid.equals(that.noteGuid))
          return false;
      }

      boolean this_present_updateSequenceNum = true;
      boolean that_present_updateSequenceNum = true;
      if (this_present_updateSequenceNum || that_present_updateSequenceNum) {
        if (!(this_present_updateSequenceNum && that_present_updateSequenceNum))
          return false;
        if (this.updateSequenceNum != that.updateSequenceNum)
          return false;
      }

      boolean this_present_withResourcesData = true;
      boolean that_present_withResourcesData = true;
      if (this_present_withResourcesData || that_present_withResourcesData) {
        if (!(this_present_withResourcesData && that_present_withResourcesData))
          return false;
        if (this.withResourcesData != that.withResourcesData)
          return false;
      }

      boolean this_present_withResourcesRecognition = true;
      boolean that_present_withResourcesRecognition = true;
      if (this_present_withResourcesRecognition || that_present_withResourcesRecognition) {
        if (!(this_present_withResourcesRecognition && that_present_withResourcesRecognition))
          return false;
        if (this.withResourcesRecognition != that.withResourcesRecognition)
          return false;
      }

      boolean this_present_withResourcesAlternateData = true;
      boolean that_present_withResourcesAlternateData = true;
      if (this_present_withResourcesAlternateData || that_present_withResourcesAlternateData) {
        if (!(this_present_withResourcesAlternateData && that_present_withResourcesAlternateData))
          return false;
        if (this.withResourcesAlternateData != that.withResourcesAlternateData)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNoteVersion_args other = (getNoteVersion_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNoteGuid(), other.isSetNoteGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuid()) {
        lastComparison = TBaseHelper.compareTo(this.noteGuid, other.noteGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUpdateSequenceNum(), other.isSetUpdateSequenceNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateSequenceNum()) {
        lastComparison = TBaseHelper.compareTo(this.updateSequenceNum, other.updateSequenceNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithResourcesData(), other.isSetWithResourcesData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesData()) {
        lastComparison = TBaseHelper.compareTo(this.withResourcesData, other.withResourcesData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithResourcesRecognition(), other.isSetWithResourcesRecognition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesRecognition()) {
        lastComparison = TBaseHelper.compareTo(this.withResourcesRecognition, other.withResourcesRecognition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithResourcesAlternateData(), other.isSetWithResourcesAlternateData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithResourcesAlternateData()) {
        lastComparison = TBaseHelper.compareTo(this.withResourcesAlternateData, other.withResourcesAlternateData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUID
            if (field.type == TType.STRING) {
              this.noteGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // UPDATE_SEQUENCE_NUM
            if (field.type == TType.I32) {
              this.updateSequenceNum = iprot.readI32();
              setUpdateSequenceNumIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // WITH_RESOURCES_DATA
            if (field.type == TType.BOOL) {
              this.withResourcesData = iprot.readBool();
              setWithResourcesDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // WITH_RESOURCES_RECOGNITION
            if (field.type == TType.BOOL) {
              this.withResourcesRecognition = iprot.readBool();
              setWithResourcesRecognitionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WITH_RESOURCES_ALTERNATE_DATA
            if (field.type == TType.BOOL) {
              this.withResourcesAlternateData = iprot.readBool();
              setWithResourcesAlternateDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuid != null) {
        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
        oprot.writeString(this.noteGuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATE_SEQUENCE_NUM_FIELD_DESC);
      oprot.writeI32(this.updateSequenceNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_DATA_FIELD_DESC);
      oprot.writeBool(this.withResourcesData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_RECOGNITION_FIELD_DESC);
      oprot.writeBool(this.withResourcesRecognition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RESOURCES_ALTERNATE_DATA_FIELD_DESC);
      oprot.writeBool(this.withResourcesAlternateData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNoteVersion_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuid:");
      if (this.noteGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateSequenceNum:");
      sb.append(this.updateSequenceNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesData:");
      sb.append(this.withResourcesData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesRecognition:");
      sb.append(this.withResourcesRecognition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withResourcesAlternateData:");
      sb.append(this.withResourcesAlternateData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNoteVersion_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNoteVersion_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Note success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getNoteVersion_result() {
    }

    public getNoteVersion_result(
      com.evernote.edam.type.Note success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNoteVersion_result(getNoteVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Note(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getNoteVersion_result deepCopy() {
      return new getNoteVersion_result(this);
    }

    public getNoteVersion_result clone() {
      return new getNoteVersion_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Note getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Note success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNoteVersion_result)
        return this.equals((getNoteVersion_result)that);
      return false;
    }

    public boolean equals(getNoteVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNoteVersion_result other = (getNoteVersion_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Note();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNoteVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResource_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResource_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
    private static final TField WITH_DATA_FIELD_DESC = new TField("withData", TType.BOOL, (short)3);
    private static final TField WITH_RECOGNITION_FIELD_DESC = new TField("withRecognition", TType.BOOL, (short)4);
    private static final TField WITH_ATTRIBUTES_FIELD_DESC = new TField("withAttributes", TType.BOOL, (short)5);
    private static final TField WITH_ALTERNATE_DATA_FIELD_DESC = new TField("withAlternateData", TType.BOOL, (short)6);

    private String authenticationToken;
    private String guid;
    private boolean withData;
    private boolean withRecognition;
    private boolean withAttributes;
    private boolean withAlternateData;

    // isset id assignments
    private static final int __WITHDATA_ISSET_ID = 0;
    private static final int __WITHRECOGNITION_ISSET_ID = 1;
    private static final int __WITHATTRIBUTES_ISSET_ID = 2;
    private static final int __WITHALTERNATEDATA_ISSET_ID = 3;
    private boolean[] __isset_vector = new boolean[4];

    public getResource_args() {
    }

    public getResource_args(
      String authenticationToken,
      String guid,
      boolean withData,
      boolean withRecognition,
      boolean withAttributes,
      boolean withAlternateData)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
      this.withData = withData;
      setWithDataIsSet(true);
      this.withRecognition = withRecognition;
      setWithRecognitionIsSet(true);
      this.withAttributes = withAttributes;
      setWithAttributesIsSet(true);
      this.withAlternateData = withAlternateData;
      setWithAlternateDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResource_args(getResource_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      this.withData = other.withData;
      this.withRecognition = other.withRecognition;
      this.withAttributes = other.withAttributes;
      this.withAlternateData = other.withAlternateData;
    }

    public getResource_args deepCopy() {
      return new getResource_args(this);
    }

    public getResource_args clone() {
      return new getResource_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
      setWithDataIsSet(false);
      this.withData = false;
      setWithRecognitionIsSet(false);
      this.withRecognition = false;
      setWithAttributesIsSet(false);
      this.withAttributes = false;
      setWithAlternateDataIsSet(false);
      this.withAlternateData = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean isWithData() {
      return this.withData;
    }

    public void setWithData(boolean withData) {
      this.withData = withData;
      setWithDataIsSet(true);
    }

    public void unsetWithData() {
      __isset_vector[__WITHDATA_ISSET_ID] = false;
    }

    /** Returns true if field withData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithData() {
      return __isset_vector[__WITHDATA_ISSET_ID];
    }

    public void setWithDataIsSet(boolean value) {
      __isset_vector[__WITHDATA_ISSET_ID] = value;
    }

    public boolean isWithRecognition() {
      return this.withRecognition;
    }

    public void setWithRecognition(boolean withRecognition) {
      this.withRecognition = withRecognition;
      setWithRecognitionIsSet(true);
    }

    public void unsetWithRecognition() {
      __isset_vector[__WITHRECOGNITION_ISSET_ID] = false;
    }

    /** Returns true if field withRecognition is set (has been asigned a value) and false otherwise */
    public boolean isSetWithRecognition() {
      return __isset_vector[__WITHRECOGNITION_ISSET_ID];
    }

    public void setWithRecognitionIsSet(boolean value) {
      __isset_vector[__WITHRECOGNITION_ISSET_ID] = value;
    }

    public boolean isWithAttributes() {
      return this.withAttributes;
    }

    public void setWithAttributes(boolean withAttributes) {
      this.withAttributes = withAttributes;
      setWithAttributesIsSet(true);
    }

    public void unsetWithAttributes() {
      __isset_vector[__WITHATTRIBUTES_ISSET_ID] = false;
    }

    /** Returns true if field withAttributes is set (has been asigned a value) and false otherwise */
    public boolean isSetWithAttributes() {
      return __isset_vector[__WITHATTRIBUTES_ISSET_ID];
    }

    public void setWithAttributesIsSet(boolean value) {
      __isset_vector[__WITHATTRIBUTES_ISSET_ID] = value;
    }

    public boolean isWithAlternateData() {
      return this.withAlternateData;
    }

    public void setWithAlternateData(boolean withAlternateData) {
      this.withAlternateData = withAlternateData;
      setWithAlternateDataIsSet(true);
    }

    public void unsetWithAlternateData() {
      __isset_vector[__WITHALTERNATEDATA_ISSET_ID] = false;
    }

    /** Returns true if field withAlternateData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithAlternateData() {
      return __isset_vector[__WITHALTERNATEDATA_ISSET_ID];
    }

    public void setWithAlternateDataIsSet(boolean value) {
      __isset_vector[__WITHALTERNATEDATA_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResource_args)
        return this.equals((getResource_args)that);
      return false;
    }

    public boolean equals(getResource_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_withData = true;
      boolean that_present_withData = true;
      if (this_present_withData || that_present_withData) {
        if (!(this_present_withData && that_present_withData))
          return false;
        if (this.withData != that.withData)
          return false;
      }

      boolean this_present_withRecognition = true;
      boolean that_present_withRecognition = true;
      if (this_present_withRecognition || that_present_withRecognition) {
        if (!(this_present_withRecognition && that_present_withRecognition))
          return false;
        if (this.withRecognition != that.withRecognition)
          return false;
      }

      boolean this_present_withAttributes = true;
      boolean that_present_withAttributes = true;
      if (this_present_withAttributes || that_present_withAttributes) {
        if (!(this_present_withAttributes && that_present_withAttributes))
          return false;
        if (this.withAttributes != that.withAttributes)
          return false;
      }

      boolean this_present_withAlternateData = true;
      boolean that_present_withAlternateData = true;
      if (this_present_withAlternateData || that_present_withAlternateData) {
        if (!(this_present_withAlternateData && that_present_withAlternateData))
          return false;
        if (this.withAlternateData != that.withAlternateData)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResource_args other = (getResource_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithData(), other.isSetWithData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithData()) {
        lastComparison = TBaseHelper.compareTo(this.withData, other.withData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithRecognition(), other.isSetWithRecognition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithRecognition()) {
        lastComparison = TBaseHelper.compareTo(this.withRecognition, other.withRecognition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithAttributes(), other.isSetWithAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithAttributes()) {
        lastComparison = TBaseHelper.compareTo(this.withAttributes, other.withAttributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithAlternateData(), other.isSetWithAlternateData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithAlternateData()) {
        lastComparison = TBaseHelper.compareTo(this.withAlternateData, other.withAlternateData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // WITH_DATA
            if (field.type == TType.BOOL) {
              this.withData = iprot.readBool();
              setWithDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // WITH_RECOGNITION
            if (field.type == TType.BOOL) {
              this.withRecognition = iprot.readBool();
              setWithRecognitionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // WITH_ATTRIBUTES
            if (field.type == TType.BOOL) {
              this.withAttributes = iprot.readBool();
              setWithAttributesIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WITH_ALTERNATE_DATA
            if (field.type == TType.BOOL) {
              this.withAlternateData = iprot.readBool();
              setWithAlternateDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITH_DATA_FIELD_DESC);
      oprot.writeBool(this.withData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RECOGNITION_FIELD_DESC);
      oprot.writeBool(this.withRecognition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_ATTRIBUTES_FIELD_DESC);
      oprot.writeBool(this.withAttributes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_ALTERNATE_DATA_FIELD_DESC);
      oprot.writeBool(this.withAlternateData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResource_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("withData:");
      sb.append(this.withData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withRecognition:");
      sb.append(this.withRecognition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withAttributes:");
      sb.append(this.withAttributes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withAlternateData:");
      sb.append(this.withAlternateData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResource_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResource_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Resource success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getResource_result() {
    }

    public getResource_result(
      com.evernote.edam.type.Resource success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResource_result(getResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Resource(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResource_result deepCopy() {
      return new getResource_result(this);
    }

    public getResource_result clone() {
      return new getResource_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Resource getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Resource success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResource_result)
        return this.equals((getResource_result)that);
      return false;
    }

    public boolean equals(getResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResource_result other = (getResource_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Resource();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateResource_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateResource_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField RESOURCE_FIELD_DESC = new TField("resource", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.Resource resource;

    // isset id assignments

    public updateResource_args() {
    }

    public updateResource_args(
      String authenticationToken,
      com.evernote.edam.type.Resource resource)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.resource = resource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateResource_args(updateResource_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetResource()) {
        this.resource = new com.evernote.edam.type.Resource(other.resource);
      }
    }

    public updateResource_args deepCopy() {
      return new updateResource_args(this);
    }

    public updateResource_args clone() {
      return new updateResource_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.resource = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.Resource getResource() {
      return this.resource;
    }

    public void setResource(com.evernote.edam.type.Resource resource) {
      this.resource = resource;
    }

    public void unsetResource() {
      this.resource = null;
    }

    /** Returns true if field resource is set (has been asigned a value) and false otherwise */
    public boolean isSetResource() {
      return this.resource != null;
    }

    public void setResourceIsSet(boolean value) {
      if (!value) {
        this.resource = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateResource_args)
        return this.equals((updateResource_args)that);
      return false;
    }

    public boolean equals(updateResource_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_resource = true && this.isSetResource();
      boolean that_present_resource = true && that.isSetResource();
      if (this_present_resource || that_present_resource) {
        if (!(this_present_resource && that_present_resource))
          return false;
        if (!this.resource.equals(that.resource))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateResource_args other = (updateResource_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetResource(), other.isSetResource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResource()) {
        lastComparison = this.resource.compareTo(other.resource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // RESOURCE
            if (field.type == TType.STRUCT) {
              this.resource = new com.evernote.edam.type.Resource();
              this.resource.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.resource != null) {
        oprot.writeFieldBegin(RESOURCE_FIELD_DESC);
        this.resource.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateResource_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resource:");
      if (this.resource == null) {
        sb.append("null");
      } else {
        sb.append(this.resource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateResource_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateResource_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateResource_result() {
    }

    public updateResource_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateResource_result(updateResource_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public updateResource_result deepCopy() {
      return new updateResource_result(this);
    }

    public updateResource_result clone() {
      return new updateResource_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateResource_result)
        return this.equals((updateResource_result)that);
      return false;
    }

    public boolean equals(updateResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateResource_result other = (updateResource_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateResource_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceData_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceData_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getResourceData_args() {
    }

    public getResourceData_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceData_args(getResourceData_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceData_args deepCopy() {
      return new getResourceData_args(this);
    }

    public getResourceData_args clone() {
      return new getResourceData_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceData_args)
        return this.equals((getResourceData_args)that);
      return false;
    }

    public boolean equals(getResourceData_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceData_args other = (getResourceData_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceData_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceData_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceData_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private byte[] success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getResourceData_result() {
    }

    public getResourceData_result(
      byte[] success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceData_result(getResourceData_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceData_result deepCopy() {
      return new getResourceData_result(this);
    }

    public getResourceData_result clone() {
      return new getResourceData_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceData_result)
        return this.equals((getResourceData_result)that);
      return false;
    }

    public boolean equals(getResourceData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceData_result other = (getResourceData_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceByHash_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceByHash_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)2);
    private static final TField CONTENT_HASH_FIELD_DESC = new TField("contentHash", TType.STRING, (short)3);
    private static final TField WITH_DATA_FIELD_DESC = new TField("withData", TType.BOOL, (short)4);
    private static final TField WITH_RECOGNITION_FIELD_DESC = new TField("withRecognition", TType.BOOL, (short)5);
    private static final TField WITH_ALTERNATE_DATA_FIELD_DESC = new TField("withAlternateData", TType.BOOL, (short)6);

    private String authenticationToken;
    private String noteGuid;
    private byte[] contentHash;
    private boolean withData;
    private boolean withRecognition;
    private boolean withAlternateData;

    // isset id assignments
    private static final int __WITHDATA_ISSET_ID = 0;
    private static final int __WITHRECOGNITION_ISSET_ID = 1;
    private static final int __WITHALTERNATEDATA_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public getResourceByHash_args() {
    }

    public getResourceByHash_args(
      String authenticationToken,
      String noteGuid,
      byte[] contentHash,
      boolean withData,
      boolean withRecognition,
      boolean withAlternateData)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.noteGuid = noteGuid;
      this.contentHash = contentHash;
      this.withData = withData;
      setWithDataIsSet(true);
      this.withRecognition = withRecognition;
      setWithRecognitionIsSet(true);
      this.withAlternateData = withAlternateData;
      setWithAlternateDataIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceByHash_args(getResourceByHash_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetNoteGuid()) {
        this.noteGuid = other.noteGuid;
      }
      if (other.isSetContentHash()) {
        this.contentHash = new byte[other.contentHash.length];
        System.arraycopy(other.contentHash, 0, contentHash, 0, other.contentHash.length);
      }
      this.withData = other.withData;
      this.withRecognition = other.withRecognition;
      this.withAlternateData = other.withAlternateData;
    }

    public getResourceByHash_args deepCopy() {
      return new getResourceByHash_args(this);
    }

    public getResourceByHash_args clone() {
      return new getResourceByHash_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.noteGuid = null;
      this.contentHash = null;
      setWithDataIsSet(false);
      this.withData = false;
      setWithRecognitionIsSet(false);
      this.withRecognition = false;
      setWithAlternateDataIsSet(false);
      this.withAlternateData = false;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getNoteGuid() {
      return this.noteGuid;
    }

    public void setNoteGuid(String noteGuid) {
      this.noteGuid = noteGuid;
    }

    public void unsetNoteGuid() {
      this.noteGuid = null;
    }

    /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteGuid() {
      return this.noteGuid != null;
    }

    public void setNoteGuidIsSet(boolean value) {
      if (!value) {
        this.noteGuid = null;
      }
    }

    public byte[] getContentHash() {
      return this.contentHash;
    }

    public void setContentHash(byte[] contentHash) {
      this.contentHash = contentHash;
    }

    public void unsetContentHash() {
      this.contentHash = null;
    }

    /** Returns true if field contentHash is set (has been asigned a value) and false otherwise */
    public boolean isSetContentHash() {
      return this.contentHash != null;
    }

    public void setContentHashIsSet(boolean value) {
      if (!value) {
        this.contentHash = null;
      }
    }

    public boolean isWithData() {
      return this.withData;
    }

    public void setWithData(boolean withData) {
      this.withData = withData;
      setWithDataIsSet(true);
    }

    public void unsetWithData() {
      __isset_vector[__WITHDATA_ISSET_ID] = false;
    }

    /** Returns true if field withData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithData() {
      return __isset_vector[__WITHDATA_ISSET_ID];
    }

    public void setWithDataIsSet(boolean value) {
      __isset_vector[__WITHDATA_ISSET_ID] = value;
    }

    public boolean isWithRecognition() {
      return this.withRecognition;
    }

    public void setWithRecognition(boolean withRecognition) {
      this.withRecognition = withRecognition;
      setWithRecognitionIsSet(true);
    }

    public void unsetWithRecognition() {
      __isset_vector[__WITHRECOGNITION_ISSET_ID] = false;
    }

    /** Returns true if field withRecognition is set (has been asigned a value) and false otherwise */
    public boolean isSetWithRecognition() {
      return __isset_vector[__WITHRECOGNITION_ISSET_ID];
    }

    public void setWithRecognitionIsSet(boolean value) {
      __isset_vector[__WITHRECOGNITION_ISSET_ID] = value;
    }

    public boolean isWithAlternateData() {
      return this.withAlternateData;
    }

    public void setWithAlternateData(boolean withAlternateData) {
      this.withAlternateData = withAlternateData;
      setWithAlternateDataIsSet(true);
    }

    public void unsetWithAlternateData() {
      __isset_vector[__WITHALTERNATEDATA_ISSET_ID] = false;
    }

    /** Returns true if field withAlternateData is set (has been asigned a value) and false otherwise */
    public boolean isSetWithAlternateData() {
      return __isset_vector[__WITHALTERNATEDATA_ISSET_ID];
    }

    public void setWithAlternateDataIsSet(boolean value) {
      __isset_vector[__WITHALTERNATEDATA_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceByHash_args)
        return this.equals((getResourceByHash_args)that);
      return false;
    }

    public boolean equals(getResourceByHash_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_noteGuid = true && this.isSetNoteGuid();
      boolean that_present_noteGuid = true && that.isSetNoteGuid();
      if (this_present_noteGuid || that_present_noteGuid) {
        if (!(this_present_noteGuid && that_present_noteGuid))
          return false;
        if (!this.noteGuid.equals(that.noteGuid))
          return false;
      }

      boolean this_present_contentHash = true && this.isSetContentHash();
      boolean that_present_contentHash = true && that.isSetContentHash();
      if (this_present_contentHash || that_present_contentHash) {
        if (!(this_present_contentHash && that_present_contentHash))
          return false;
        if (TBaseHelper.compareTo(this.contentHash, that.contentHash) != 0)
          return false;
      }

      boolean this_present_withData = true;
      boolean that_present_withData = true;
      if (this_present_withData || that_present_withData) {
        if (!(this_present_withData && that_present_withData))
          return false;
        if (this.withData != that.withData)
          return false;
      }

      boolean this_present_withRecognition = true;
      boolean that_present_withRecognition = true;
      if (this_present_withRecognition || that_present_withRecognition) {
        if (!(this_present_withRecognition && that_present_withRecognition))
          return false;
        if (this.withRecognition != that.withRecognition)
          return false;
      }

      boolean this_present_withAlternateData = true;
      boolean that_present_withAlternateData = true;
      if (this_present_withAlternateData || that_present_withAlternateData) {
        if (!(this_present_withAlternateData && that_present_withAlternateData))
          return false;
        if (this.withAlternateData != that.withAlternateData)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceByHash_args other = (getResourceByHash_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNoteGuid(), other.isSetNoteGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteGuid()) {
        lastComparison = TBaseHelper.compareTo(this.noteGuid, other.noteGuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContentHash(), other.isSetContentHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContentHash()) {
        lastComparison = TBaseHelper.compareTo(this.contentHash, other.contentHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithData(), other.isSetWithData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithData()) {
        lastComparison = TBaseHelper.compareTo(this.withData, other.withData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithRecognition(), other.isSetWithRecognition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithRecognition()) {
        lastComparison = TBaseHelper.compareTo(this.withRecognition, other.withRecognition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWithAlternateData(), other.isSetWithAlternateData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWithAlternateData()) {
        lastComparison = TBaseHelper.compareTo(this.withAlternateData, other.withAlternateData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_GUID
            if (field.type == TType.STRING) {
              this.noteGuid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTENT_HASH
            if (field.type == TType.STRING) {
              this.contentHash = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // WITH_DATA
            if (field.type == TType.BOOL) {
              this.withData = iprot.readBool();
              setWithDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // WITH_RECOGNITION
            if (field.type == TType.BOOL) {
              this.withRecognition = iprot.readBool();
              setWithRecognitionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // WITH_ALTERNATE_DATA
            if (field.type == TType.BOOL) {
              this.withAlternateData = iprot.readBool();
              setWithAlternateDataIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.noteGuid != null) {
        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
        oprot.writeString(this.noteGuid);
        oprot.writeFieldEnd();
      }
      if (this.contentHash != null) {
        oprot.writeFieldBegin(CONTENT_HASH_FIELD_DESC);
        oprot.writeBinary(this.contentHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WITH_DATA_FIELD_DESC);
      oprot.writeBool(this.withData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_RECOGNITION_FIELD_DESC);
      oprot.writeBool(this.withRecognition);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WITH_ALTERNATE_DATA_FIELD_DESC);
      oprot.writeBool(this.withAlternateData);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceByHash_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteGuid:");
      if (this.noteGuid == null) {
        sb.append("null");
      } else {
        sb.append(this.noteGuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contentHash:");
      if (this.contentHash == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.contentHash, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("withData:");
      sb.append(this.withData);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withRecognition:");
      sb.append(this.withRecognition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("withAlternateData:");
      sb.append(this.withAlternateData);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceByHash_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceByHash_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.Resource success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getResourceByHash_result() {
    }

    public getResourceByHash_result(
      com.evernote.edam.type.Resource success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceByHash_result(getResourceByHash_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Resource(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceByHash_result deepCopy() {
      return new getResourceByHash_result(this);
    }

    public getResourceByHash_result clone() {
      return new getResourceByHash_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Resource getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Resource success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceByHash_result)
        return this.equals((getResourceByHash_result)that);
      return false;
    }

    public boolean equals(getResourceByHash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceByHash_result other = (getResourceByHash_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Resource();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceByHash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceRecognition_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceRecognition_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getResourceRecognition_args() {
    }

    public getResourceRecognition_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceRecognition_args(getResourceRecognition_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceRecognition_args deepCopy() {
      return new getResourceRecognition_args(this);
    }

    public getResourceRecognition_args clone() {
      return new getResourceRecognition_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceRecognition_args)
        return this.equals((getResourceRecognition_args)that);
      return false;
    }

    public boolean equals(getResourceRecognition_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceRecognition_args other = (getResourceRecognition_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceRecognition_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceRecognition_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceRecognition_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private byte[] success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getResourceRecognition_result() {
    }

    public getResourceRecognition_result(
      byte[] success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceRecognition_result(getResourceRecognition_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceRecognition_result deepCopy() {
      return new getResourceRecognition_result(this);
    }

    public getResourceRecognition_result clone() {
      return new getResourceRecognition_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceRecognition_result)
        return this.equals((getResourceRecognition_result)that);
      return false;
    }

    public boolean equals(getResourceRecognition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceRecognition_result other = (getResourceRecognition_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceRecognition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceAlternateData_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceAlternateData_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getResourceAlternateData_args() {
    }

    public getResourceAlternateData_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceAlternateData_args(getResourceAlternateData_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceAlternateData_args deepCopy() {
      return new getResourceAlternateData_args(this);
    }

    public getResourceAlternateData_args clone() {
      return new getResourceAlternateData_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceAlternateData_args)
        return this.equals((getResourceAlternateData_args)that);
      return false;
    }

    public boolean equals(getResourceAlternateData_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceAlternateData_args other = (getResourceAlternateData_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceAlternateData_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceAlternateData_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceAlternateData_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private byte[] success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getResourceAlternateData_result() {
    }

    public getResourceAlternateData_result(
      byte[] success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceAlternateData_result(getResourceAlternateData_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceAlternateData_result deepCopy() {
      return new getResourceAlternateData_result(this);
    }

    public getResourceAlternateData_result clone() {
      return new getResourceAlternateData_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceAlternateData_result)
        return this.equals((getResourceAlternateData_result)that);
      return false;
    }

    public boolean equals(getResourceAlternateData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceAlternateData_result other = (getResourceAlternateData_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceAlternateData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceAttributes_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceAttributes_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public getResourceAttributes_args() {
    }

    public getResourceAttributes_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceAttributes_args(getResourceAttributes_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public getResourceAttributes_args deepCopy() {
      return new getResourceAttributes_args(this);
    }

    public getResourceAttributes_args clone() {
      return new getResourceAttributes_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceAttributes_args)
        return this.equals((getResourceAttributes_args)that);
      return false;
    }

    public boolean equals(getResourceAttributes_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceAttributes_args other = (getResourceAttributes_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceAttributes_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getResourceAttributes_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getResourceAttributes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.ResourceAttributes success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getResourceAttributes_result() {
    }

    public getResourceAttributes_result(
      com.evernote.edam.type.ResourceAttributes success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceAttributes_result(getResourceAttributes_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.ResourceAttributes(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getResourceAttributes_result deepCopy() {
      return new getResourceAttributes_result(this);
    }

    public getResourceAttributes_result clone() {
      return new getResourceAttributes_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.ResourceAttributes getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.ResourceAttributes success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceAttributes_result)
        return this.equals((getResourceAttributes_result)that);
      return false;
    }

    public boolean equals(getResourceAttributes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getResourceAttributes_result other = (getResourceAttributes_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.ResourceAttributes();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getResourceAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAccountSize_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAccountSize_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public getAccountSize_args() {
    }

    public getAccountSize_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountSize_args(getAccountSize_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public getAccountSize_args deepCopy() {
      return new getAccountSize_args(this);
    }

    public getAccountSize_args clone() {
      return new getAccountSize_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountSize_args)
        return this.equals((getAccountSize_args)that);
      return false;
    }

    public boolean equals(getAccountSize_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAccountSize_args other = (getAccountSize_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAccountSize_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAccountSize_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAccountSize_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private long success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getAccountSize_result() {
    }

    public getAccountSize_result(
      long success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAccountSize_result(getAccountSize_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getAccountSize_result deepCopy() {
      return new getAccountSize_result(this);
    }

    public getAccountSize_result clone() {
      return new getAccountSize_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.systemException = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAccountSize_result)
        return this.equals((getAccountSize_result)that);
      return false;
    }

    public boolean equals(getAccountSize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAccountSize_result other = (getAccountSize_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAccountSize_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAds_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField AD_PARAMETERS_FIELD_DESC = new TField("adParameters", TType.STRUCT, (short)2);

    private String authenticationToken;
    private AdParameters adParameters;

    // isset id assignments

    public getAds_args() {
    }

    public getAds_args(
      String authenticationToken,
      AdParameters adParameters)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.adParameters = adParameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAds_args(getAds_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetAdParameters()) {
        this.adParameters = new AdParameters(other.adParameters);
      }
    }

    public getAds_args deepCopy() {
      return new getAds_args(this);
    }

    public getAds_args clone() {
      return new getAds_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.adParameters = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public AdParameters getAdParameters() {
      return this.adParameters;
    }

    public void setAdParameters(AdParameters adParameters) {
      this.adParameters = adParameters;
    }

    public void unsetAdParameters() {
      this.adParameters = null;
    }

    /** Returns true if field adParameters is set (has been asigned a value) and false otherwise */
    public boolean isSetAdParameters() {
      return this.adParameters != null;
    }

    public void setAdParametersIsSet(boolean value) {
      if (!value) {
        this.adParameters = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAds_args)
        return this.equals((getAds_args)that);
      return false;
    }

    public boolean equals(getAds_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_adParameters = true && this.isSetAdParameters();
      boolean that_present_adParameters = true && that.isSetAdParameters();
      if (this_present_adParameters || that_present_adParameters) {
        if (!(this_present_adParameters && that_present_adParameters))
          return false;
        if (!this.adParameters.equals(that.adParameters))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAds_args other = (getAds_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAdParameters(), other.isSetAdParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdParameters()) {
        lastComparison = this.adParameters.compareTo(other.adParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AD_PARAMETERS
            if (field.type == TType.STRUCT) {
              this.adParameters = new AdParameters();
              this.adParameters.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.adParameters != null) {
        oprot.writeFieldBegin(AD_PARAMETERS_FIELD_DESC);
        this.adParameters.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAds_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adParameters:");
      if (this.adParameters == null) {
        sb.append("null");
      } else {
        sb.append(this.adParameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private Vector success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public getAds_result() {
    }

    public getAds_result(
      Vector success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAds_result(getAds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          com.evernote.edam.type.Ad other_element = (com.evernote.edam.type.Ad)other_enum.nextElement();
          __this__success.addElement(new com.evernote.edam.type.Ad(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getAds_result deepCopy() {
      return new getAds_result(this);
    }

    public getAds_result clone() {
      return new getAds_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(com.evernote.edam.type.Ad elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAds_result)
        return this.equals((getAds_result)that);
      return false;
    }

    public boolean equals(getAds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAds_result other = (getAds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list131 = iprot.readListBegin();
                this.success = new Vector(_list131.size);
                for (int _i132 = 0; _i132 < _list131.size; ++_i132)
                {
                  com.evernote.edam.type.Ad _elem133;
                  _elem133 = new com.evernote.edam.type.Ad();
                  _elem133.read(iprot);
                  this.success.addElement(_elem133);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter134_enum = this.success.elements(); _iter134_enum.hasMoreElements(); )           {
            com.evernote.edam.type.Ad _iter134 = (com.evernote.edam.type.Ad)_iter134_enum.nextElement();
            _iter134.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRandomAd_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRandomAd_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField AD_PARAMETERS_FIELD_DESC = new TField("adParameters", TType.STRUCT, (short)2);

    private String authenticationToken;
    private AdParameters adParameters;

    // isset id assignments

    public getRandomAd_args() {
    }

    public getRandomAd_args(
      String authenticationToken,
      AdParameters adParameters)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.adParameters = adParameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRandomAd_args(getRandomAd_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetAdParameters()) {
        this.adParameters = new AdParameters(other.adParameters);
      }
    }

    public getRandomAd_args deepCopy() {
      return new getRandomAd_args(this);
    }

    public getRandomAd_args clone() {
      return new getRandomAd_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.adParameters = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public AdParameters getAdParameters() {
      return this.adParameters;
    }

    public void setAdParameters(AdParameters adParameters) {
      this.adParameters = adParameters;
    }

    public void unsetAdParameters() {
      this.adParameters = null;
    }

    /** Returns true if field adParameters is set (has been asigned a value) and false otherwise */
    public boolean isSetAdParameters() {
      return this.adParameters != null;
    }

    public void setAdParametersIsSet(boolean value) {
      if (!value) {
        this.adParameters = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRandomAd_args)
        return this.equals((getRandomAd_args)that);
      return false;
    }

    public boolean equals(getRandomAd_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_adParameters = true && this.isSetAdParameters();
      boolean that_present_adParameters = true && that.isSetAdParameters();
      if (this_present_adParameters || that_present_adParameters) {
        if (!(this_present_adParameters && that_present_adParameters))
          return false;
        if (!this.adParameters.equals(that.adParameters))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRandomAd_args other = (getRandomAd_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAdParameters(), other.isSetAdParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdParameters()) {
        lastComparison = this.adParameters.compareTo(other.adParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AD_PARAMETERS
            if (field.type == TType.STRUCT) {
              this.adParameters = new AdParameters();
              this.adParameters.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.adParameters != null) {
        oprot.writeFieldBegin(AD_PARAMETERS_FIELD_DESC);
        this.adParameters.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRandomAd_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adParameters:");
      if (this.adParameters == null) {
        sb.append("null");
      } else {
        sb.append(this.adParameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRandomAd_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRandomAd_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.Ad success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public getRandomAd_result() {
    }

    public getRandomAd_result(
      com.evernote.edam.type.Ad success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRandomAd_result(getRandomAd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Ad(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getRandomAd_result deepCopy() {
      return new getRandomAd_result(this);
    }

    public getRandomAd_result clone() {
      return new getRandomAd_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.Ad getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Ad success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRandomAd_result)
        return this.equals((getRandomAd_result)that);
      return false;
    }

    public boolean equals(getRandomAd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRandomAd_result other = (getRandomAd_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Ad();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRandomAd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPublicNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPublicNotebook_args");

    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.I32, (short)1);
    private static final TField PUBLIC_URI_FIELD_DESC = new TField("publicUri", TType.STRING, (short)2);

    private int userId;
    private String publicUri;

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getPublicNotebook_args() {
    }

    public getPublicNotebook_args(
      int userId,
      String publicUri)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.publicUri = publicUri;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicNotebook_args(getPublicNotebook_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.userId = other.userId;
      if (other.isSetPublicUri()) {
        this.publicUri = other.publicUri;
      }
    }

    public getPublicNotebook_args deepCopy() {
      return new getPublicNotebook_args(this);
    }

    public getPublicNotebook_args clone() {
      return new getPublicNotebook_args(this);
    }

    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      this.publicUri = null;
    }

    public int getUserId() {
      return this.userId;
    }

    public void setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
    }

    public void unsetUserId() {
      __isset_vector[__USERID_ISSET_ID] = false;
    }

    /** Returns true if field userId is set (has been asigned a value) and false otherwise */
    public boolean isSetUserId() {
      return __isset_vector[__USERID_ISSET_ID];
    }

    public void setUserIdIsSet(boolean value) {
      __isset_vector[__USERID_ISSET_ID] = value;
    }

    public String getPublicUri() {
      return this.publicUri;
    }

    public void setPublicUri(String publicUri) {
      this.publicUri = publicUri;
    }

    public void unsetPublicUri() {
      this.publicUri = null;
    }

    /** Returns true if field publicUri is set (has been asigned a value) and false otherwise */
    public boolean isSetPublicUri() {
      return this.publicUri != null;
    }

    public void setPublicUriIsSet(boolean value) {
      if (!value) {
        this.publicUri = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicNotebook_args)
        return this.equals((getPublicNotebook_args)that);
      return false;
    }

    public boolean equals(getPublicNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_publicUri = true && this.isSetPublicUri();
      boolean that_present_publicUri = true && that.isSetPublicUri();
      if (this_present_publicUri || that_present_publicUri) {
        if (!(this_present_publicUri && that_present_publicUri))
          return false;
        if (!this.publicUri.equals(that.publicUri))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPublicNotebook_args other = (getPublicNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserId(), other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPublicUri(), other.isSetPublicUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicUri()) {
        lastComparison = TBaseHelper.compareTo(this.publicUri, other.publicUri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == TType.I32) {
              this.userId = iprot.readI32();
              setUserIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PUBLIC_URI
            if (field.type == TType.STRING) {
              this.publicUri = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(this.userId);
      oprot.writeFieldEnd();
      if (this.publicUri != null) {
        oprot.writeFieldBegin(PUBLIC_URI_FIELD_DESC);
        oprot.writeString(this.publicUri);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPublicNotebook_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicUri:");
      if (this.publicUri == null) {
        sb.append("null");
      } else {
        sb.append(this.publicUri);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPublicNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPublicNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.Notebook success;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;

    // isset id assignments

    public getPublicNotebook_result() {
    }

    public getPublicNotebook_result(
      com.evernote.edam.type.Notebook success,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
      this.notFoundException = notFoundException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicNotebook_result(getPublicNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.Notebook(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
    }

    public getPublicNotebook_result deepCopy() {
      return new getPublicNotebook_result(this);
    }

    public getPublicNotebook_result clone() {
      return new getPublicNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.systemException = null;
      this.notFoundException = null;
    }

    public com.evernote.edam.type.Notebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.Notebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicNotebook_result)
        return this.equals((getPublicNotebook_result)that);
      return false;
    }

    public boolean equals(getPublicNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPublicNotebook_result other = (getPublicNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.Notebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPublicNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSharedNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createSharedNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField SHARED_NOTEBOOK_FIELD_DESC = new TField("sharedNotebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.SharedNotebook sharedNotebook;

    // isset id assignments

    public createSharedNotebook_args() {
    }

    public createSharedNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.SharedNotebook sharedNotebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.sharedNotebook = sharedNotebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSharedNotebook_args(createSharedNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetSharedNotebook()) {
        this.sharedNotebook = new com.evernote.edam.type.SharedNotebook(other.sharedNotebook);
      }
    }

    public createSharedNotebook_args deepCopy() {
      return new createSharedNotebook_args(this);
    }

    public createSharedNotebook_args clone() {
      return new createSharedNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.sharedNotebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.SharedNotebook getSharedNotebook() {
      return this.sharedNotebook;
    }

    public void setSharedNotebook(com.evernote.edam.type.SharedNotebook sharedNotebook) {
      this.sharedNotebook = sharedNotebook;
    }

    public void unsetSharedNotebook() {
      this.sharedNotebook = null;
    }

    /** Returns true if field sharedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetSharedNotebook() {
      return this.sharedNotebook != null;
    }

    public void setSharedNotebookIsSet(boolean value) {
      if (!value) {
        this.sharedNotebook = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSharedNotebook_args)
        return this.equals((createSharedNotebook_args)that);
      return false;
    }

    public boolean equals(createSharedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_sharedNotebook = true && this.isSetSharedNotebook();
      boolean that_present_sharedNotebook = true && that.isSetSharedNotebook();
      if (this_present_sharedNotebook || that_present_sharedNotebook) {
        if (!(this_present_sharedNotebook && that_present_sharedNotebook))
          return false;
        if (!this.sharedNotebook.equals(that.sharedNotebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createSharedNotebook_args other = (createSharedNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSharedNotebook(), other.isSetSharedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSharedNotebook()) {
        lastComparison = this.sharedNotebook.compareTo(other.sharedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SHARED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.sharedNotebook = new com.evernote.edam.type.SharedNotebook();
              this.sharedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.sharedNotebook != null) {
        oprot.writeFieldBegin(SHARED_NOTEBOOK_FIELD_DESC);
        this.sharedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createSharedNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sharedNotebook:");
      if (this.sharedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.sharedNotebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSharedNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createSharedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.SharedNotebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public createSharedNotebook_result() {
    }

    public createSharedNotebook_result(
      com.evernote.edam.type.SharedNotebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSharedNotebook_result(createSharedNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.SharedNotebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public createSharedNotebook_result deepCopy() {
      return new createSharedNotebook_result(this);
    }

    public createSharedNotebook_result clone() {
      return new createSharedNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.SharedNotebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.SharedNotebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSharedNotebook_result)
        return this.equals((createSharedNotebook_result)that);
      return false;
    }

    public boolean equals(createSharedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createSharedNotebook_result other = (createSharedNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.SharedNotebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createSharedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listSharedNotebooks_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listSharedNotebooks_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public listSharedNotebooks_args() {
    }

    public listSharedNotebooks_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSharedNotebooks_args(listSharedNotebooks_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listSharedNotebooks_args deepCopy() {
      return new listSharedNotebooks_args(this);
    }

    public listSharedNotebooks_args clone() {
      return new listSharedNotebooks_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSharedNotebooks_args)
        return this.equals((listSharedNotebooks_args)that);
      return false;
    }

    public boolean equals(listSharedNotebooks_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listSharedNotebooks_args other = (listSharedNotebooks_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listSharedNotebooks_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listSharedNotebooks_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listSharedNotebooks_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private Vector success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public listSharedNotebooks_result() {
    }

    public listSharedNotebooks_result(
      Vector success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listSharedNotebooks_result(listSharedNotebooks_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          com.evernote.edam.type.SharedNotebook other_element = (com.evernote.edam.type.SharedNotebook)other_enum.nextElement();
          __this__success.addElement(new com.evernote.edam.type.SharedNotebook(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listSharedNotebooks_result deepCopy() {
      return new listSharedNotebooks_result(this);
    }

    public listSharedNotebooks_result clone() {
      return new listSharedNotebooks_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(com.evernote.edam.type.SharedNotebook elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listSharedNotebooks_result)
        return this.equals((listSharedNotebooks_result)that);
      return false;
    }

    public boolean equals(listSharedNotebooks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listSharedNotebooks_result other = (listSharedNotebooks_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list135 = iprot.readListBegin();
                this.success = new Vector(_list135.size);
                for (int _i136 = 0; _i136 < _list135.size; ++_i136)
                {
                  com.evernote.edam.type.SharedNotebook _elem137;
                  _elem137 = new com.evernote.edam.type.SharedNotebook();
                  _elem137.read(iprot);
                  this.success.addElement(_elem137);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter138_enum = this.success.elements(); _iter138_enum.hasMoreElements(); )           {
            com.evernote.edam.type.SharedNotebook _iter138 = (com.evernote.edam.type.SharedNotebook)_iter138_enum.nextElement();
            _iter138.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listSharedNotebooks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeSharedNotebooks_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeSharedNotebooks_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField SHARED_NOTEBOOK_IDS_FIELD_DESC = new TField("sharedNotebookIds", TType.LIST, (short)2);

    private String authenticationToken;
    private Vector sharedNotebookIds;

    // isset id assignments

    public expungeSharedNotebooks_args() {
    }

    public expungeSharedNotebooks_args(
      String authenticationToken,
      Vector sharedNotebookIds)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.sharedNotebookIds = sharedNotebookIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeSharedNotebooks_args(expungeSharedNotebooks_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetSharedNotebookIds()) {
        Vector __this__sharedNotebookIds = new Vector();
        for (Enumeration other_enum = other.sharedNotebookIds.elements(); other_enum.hasMoreElements(); ) {
          Long other_element = (Long)other_enum.nextElement();
          __this__sharedNotebookIds.addElement(other_element);
        }
        this.sharedNotebookIds = __this__sharedNotebookIds;
      }
    }

    public expungeSharedNotebooks_args deepCopy() {
      return new expungeSharedNotebooks_args(this);
    }

    public expungeSharedNotebooks_args clone() {
      return new expungeSharedNotebooks_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.sharedNotebookIds = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public int getSharedNotebookIdsSize() {
      return (this.sharedNotebookIds == null) ? 0 : this.sharedNotebookIds.size();
    }

    public Enumeration getSharedNotebookIdsEnumeration() {
      return (this.sharedNotebookIds == null) ? null : this.sharedNotebookIds.elements();
    }

    public void addToSharedNotebookIds(long elem) {
      if (this.sharedNotebookIds == null) {
        this.sharedNotebookIds = new Vector();
      }
      this.sharedNotebookIds.addElement(new Long(elem));
    }

    public Vector getSharedNotebookIds() {
      return this.sharedNotebookIds;
    }

    public void setSharedNotebookIds(Vector sharedNotebookIds) {
      this.sharedNotebookIds = sharedNotebookIds;
    }

    public void unsetSharedNotebookIds() {
      this.sharedNotebookIds = null;
    }

    /** Returns true if field sharedNotebookIds is set (has been asigned a value) and false otherwise */
    public boolean isSetSharedNotebookIds() {
      return this.sharedNotebookIds != null;
    }

    public void setSharedNotebookIdsIsSet(boolean value) {
      if (!value) {
        this.sharedNotebookIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeSharedNotebooks_args)
        return this.equals((expungeSharedNotebooks_args)that);
      return false;
    }

    public boolean equals(expungeSharedNotebooks_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_sharedNotebookIds = true && this.isSetSharedNotebookIds();
      boolean that_present_sharedNotebookIds = true && that.isSetSharedNotebookIds();
      if (this_present_sharedNotebookIds || that_present_sharedNotebookIds) {
        if (!(this_present_sharedNotebookIds && that_present_sharedNotebookIds))
          return false;
        if (!this.sharedNotebookIds.equals(that.sharedNotebookIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeSharedNotebooks_args other = (expungeSharedNotebooks_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSharedNotebookIds(), other.isSetSharedNotebookIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSharedNotebookIds()) {
        lastComparison = TBaseHelper.compareTo(this.sharedNotebookIds, other.sharedNotebookIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SHARED_NOTEBOOK_IDS
            if (field.type == TType.LIST) {
              {
                TList _list139 = iprot.readListBegin();
                this.sharedNotebookIds = new Vector(_list139.size);
                for (int _i140 = 0; _i140 < _list139.size; ++_i140)
                {
                  long _elem141;
                  _elem141 = iprot.readI64();
                  this.sharedNotebookIds.addElement(new Long(_elem141));
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.sharedNotebookIds != null) {
        oprot.writeFieldBegin(SHARED_NOTEBOOK_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I64, this.sharedNotebookIds.size()));
          for (Enumeration _iter142_enum = this.sharedNotebookIds.elements(); _iter142_enum.hasMoreElements(); )           {
            Long _iter142 = (Long)_iter142_enum.nextElement();
            oprot.writeI64(_iter142);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeSharedNotebooks_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sharedNotebookIds:");
      if (this.sharedNotebookIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sharedNotebookIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeSharedNotebooks_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeSharedNotebooks_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public expungeSharedNotebooks_result() {
    }

    public expungeSharedNotebooks_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeSharedNotebooks_result(expungeSharedNotebooks_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public expungeSharedNotebooks_result deepCopy() {
      return new expungeSharedNotebooks_result(this);
    }

    public expungeSharedNotebooks_result clone() {
      return new expungeSharedNotebooks_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeSharedNotebooks_result)
        return this.equals((expungeSharedNotebooks_result)that);
      return false;
    }

    public boolean equals(expungeSharedNotebooks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeSharedNotebooks_result other = (expungeSharedNotebooks_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeSharedNotebooks_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createLinkedNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createLinkedNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.LinkedNotebook linkedNotebook;

    // isset id assignments

    public createLinkedNotebook_args() {
    }

    public createLinkedNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.LinkedNotebook linkedNotebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.linkedNotebook = linkedNotebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLinkedNotebook_args(createLinkedNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetLinkedNotebook()) {
        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
      }
    }

    public createLinkedNotebook_args deepCopy() {
      return new createLinkedNotebook_args(this);
    }

    public createLinkedNotebook_args clone() {
      return new createLinkedNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.linkedNotebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
      return this.linkedNotebook;
    }

    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
      this.linkedNotebook = linkedNotebook;
    }

    public void unsetLinkedNotebook() {
      this.linkedNotebook = null;
    }

    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetLinkedNotebook() {
      return this.linkedNotebook != null;
    }

    public void setLinkedNotebookIsSet(boolean value) {
      if (!value) {
        this.linkedNotebook = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLinkedNotebook_args)
        return this.equals((createLinkedNotebook_args)that);
      return false;
    }

    public boolean equals(createLinkedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
      if (this_present_linkedNotebook || that_present_linkedNotebook) {
        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
          return false;
        if (!this.linkedNotebook.equals(that.linkedNotebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createLinkedNotebook_args other = (createLinkedNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLinkedNotebook(), other.isSetLinkedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedNotebook()) {
        lastComparison = this.linkedNotebook.compareTo(other.linkedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LINKED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
              this.linkedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.linkedNotebook != null) {
        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
        this.linkedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createLinkedNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedNotebook:");
      if (this.linkedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedNotebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createLinkedNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createLinkedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.LinkedNotebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public createLinkedNotebook_result() {
    }

    public createLinkedNotebook_result(
      com.evernote.edam.type.LinkedNotebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createLinkedNotebook_result(createLinkedNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.LinkedNotebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public createLinkedNotebook_result deepCopy() {
      return new createLinkedNotebook_result(this);
    }

    public createLinkedNotebook_result clone() {
      return new createLinkedNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.LinkedNotebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.LinkedNotebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createLinkedNotebook_result)
        return this.equals((createLinkedNotebook_result)that);
      return false;
    }

    public boolean equals(createLinkedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createLinkedNotebook_result other = (createLinkedNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.LinkedNotebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createLinkedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateLinkedNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateLinkedNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);

    private String authenticationToken;
    private com.evernote.edam.type.LinkedNotebook linkedNotebook;

    // isset id assignments

    public updateLinkedNotebook_args() {
    }

    public updateLinkedNotebook_args(
      String authenticationToken,
      com.evernote.edam.type.LinkedNotebook linkedNotebook)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.linkedNotebook = linkedNotebook;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLinkedNotebook_args(updateLinkedNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetLinkedNotebook()) {
        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
      }
    }

    public updateLinkedNotebook_args deepCopy() {
      return new updateLinkedNotebook_args(this);
    }

    public updateLinkedNotebook_args clone() {
      return new updateLinkedNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.linkedNotebook = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
      return this.linkedNotebook;
    }

    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
      this.linkedNotebook = linkedNotebook;
    }

    public void unsetLinkedNotebook() {
      this.linkedNotebook = null;
    }

    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
    public boolean isSetLinkedNotebook() {
      return this.linkedNotebook != null;
    }

    public void setLinkedNotebookIsSet(boolean value) {
      if (!value) {
        this.linkedNotebook = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLinkedNotebook_args)
        return this.equals((updateLinkedNotebook_args)that);
      return false;
    }

    public boolean equals(updateLinkedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
      if (this_present_linkedNotebook || that_present_linkedNotebook) {
        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
          return false;
        if (!this.linkedNotebook.equals(that.linkedNotebook))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateLinkedNotebook_args other = (updateLinkedNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLinkedNotebook(), other.isSetLinkedNotebook());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedNotebook()) {
        lastComparison = this.linkedNotebook.compareTo(other.linkedNotebook);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LINKED_NOTEBOOK
            if (field.type == TType.STRUCT) {
              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
              this.linkedNotebook.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.linkedNotebook != null) {
        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
        this.linkedNotebook.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateLinkedNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedNotebook:");
      if (this.linkedNotebook == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedNotebook);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateLinkedNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateLinkedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateLinkedNotebook_result() {
    }

    public updateLinkedNotebook_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateLinkedNotebook_result(updateLinkedNotebook_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public updateLinkedNotebook_result deepCopy() {
      return new updateLinkedNotebook_result(this);
    }

    public updateLinkedNotebook_result clone() {
      return new updateLinkedNotebook_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateLinkedNotebook_result)
        return this.equals((updateLinkedNotebook_result)that);
      return false;
    }

    public boolean equals(updateLinkedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateLinkedNotebook_result other = (updateLinkedNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateLinkedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listLinkedNotebooks_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listLinkedNotebooks_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public listLinkedNotebooks_args() {
    }

    public listLinkedNotebooks_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLinkedNotebooks_args(listLinkedNotebooks_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public listLinkedNotebooks_args deepCopy() {
      return new listLinkedNotebooks_args(this);
    }

    public listLinkedNotebooks_args clone() {
      return new listLinkedNotebooks_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listLinkedNotebooks_args)
        return this.equals((listLinkedNotebooks_args)that);
      return false;
    }

    public boolean equals(listLinkedNotebooks_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listLinkedNotebooks_args other = (listLinkedNotebooks_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listLinkedNotebooks_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class listLinkedNotebooks_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("listLinkedNotebooks_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private Vector success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public listLinkedNotebooks_result() {
    }

    public listLinkedNotebooks_result(
      Vector success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listLinkedNotebooks_result(listLinkedNotebooks_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          com.evernote.edam.type.LinkedNotebook other_element = (com.evernote.edam.type.LinkedNotebook)other_enum.nextElement();
          __this__success.addElement(new com.evernote.edam.type.LinkedNotebook(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public listLinkedNotebooks_result deepCopy() {
      return new listLinkedNotebooks_result(this);
    }

    public listLinkedNotebooks_result clone() {
      return new listLinkedNotebooks_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(com.evernote.edam.type.LinkedNotebook elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listLinkedNotebooks_result)
        return this.equals((listLinkedNotebooks_result)that);
      return false;
    }

    public boolean equals(listLinkedNotebooks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      listLinkedNotebooks_result other = (listLinkedNotebooks_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list143 = iprot.readListBegin();
                this.success = new Vector(_list143.size);
                for (int _i144 = 0; _i144 < _list143.size; ++_i144)
                {
                  com.evernote.edam.type.LinkedNotebook _elem145;
                  _elem145 = new com.evernote.edam.type.LinkedNotebook();
                  _elem145.read(iprot);
                  this.success.addElement(_elem145);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter146_enum = this.success.elements(); _iter146_enum.hasMoreElements(); )           {
            com.evernote.edam.type.LinkedNotebook _iter146 = (com.evernote.edam.type.LinkedNotebook)_iter146_enum.nextElement();
            _iter146.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("listLinkedNotebooks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeLinkedNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeLinkedNotebook_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public expungeLinkedNotebook_args() {
    }

    public expungeLinkedNotebook_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeLinkedNotebook_args(expungeLinkedNotebook_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public expungeLinkedNotebook_args deepCopy() {
      return new expungeLinkedNotebook_args(this);
    }

    public expungeLinkedNotebook_args clone() {
      return new expungeLinkedNotebook_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeLinkedNotebook_args)
        return this.equals((expungeLinkedNotebook_args)that);
      return false;
    }

    public boolean equals(expungeLinkedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeLinkedNotebook_args other = (expungeLinkedNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeLinkedNotebook_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class expungeLinkedNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("expungeLinkedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private int success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public expungeLinkedNotebook_result() {
    }

    public expungeLinkedNotebook_result(
      int success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public expungeLinkedNotebook_result(expungeLinkedNotebook_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public expungeLinkedNotebook_result deepCopy() {
      return new expungeLinkedNotebook_result(this);
    }

    public expungeLinkedNotebook_result clone() {
      return new expungeLinkedNotebook_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof expungeLinkedNotebook_result)
        return this.equals((expungeLinkedNotebook_result)that);
      return false;
    }

    public boolean equals(expungeLinkedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      expungeLinkedNotebook_result other = (expungeLinkedNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("expungeLinkedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticateToSharedNotebook_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNotebook_args");

    private static final TField SHARE_KEY_FIELD_DESC = new TField("shareKey", TType.STRING, (short)1);
    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)2);

    private String shareKey;
    private String authenticationToken;

    // isset id assignments

    public authenticateToSharedNotebook_args() {
    }

    public authenticateToSharedNotebook_args(
      String shareKey,
      String authenticationToken)
    {
      this();
      this.shareKey = shareKey;
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateToSharedNotebook_args(authenticateToSharedNotebook_args other) {
      if (other.isSetShareKey()) {
        this.shareKey = other.shareKey;
      }
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public authenticateToSharedNotebook_args deepCopy() {
      return new authenticateToSharedNotebook_args(this);
    }

    public authenticateToSharedNotebook_args clone() {
      return new authenticateToSharedNotebook_args(this);
    }

    public void clear() {
      this.shareKey = null;
      this.authenticationToken = null;
    }

    public String getShareKey() {
      return this.shareKey;
    }

    public void setShareKey(String shareKey) {
      this.shareKey = shareKey;
    }

    public void unsetShareKey() {
      this.shareKey = null;
    }

    /** Returns true if field shareKey is set (has been asigned a value) and false otherwise */
    public boolean isSetShareKey() {
      return this.shareKey != null;
    }

    public void setShareKeyIsSet(boolean value) {
      if (!value) {
        this.shareKey = null;
      }
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateToSharedNotebook_args)
        return this.equals((authenticateToSharedNotebook_args)that);
      return false;
    }

    public boolean equals(authenticateToSharedNotebook_args that) {
      if (that == null)
        return false;

      boolean this_present_shareKey = true && this.isSetShareKey();
      boolean that_present_shareKey = true && that.isSetShareKey();
      if (this_present_shareKey || that_present_shareKey) {
        if (!(this_present_shareKey && that_present_shareKey))
          return false;
        if (!this.shareKey.equals(that.shareKey))
          return false;
      }

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      authenticateToSharedNotebook_args other = (authenticateToSharedNotebook_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetShareKey(), other.isSetShareKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShareKey()) {
        lastComparison = TBaseHelper.compareTo(this.shareKey, other.shareKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SHARE_KEY
            if (field.type == TType.STRING) {
              this.shareKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.shareKey != null) {
        oprot.writeFieldBegin(SHARE_KEY_FIELD_DESC);
        oprot.writeString(this.shareKey);
        oprot.writeFieldEnd();
      }
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("authenticateToSharedNotebook_args(");
      boolean first = true;

      sb.append("shareKey:");
      if (this.shareKey == null) {
        sb.append("null");
      } else {
        sb.append(this.shareKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticateToSharedNotebook_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNotebook_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.userstore.AuthenticationResult success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public authenticateToSharedNotebook_result() {
    }

    public authenticateToSharedNotebook_result(
      com.evernote.edam.userstore.AuthenticationResult success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateToSharedNotebook_result(authenticateToSharedNotebook_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.userstore.AuthenticationResult(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public authenticateToSharedNotebook_result deepCopy() {
      return new authenticateToSharedNotebook_result(this);
    }

    public authenticateToSharedNotebook_result clone() {
      return new authenticateToSharedNotebook_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.userstore.AuthenticationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.userstore.AuthenticationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateToSharedNotebook_result)
        return this.equals((authenticateToSharedNotebook_result)that);
      return false;
    }

    public boolean equals(authenticateToSharedNotebook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      authenticateToSharedNotebook_result other = (authenticateToSharedNotebook_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.userstore.AuthenticationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("authenticateToSharedNotebook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSharedNotebookByAuth_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSharedNotebookByAuth_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public getSharedNotebookByAuth_args() {
    }

    public getSharedNotebookByAuth_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSharedNotebookByAuth_args(getSharedNotebookByAuth_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public getSharedNotebookByAuth_args deepCopy() {
      return new getSharedNotebookByAuth_args(this);
    }

    public getSharedNotebookByAuth_args clone() {
      return new getSharedNotebookByAuth_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSharedNotebookByAuth_args)
        return this.equals((getSharedNotebookByAuth_args)that);
      return false;
    }

    public boolean equals(getSharedNotebookByAuth_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSharedNotebookByAuth_args other = (getSharedNotebookByAuth_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSharedNotebookByAuth_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSharedNotebookByAuth_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSharedNotebookByAuth_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.type.SharedNotebook success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public getSharedNotebookByAuth_result() {
    }

    public getSharedNotebookByAuth_result(
      com.evernote.edam.type.SharedNotebook success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSharedNotebookByAuth_result(getSharedNotebookByAuth_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.SharedNotebook(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getSharedNotebookByAuth_result deepCopy() {
      return new getSharedNotebookByAuth_result(this);
    }

    public getSharedNotebookByAuth_result clone() {
      return new getSharedNotebookByAuth_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.SharedNotebook getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.SharedNotebook success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSharedNotebookByAuth_result)
        return this.equals((getSharedNotebookByAuth_result)that);
      return false;
    }

    public boolean equals(getSharedNotebookByAuth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSharedNotebookByAuth_result other = (getSharedNotebookByAuth_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.SharedNotebook();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSharedNotebookByAuth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class emailNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("emailNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.STRUCT, (short)2);

    private String authenticationToken;
    private NoteEmailParameters parameters;

    // isset id assignments

    public emailNote_args() {
    }

    public emailNote_args(
      String authenticationToken,
      NoteEmailParameters parameters)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.parameters = parameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public emailNote_args(emailNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetParameters()) {
        this.parameters = new NoteEmailParameters(other.parameters);
      }
    }

    public emailNote_args deepCopy() {
      return new emailNote_args(this);
    }

    public emailNote_args clone() {
      return new emailNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.parameters = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public NoteEmailParameters getParameters() {
      return this.parameters;
    }

    public void setParameters(NoteEmailParameters parameters) {
      this.parameters = parameters;
    }

    public void unsetParameters() {
      this.parameters = null;
    }

    /** Returns true if field parameters is set (has been asigned a value) and false otherwise */
    public boolean isSetParameters() {
      return this.parameters != null;
    }

    public void setParametersIsSet(boolean value) {
      if (!value) {
        this.parameters = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof emailNote_args)
        return this.equals((emailNote_args)that);
      return false;
    }

    public boolean equals(emailNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_parameters = true && this.isSetParameters();
      boolean that_present_parameters = true && that.isSetParameters();
      if (this_present_parameters || that_present_parameters) {
        if (!(this_present_parameters && that_present_parameters))
          return false;
        if (!this.parameters.equals(that.parameters))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      emailNote_args other = (emailNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetParameters(), other.isSetParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameters()) {
        lastComparison = this.parameters.compareTo(other.parameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PARAMETERS
            if (field.type == TType.STRUCT) {
              this.parameters = new NoteEmailParameters();
              this.parameters.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.parameters != null) {
        oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
        this.parameters.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("emailNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class emailNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("emailNote_result");

    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public emailNote_result() {
    }

    public emailNote_result(
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public emailNote_result(emailNote_result other) {
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public emailNote_result deepCopy() {
      return new emailNote_result(this);
    }

    public emailNote_result clone() {
      return new emailNote_result(this);
    }

    public void clear() {
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof emailNote_result)
        return this.equals((emailNote_result)that);
      return false;
    }

    public boolean equals(emailNote_result that) {
      if (that == null)
        return false;

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      emailNote_result other = (emailNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("emailNote_result(");
      boolean first = true;

      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class shareNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("shareNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public shareNote_args() {
    }

    public shareNote_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shareNote_args(shareNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public shareNote_args deepCopy() {
      return new shareNote_args(this);
    }

    public shareNote_args clone() {
      return new shareNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shareNote_args)
        return this.equals((shareNote_args)that);
      return false;
    }

    public boolean equals(shareNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      shareNote_args other = (shareNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("shareNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class shareNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("shareNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private String success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public shareNote_result() {
    }

    public shareNote_result(
      String success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shareNote_result(shareNote_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public shareNote_result deepCopy() {
      return new shareNote_result(this);
    }

    public shareNote_result clone() {
      return new shareNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shareNote_result)
        return this.equals((shareNote_result)that);
      return false;
    }

    public boolean equals(shareNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      shareNote_result other = (shareNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("shareNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class stopSharingNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("stopSharingNote_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);

    private String authenticationToken;
    private String guid;

    // isset id assignments

    public stopSharingNote_args() {
    }

    public stopSharingNote_args(
      String authenticationToken,
      String guid)
    {
      this();
      this.authenticationToken = authenticationToken;
      this.guid = guid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopSharingNote_args(stopSharingNote_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
    }

    public stopSharingNote_args deepCopy() {
      return new stopSharingNote_args(this);
    }

    public stopSharingNote_args clone() {
      return new stopSharingNote_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
      this.guid = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopSharingNote_args)
        return this.equals((stopSharingNote_args)that);
      return false;
    }

    public boolean equals(stopSharingNote_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      stopSharingNote_args other = (stopSharingNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("stopSharingNote_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class stopSharingNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("stopSharingNote_result");

    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public stopSharingNote_result() {
    }

    public stopSharingNote_result(
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopSharingNote_result(stopSharingNote_result other) {
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public stopSharingNote_result deepCopy() {
      return new stopSharingNote_result(this);
    }

    public stopSharingNote_result clone() {
      return new stopSharingNote_result(this);
    }

    public void clear() {
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopSharingNote_result)
        return this.equals((stopSharingNote_result)that);
      return false;
    }

    public boolean equals(stopSharingNote_result that) {
      if (that == null)
        return false;

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      stopSharingNote_result other = (stopSharingNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("stopSharingNote_result(");
      boolean first = true;

      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticateToSharedNote_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNote_args");

    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)1);
    private static final TField NOTE_KEY_FIELD_DESC = new TField("noteKey", TType.STRING, (short)2);

    private String guid;
    private String noteKey;

    // isset id assignments

    public authenticateToSharedNote_args() {
    }

    public authenticateToSharedNote_args(
      String guid,
      String noteKey)
    {
      this();
      this.guid = guid;
      this.noteKey = noteKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateToSharedNote_args(authenticateToSharedNote_args other) {
      if (other.isSetGuid()) {
        this.guid = other.guid;
      }
      if (other.isSetNoteKey()) {
        this.noteKey = other.noteKey;
      }
    }

    public authenticateToSharedNote_args deepCopy() {
      return new authenticateToSharedNote_args(this);
    }

    public authenticateToSharedNote_args clone() {
      return new authenticateToSharedNote_args(this);
    }

    public void clear() {
      this.guid = null;
      this.noteKey = null;
    }

    public String getGuid() {
      return this.guid;
    }

    public void setGuid(String guid) {
      this.guid = guid;
    }

    public void unsetGuid() {
      this.guid = null;
    }

    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
    public boolean isSetGuid() {
      return this.guid != null;
    }

    public void setGuidIsSet(boolean value) {
      if (!value) {
        this.guid = null;
      }
    }

    public String getNoteKey() {
      return this.noteKey;
    }

    public void setNoteKey(String noteKey) {
      this.noteKey = noteKey;
    }

    public void unsetNoteKey() {
      this.noteKey = null;
    }

    /** Returns true if field noteKey is set (has been asigned a value) and false otherwise */
    public boolean isSetNoteKey() {
      return this.noteKey != null;
    }

    public void setNoteKeyIsSet(boolean value) {
      if (!value) {
        this.noteKey = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateToSharedNote_args)
        return this.equals((authenticateToSharedNote_args)that);
      return false;
    }

    public boolean equals(authenticateToSharedNote_args that) {
      if (that == null)
        return false;

      boolean this_present_guid = true && this.isSetGuid();
      boolean that_present_guid = true && that.isSetGuid();
      if (this_present_guid || that_present_guid) {
        if (!(this_present_guid && that_present_guid))
          return false;
        if (!this.guid.equals(that.guid))
          return false;
      }

      boolean this_present_noteKey = true && this.isSetNoteKey();
      boolean that_present_noteKey = true && that.isSetNoteKey();
      if (this_present_noteKey || that_present_noteKey) {
        if (!(this_present_noteKey && that_present_noteKey))
          return false;
        if (!this.noteKey.equals(that.noteKey))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      authenticateToSharedNote_args other = (authenticateToSharedNote_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGuid(), other.isSetGuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuid()) {
        lastComparison = TBaseHelper.compareTo(this.guid, other.guid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNoteKey(), other.isSetNoteKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteKey()) {
        lastComparison = TBaseHelper.compareTo(this.noteKey, other.noteKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GUID
            if (field.type == TType.STRING) {
              this.guid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOTE_KEY
            if (field.type == TType.STRING) {
              this.noteKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(this.guid);
        oprot.writeFieldEnd();
      }
      if (this.noteKey != null) {
        oprot.writeFieldBegin(NOTE_KEY_FIELD_DESC);
        oprot.writeString(this.noteKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("authenticateToSharedNote_args(");
      boolean first = true;

      sb.append("guid:");
      if (this.guid == null) {
        sb.append("null");
      } else {
        sb.append(this.guid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteKey:");
      if (this.noteKey == null) {
        sb.append("null");
      } else {
        sb.append(this.noteKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticateToSharedNote_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNote_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);

    private com.evernote.edam.userstore.AuthenticationResult success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public authenticateToSharedNote_result() {
    }

    public authenticateToSharedNote_result(
      com.evernote.edam.userstore.AuthenticationResult success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateToSharedNote_result(authenticateToSharedNote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.userstore.AuthenticationResult(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public authenticateToSharedNote_result deepCopy() {
      return new authenticateToSharedNote_result(this);
    }

    public authenticateToSharedNote_result clone() {
      return new authenticateToSharedNote_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.notFoundException = null;
      this.systemException = null;
    }

    public com.evernote.edam.userstore.AuthenticationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.userstore.AuthenticationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateToSharedNote_result)
        return this.equals((authenticateToSharedNote_result)that);
      return false;
    }

    public boolean equals(authenticateToSharedNote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      authenticateToSharedNote_result other = (authenticateToSharedNote_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.userstore.AuthenticationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("authenticateToSharedNote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
