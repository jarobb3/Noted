/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.userstore;

import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class UserStore {

  /**
   * Service:  UserStore
   * <p>
   * The UserStore service is primarily used by EDAM clients to establish
   * authentication via username and password over a trusted connection (e.g.
   * SSL).  A client's first call to this interface should be checkVersion() to
   * ensure that the client's software is up to date.
   * </p>
   * All calls which require an authenticationToken may throw an
   * EDAMUserException for the following reasons:
   *  <ul>
   *   <li> AUTH_EXPIRED "authenticationToken" - token has expired
   *   <li> BAD_DATA_FORMAT "authenticationToken" - token is malformed
   *   <li> DATA_REQUIRED "authenticationToken" - token is empty
   *   <li> INVALID_AUTH "authenticationToken" - token signature is invalid
   * </ul>
   */
  public interface Iface {

    /**
     * This should be the first call made by a client to the EDAM service.  It
     * tells the service what protocol version is used by the client.  The
     * service will then return true if the client is capable of talking to
     * the service, and false if the client's protocol version is incompatible
     * with the service, so the client must upgrade.  If a client receives a
     * false value, it should report the incompatibility to the user and not
     * continue with any more EDAM requests (UserStore or NoteStore).
     * 
     * @param clientName
     *   This string provides some information about the client for
     *   tracking/logging on the service.  It should provide information about
     *   the client's software and platform.  The structure should be:
     *   application/version; platform/version; [ device/version ]
     *   E.g.   "Evernote Windows/3.0.1; Windows/XP SP3" or
     *   "Evernote Clipper/1.0.1; JME/2.0; Motorola RAZR/2.0;
     * 
     * @param edamVersionMajor
     *   This should be the major protocol version that was compiled by the
     *   client.  This should be the current value of the EDAM_VERSION_MAJOR
     *   constant for the client.
     * 
     * @param edamVersionMinor
     *   This should be the major protocol version that was compiled by the
     *   client.  This should be the current value of the EDAM_VERSION_MINOR
     *   constant for the client.
     * 
     * @param clientName
     * @param edamVersionMajor
     * @param edamVersionMinor
     */
    public boolean checkVersion(String clientName, short edamVersionMajor, short edamVersionMinor) throws TException;

    /**
     * This is used to check a username and password in order to create an
     * authentication session that could be used for further actions.
     * 
     * @param username
     *   The username (not numeric user ID) for the account to
     *   authenticate against.  This function will also accept the user's
     *   registered email address in this parameter.
     * 
     * @param password
     *   The plaintext password to check against the account.  Since
     *   this is not protected by the EDAM protocol, this information must be
     *   provided over a protected transport (e.g. SSL).
     * 
     * @param consumerKey
     *   A unique identifier for this client application, provided by Evernote
     *   to developers who request an API key.  This must be provided to identify
     *   the client.
     * 
     * @param consumerSecret
     *   If the client was given a "consumer secret" when the API key was issued,
     *   it must be provided here to authenticate the application itself.
     * 
     * @return
     *   The result of the authentication.  If the authentication was successful,
     *   the AuthenticationResult.user field will be set with the full information
     *   about the User.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "username" - username is empty
     *   <li> DATA_REQUIRED "password" - password is empty
     *   <li> DATA_REQUIRED "consumerKey" - consumerKey is empty
     *   <li> INVALID_AUTH "username" - username not found
     *   <li> INVALID_AUTH "password" - password did not match
     *   <li> INVALID_AUTH "consumerKey" - consumerKey is not authorized
     *   <li> INVALID_AUTH "consumerSecret" - consumerSecret is incorrect
     *   <li> PERMISSION_DENIED "User.active" - user account is closed
     *   <li> PERMISSION_DENIED "User.tooManyFailuresTryAgainLater" - user has failed authentication too often
     * </ul>
     * 
     * @param username
     * @param password
     * @param consumerKey
     * @param consumerSecret
     */
    public AuthenticationResult authenticate(String username, String password, String consumerKey, String consumerSecret) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * This is used to take an existing authentication token (returned from
     * 'authenticate') and exchange it for a newer token which will not expire
     * as soon.  This must be invoked before the previous token expires.
     * 
     * @param authenticationToken
     *   The previous authentication token from the authenticate() result.
     * 
     * @return
     *   The result of the authentication, with the new token in
     *   the result's "authentication" field.  The User field will
     *   not be set in the reply.
     * 
     * @param authenticationToken
     */
    public AuthenticationResult refreshAuthentication(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Returns the User corresponding to the provided authentication token,
     * or throws an exception if this token is not valid.
     * The level of detail provided in the returned User structure depends on
     * the access level granted by the token, so a web service client may receive
     * fewer fields than an integrated desktop client.
     * 
     * @param authenticationToken
     */
    public com.evernote.edam.type.User getUser(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException;

    /**
     * Asks the UserStore about the publicly available location information for
     * a particular username.
     * 
     * @throws EDAMUserException <ul>
     *   <li> DATA_REQUIRED "username" - username is empty
     * </ul>
     * 
     * @param username
     */
    public PublicUserInfo getPublicUserInfo(String username) throws com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMUserException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public boolean checkVersion(String clientName, short edamVersionMajor, short edamVersionMinor) throws TException
    {
      send_checkVersion(clientName, edamVersionMajor, edamVersionMinor);
      return recv_checkVersion();
    }

    public void send_checkVersion(String clientName, short edamVersionMajor, short edamVersionMinor) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("checkVersion", TMessageType.CALL, ++seqid_));
      checkVersion_args args = new checkVersion_args();
      args.setClientName(clientName);
      args.setEdamVersionMajor(edamVersionMajor);
      args.setEdamVersionMinor(edamVersionMinor);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_checkVersion() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "checkVersion failed: out of sequence response");
      }
      checkVersion_result result = new checkVersion_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "checkVersion failed: unknown result");
    }

    public AuthenticationResult authenticate(String username, String password, String consumerKey, String consumerSecret) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_authenticate(username, password, consumerKey, consumerSecret);
      return recv_authenticate();
    }

    public void send_authenticate(String username, String password, String consumerKey, String consumerSecret) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("authenticate", TMessageType.CALL, ++seqid_));
      authenticate_args args = new authenticate_args();
      args.setUsername(username);
      args.setPassword(password);
      args.setConsumerKey(consumerKey);
      args.setConsumerSecret(consumerSecret);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public AuthenticationResult recv_authenticate() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "authenticate failed: out of sequence response");
      }
      authenticate_result result = new authenticate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "authenticate failed: unknown result");
    }

    public AuthenticationResult refreshAuthentication(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_refreshAuthentication(authenticationToken);
      return recv_refreshAuthentication();
    }

    public void send_refreshAuthentication(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("refreshAuthentication", TMessageType.CALL, ++seqid_));
      refreshAuthentication_args args = new refreshAuthentication_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public AuthenticationResult recv_refreshAuthentication() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "refreshAuthentication failed: out of sequence response");
      }
      refreshAuthentication_result result = new refreshAuthentication_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "refreshAuthentication failed: unknown result");
    }

    public com.evernote.edam.type.User getUser(String authenticationToken) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      send_getUser(authenticationToken);
      return recv_getUser();
    }

    public void send_getUser(String authenticationToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUser", TMessageType.CALL, ++seqid_));
      getUser_args args = new getUser_args();
      args.setAuthenticationToken(authenticationToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public com.evernote.edam.type.User recv_getUser() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUser failed: out of sequence response");
      }
      getUser_result result = new getUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUser failed: unknown result");
    }

    public PublicUserInfo getPublicUserInfo(String username) throws com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMUserException, TException
    {
      send_getPublicUserInfo(username);
      return recv_getPublicUserInfo();
    }

    public void send_getPublicUserInfo(String username) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPublicUserInfo", TMessageType.CALL, ++seqid_));
      getPublicUserInfo_args args = new getPublicUserInfo_args();
      args.setUsername(username);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PublicUserInfo recv_getPublicUserInfo() throws com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMUserException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPublicUserInfo failed: out of sequence response");
      }
      getPublicUserInfo_result result = new getPublicUserInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.notFoundException != null) {
        throw result.notFoundException;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      if (result.userException != null) {
        throw result.userException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPublicUserInfo failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("checkVersion", new checkVersion());
      processMap_.put("authenticate", new authenticate());
      processMap_.put("refreshAuthentication", new refreshAuthentication());
      processMap_.put("getUser", new getUser());
      processMap_.put("getPublicUserInfo", new getPublicUserInfo());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class checkVersion implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        checkVersion_args args = new checkVersion_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("checkVersion", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkVersion_result result = new checkVersion_result();
        result.success = iface_.checkVersion(args.clientName, args.edamVersionMajor, args.edamVersionMinor);
        result.setSuccessIsSet(true);
        oprot.writeMessageBegin(new TMessage("checkVersion", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class authenticate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        authenticate_args args = new authenticate_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("authenticate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        authenticate_result result = new authenticate_result();
        try {
          result.success = iface_.authenticate(args.username, args.password, args.consumerKey, args.consumerSecret);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing authenticate");
          oprot.writeMessageBegin(new TMessage("authenticate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("authenticate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class refreshAuthentication implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        refreshAuthentication_args args = new refreshAuthentication_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("refreshAuthentication", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        refreshAuthentication_result result = new refreshAuthentication_result();
        try {
          result.success = iface_.refreshAuthentication(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing refreshAuthentication");
          oprot.writeMessageBegin(new TMessage("refreshAuthentication", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("refreshAuthentication", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUser_args args = new getUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUser_result result = new getUser_result();
        try {
          result.success = iface_.getUser(args.authenticationToken);
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUser");
          oprot.writeMessageBegin(new TMessage("getUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPublicUserInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPublicUserInfo_args args = new getPublicUserInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPublicUserInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPublicUserInfo_result result = new getPublicUserInfo_result();
        try {
          result.success = iface_.getPublicUserInfo(args.username);
        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
          result.notFoundException = notFoundException;
        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
          result.systemException = systemException;
        } catch (com.evernote.edam.error.EDAMUserException userException) {
          result.userException = userException;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPublicUserInfo");
          oprot.writeMessageBegin(new TMessage("getPublicUserInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPublicUserInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class checkVersion_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkVersion_args");

    private static final TField CLIENT_NAME_FIELD_DESC = new TField("clientName", TType.STRING, (short)1);
    private static final TField EDAM_VERSION_MAJOR_FIELD_DESC = new TField("edamVersionMajor", TType.I16, (short)2);
    private static final TField EDAM_VERSION_MINOR_FIELD_DESC = new TField("edamVersionMinor", TType.I16, (short)3);

    private String clientName;
    private short edamVersionMajor;
    private short edamVersionMinor;

    // isset id assignments
    private static final int __EDAMVERSIONMAJOR_ISSET_ID = 0;
    private static final int __EDAMVERSIONMINOR_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public checkVersion_args() {
      this.edamVersionMajor = (short)1;

      this.edamVersionMinor = (short)19;

    }

    public checkVersion_args(
      String clientName,
      short edamVersionMajor,
      short edamVersionMinor)
    {
      this();
      this.clientName = clientName;
      this.edamVersionMajor = edamVersionMajor;
      setEdamVersionMajorIsSet(true);
      this.edamVersionMinor = edamVersionMinor;
      setEdamVersionMinorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkVersion_args(checkVersion_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetClientName()) {
        this.clientName = other.clientName;
      }
      this.edamVersionMajor = other.edamVersionMajor;
      this.edamVersionMinor = other.edamVersionMinor;
    }

    public checkVersion_args deepCopy() {
      return new checkVersion_args(this);
    }

    public checkVersion_args clone() {
      return new checkVersion_args(this);
    }

    public void clear() {
      this.clientName = null;
      this.edamVersionMajor = (short)1;

      this.edamVersionMinor = (short)19;

    }

    public String getClientName() {
      return this.clientName;
    }

    public void setClientName(String clientName) {
      this.clientName = clientName;
    }

    public void unsetClientName() {
      this.clientName = null;
    }

    /** Returns true if field clientName is set (has been asigned a value) and false otherwise */
    public boolean isSetClientName() {
      return this.clientName != null;
    }

    public void setClientNameIsSet(boolean value) {
      if (!value) {
        this.clientName = null;
      }
    }

    public short getEdamVersionMajor() {
      return this.edamVersionMajor;
    }

    public void setEdamVersionMajor(short edamVersionMajor) {
      this.edamVersionMajor = edamVersionMajor;
      setEdamVersionMajorIsSet(true);
    }

    public void unsetEdamVersionMajor() {
      __isset_vector[__EDAMVERSIONMAJOR_ISSET_ID] = false;
    }

    /** Returns true if field edamVersionMajor is set (has been asigned a value) and false otherwise */
    public boolean isSetEdamVersionMajor() {
      return __isset_vector[__EDAMVERSIONMAJOR_ISSET_ID];
    }

    public void setEdamVersionMajorIsSet(boolean value) {
      __isset_vector[__EDAMVERSIONMAJOR_ISSET_ID] = value;
    }

    public short getEdamVersionMinor() {
      return this.edamVersionMinor;
    }

    public void setEdamVersionMinor(short edamVersionMinor) {
      this.edamVersionMinor = edamVersionMinor;
      setEdamVersionMinorIsSet(true);
    }

    public void unsetEdamVersionMinor() {
      __isset_vector[__EDAMVERSIONMINOR_ISSET_ID] = false;
    }

    /** Returns true if field edamVersionMinor is set (has been asigned a value) and false otherwise */
    public boolean isSetEdamVersionMinor() {
      return __isset_vector[__EDAMVERSIONMINOR_ISSET_ID];
    }

    public void setEdamVersionMinorIsSet(boolean value) {
      __isset_vector[__EDAMVERSIONMINOR_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkVersion_args)
        return this.equals((checkVersion_args)that);
      return false;
    }

    public boolean equals(checkVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_clientName = true && this.isSetClientName();
      boolean that_present_clientName = true && that.isSetClientName();
      if (this_present_clientName || that_present_clientName) {
        if (!(this_present_clientName && that_present_clientName))
          return false;
        if (!this.clientName.equals(that.clientName))
          return false;
      }

      boolean this_present_edamVersionMajor = true;
      boolean that_present_edamVersionMajor = true;
      if (this_present_edamVersionMajor || that_present_edamVersionMajor) {
        if (!(this_present_edamVersionMajor && that_present_edamVersionMajor))
          return false;
        if (this.edamVersionMajor != that.edamVersionMajor)
          return false;
      }

      boolean this_present_edamVersionMinor = true;
      boolean that_present_edamVersionMinor = true;
      if (this_present_edamVersionMinor || that_present_edamVersionMinor) {
        if (!(this_present_edamVersionMinor && that_present_edamVersionMinor))
          return false;
        if (this.edamVersionMinor != that.edamVersionMinor)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkVersion_args other = (checkVersion_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetClientName(), other.isSetClientName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientName()) {
        lastComparison = TBaseHelper.compareTo(this.clientName, other.clientName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEdamVersionMajor(), other.isSetEdamVersionMajor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdamVersionMajor()) {
        lastComparison = TBaseHelper.compareTo(this.edamVersionMajor, other.edamVersionMajor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEdamVersionMinor(), other.isSetEdamVersionMinor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdamVersionMinor()) {
        lastComparison = TBaseHelper.compareTo(this.edamVersionMinor, other.edamVersionMinor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CLIENT_NAME
            if (field.type == TType.STRING) {
              this.clientName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // EDAM_VERSION_MAJOR
            if (field.type == TType.I16) {
              this.edamVersionMajor = iprot.readI16();
              setEdamVersionMajorIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // EDAM_VERSION_MINOR
            if (field.type == TType.I16) {
              this.edamVersionMinor = iprot.readI16();
              setEdamVersionMinorIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.clientName != null) {
        oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
        oprot.writeString(this.clientName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EDAM_VERSION_MAJOR_FIELD_DESC);
      oprot.writeI16(this.edamVersionMajor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EDAM_VERSION_MINOR_FIELD_DESC);
      oprot.writeI16(this.edamVersionMinor);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkVersion_args(");
      boolean first = true;

      sb.append("clientName:");
      if (this.clientName == null) {
        sb.append("null");
      } else {
        sb.append(this.clientName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("edamVersionMajor:");
      sb.append(this.edamVersionMajor);
      first = false;
      if (!first) sb.append(", ");
      sb.append("edamVersionMinor:");
      sb.append(this.edamVersionMinor);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkVersion_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkVersion_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);

    private boolean success;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkVersion_result() {
    }

    public checkVersion_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkVersion_result(checkVersion_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
    }

    public checkVersion_result deepCopy() {
      return new checkVersion_result(this);
    }

    public checkVersion_result clone() {
      return new checkVersion_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkVersion_result)
        return this.equals((checkVersion_result)that);
      return false;
    }

    public boolean equals(checkVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkVersion_result other = (checkVersion_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkVersion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticate_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticate_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)2);
    private static final TField CONSUMER_KEY_FIELD_DESC = new TField("consumerKey", TType.STRING, (short)3);
    private static final TField CONSUMER_SECRET_FIELD_DESC = new TField("consumerSecret", TType.STRING, (short)4);

    private String username;
    private String password;
    private String consumerKey;
    private String consumerSecret;

    // isset id assignments

    public authenticate_args() {
    }

    public authenticate_args(
      String username,
      String password,
      String consumerKey,
      String consumerSecret)
    {
      this();
      this.username = username;
      this.password = password;
      this.consumerKey = consumerKey;
      this.consumerSecret = consumerSecret;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_args(authenticate_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetConsumerKey()) {
        this.consumerKey = other.consumerKey;
      }
      if (other.isSetConsumerSecret()) {
        this.consumerSecret = other.consumerSecret;
      }
    }

    public authenticate_args deepCopy() {
      return new authenticate_args(this);
    }

    public authenticate_args clone() {
      return new authenticate_args(this);
    }

    public void clear() {
      this.username = null;
      this.password = null;
      this.consumerKey = null;
      this.consumerSecret = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been asigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been asigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getConsumerKey() {
      return this.consumerKey;
    }

    public void setConsumerKey(String consumerKey) {
      this.consumerKey = consumerKey;
    }

    public void unsetConsumerKey() {
      this.consumerKey = null;
    }

    /** Returns true if field consumerKey is set (has been asigned a value) and false otherwise */
    public boolean isSetConsumerKey() {
      return this.consumerKey != null;
    }

    public void setConsumerKeyIsSet(boolean value) {
      if (!value) {
        this.consumerKey = null;
      }
    }

    public String getConsumerSecret() {
      return this.consumerSecret;
    }

    public void setConsumerSecret(String consumerSecret) {
      this.consumerSecret = consumerSecret;
    }

    public void unsetConsumerSecret() {
      this.consumerSecret = null;
    }

    /** Returns true if field consumerSecret is set (has been asigned a value) and false otherwise */
    public boolean isSetConsumerSecret() {
      return this.consumerSecret != null;
    }

    public void setConsumerSecretIsSet(boolean value) {
      if (!value) {
        this.consumerSecret = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_args)
        return this.equals((authenticate_args)that);
      return false;
    }

    public boolean equals(authenticate_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_consumerKey = true && this.isSetConsumerKey();
      boolean that_present_consumerKey = true && that.isSetConsumerKey();
      if (this_present_consumerKey || that_present_consumerKey) {
        if (!(this_present_consumerKey && that_present_consumerKey))
          return false;
        if (!this.consumerKey.equals(that.consumerKey))
          return false;
      }

      boolean this_present_consumerSecret = true && this.isSetConsumerSecret();
      boolean that_present_consumerSecret = true && that.isSetConsumerSecret();
      if (this_present_consumerSecret || that_present_consumerSecret) {
        if (!(this_present_consumerSecret && that_present_consumerSecret))
          return false;
        if (!this.consumerSecret.equals(that.consumerSecret))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      authenticate_args other = (authenticate_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPassword(), other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetConsumerKey(), other.isSetConsumerKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumerKey()) {
        lastComparison = TBaseHelper.compareTo(this.consumerKey, other.consumerKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetConsumerSecret(), other.isSetConsumerSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumerSecret()) {
        lastComparison = TBaseHelper.compareTo(this.consumerSecret, other.consumerSecret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PASSWORD
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONSUMER_KEY
            if (field.type == TType.STRING) {
              this.consumerKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSUMER_SECRET
            if (field.type == TType.STRING) {
              this.consumerSecret = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      if (this.consumerKey != null) {
        oprot.writeFieldBegin(CONSUMER_KEY_FIELD_DESC);
        oprot.writeString(this.consumerKey);
        oprot.writeFieldEnd();
      }
      if (this.consumerSecret != null) {
        oprot.writeFieldBegin(CONSUMER_SECRET_FIELD_DESC);
        oprot.writeString(this.consumerSecret);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("authenticate_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("consumerKey:");
      if (this.consumerKey == null) {
        sb.append("null");
      } else {
        sb.append(this.consumerKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("consumerSecret:");
      if (this.consumerSecret == null) {
        sb.append("null");
      } else {
        sb.append(this.consumerSecret);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class authenticate_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("authenticate_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private AuthenticationResult success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public authenticate_result() {
    }

    public authenticate_result(
      AuthenticationResult success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticate_result(authenticate_result other) {
      if (other.isSetSuccess()) {
        this.success = new AuthenticationResult(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public authenticate_result deepCopy() {
      return new authenticate_result(this);
    }

    public authenticate_result clone() {
      return new authenticate_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public AuthenticationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(AuthenticationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticate_result)
        return this.equals((authenticate_result)that);
      return false;
    }

    public boolean equals(authenticate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      authenticate_result other = (authenticate_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new AuthenticationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("authenticate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class refreshAuthentication_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("refreshAuthentication_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public refreshAuthentication_args() {
    }

    public refreshAuthentication_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refreshAuthentication_args(refreshAuthentication_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public refreshAuthentication_args deepCopy() {
      return new refreshAuthentication_args(this);
    }

    public refreshAuthentication_args clone() {
      return new refreshAuthentication_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refreshAuthentication_args)
        return this.equals((refreshAuthentication_args)that);
      return false;
    }

    public boolean equals(refreshAuthentication_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      refreshAuthentication_args other = (refreshAuthentication_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("refreshAuthentication_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class refreshAuthentication_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("refreshAuthentication_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private AuthenticationResult success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public refreshAuthentication_result() {
    }

    public refreshAuthentication_result(
      AuthenticationResult success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refreshAuthentication_result(refreshAuthentication_result other) {
      if (other.isSetSuccess()) {
        this.success = new AuthenticationResult(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public refreshAuthentication_result deepCopy() {
      return new refreshAuthentication_result(this);
    }

    public refreshAuthentication_result clone() {
      return new refreshAuthentication_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public AuthenticationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(AuthenticationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refreshAuthentication_result)
        return this.equals((refreshAuthentication_result)that);
      return false;
    }

    public boolean equals(refreshAuthentication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      refreshAuthentication_result other = (refreshAuthentication_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new AuthenticationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("refreshAuthentication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUser_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUser_args");

    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);

    private String authenticationToken;

    // isset id assignments

    public getUser_args() {
    }

    public getUser_args(
      String authenticationToken)
    {
      this();
      this.authenticationToken = authenticationToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUser_args(getUser_args other) {
      if (other.isSetAuthenticationToken()) {
        this.authenticationToken = other.authenticationToken;
      }
    }

    public getUser_args deepCopy() {
      return new getUser_args(this);
    }

    public getUser_args clone() {
      return new getUser_args(this);
    }

    public void clear() {
      this.authenticationToken = null;
    }

    public String getAuthenticationToken() {
      return this.authenticationToken;
    }

    public void setAuthenticationToken(String authenticationToken) {
      this.authenticationToken = authenticationToken;
    }

    public void unsetAuthenticationToken() {
      this.authenticationToken = null;
    }

    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
    public boolean isSetAuthenticationToken() {
      return this.authenticationToken != null;
    }

    public void setAuthenticationTokenIsSet(boolean value) {
      if (!value) {
        this.authenticationToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUser_args)
        return this.equals((getUser_args)that);
      return false;
    }

    public boolean equals(getUser_args that) {
      if (that == null)
        return false;

      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
      if (this_present_authenticationToken || that_present_authenticationToken) {
        if (!(this_present_authenticationToken && that_present_authenticationToken))
          return false;
        if (!this.authenticationToken.equals(that.authenticationToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUser_args other = (getUser_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAuthenticationToken(), other.isSetAuthenticationToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthenticationToken()) {
        lastComparison = TBaseHelper.compareTo(this.authenticationToken, other.authenticationToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHENTICATION_TOKEN
            if (field.type == TType.STRING) {
              this.authenticationToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.authenticationToken != null) {
        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
        oprot.writeString(this.authenticationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUser_args(");
      boolean first = true;

      sb.append("authenticationToken:");
      if (this.authenticationToken == null) {
        sb.append("null");
      } else {
        sb.append(this.authenticationToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUser_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUser_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);

    private com.evernote.edam.type.User success;
    private com.evernote.edam.error.EDAMUserException userException;
    private com.evernote.edam.error.EDAMSystemException systemException;

    // isset id assignments

    public getUser_result() {
    }

    public getUser_result(
      com.evernote.edam.type.User success,
      com.evernote.edam.error.EDAMUserException userException,
      com.evernote.edam.error.EDAMSystemException systemException)
    {
      this();
      this.success = success;
      this.userException = userException;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUser_result(getUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.evernote.edam.type.User(other.success);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
    }

    public getUser_result deepCopy() {
      return new getUser_result(this);
    }

    public getUser_result clone() {
      return new getUser_result(this);
    }

    public void clear() {
      this.success = null;
      this.userException = null;
      this.systemException = null;
    }

    public com.evernote.edam.type.User getSuccess() {
      return this.success;
    }

    public void setSuccess(com.evernote.edam.type.User success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUser_result)
        return this.equals((getUser_result)that);
      return false;
    }

    public boolean equals(getUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUser_result other = (getUser_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new com.evernote.edam.type.User();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPublicUserInfo_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPublicUserInfo_args");

    private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short)1);

    private String username;

    // isset id assignments

    public getPublicUserInfo_args() {
    }

    public getPublicUserInfo_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicUserInfo_args(getPublicUserInfo_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public getPublicUserInfo_args deepCopy() {
      return new getPublicUserInfo_args(this);
    }

    public getPublicUserInfo_args clone() {
      return new getPublicUserInfo_args(this);
    }

    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been asigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicUserInfo_args)
        return this.equals((getPublicUserInfo_args)that);
      return false;
    }

    public boolean equals(getPublicUserInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPublicUserInfo_args other = (getPublicUserInfo_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USERNAME
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPublicUserInfo_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPublicUserInfo_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPublicUserInfo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)1);
    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)3);

    private PublicUserInfo success;
    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
    private com.evernote.edam.error.EDAMSystemException systemException;
    private com.evernote.edam.error.EDAMUserException userException;

    // isset id assignments

    public getPublicUserInfo_result() {
    }

    public getPublicUserInfo_result(
      PublicUserInfo success,
      com.evernote.edam.error.EDAMNotFoundException notFoundException,
      com.evernote.edam.error.EDAMSystemException systemException,
      com.evernote.edam.error.EDAMUserException userException)
    {
      this();
      this.success = success;
      this.notFoundException = notFoundException;
      this.systemException = systemException;
      this.userException = userException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicUserInfo_result(getPublicUserInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new PublicUserInfo(other.success);
      }
      if (other.isSetNotFoundException()) {
        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
      }
      if (other.isSetSystemException()) {
        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
      }
      if (other.isSetUserException()) {
        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
      }
    }

    public getPublicUserInfo_result deepCopy() {
      return new getPublicUserInfo_result(this);
    }

    public getPublicUserInfo_result clone() {
      return new getPublicUserInfo_result(this);
    }

    public void clear() {
      this.success = null;
      this.notFoundException = null;
      this.systemException = null;
      this.userException = null;
    }

    public PublicUserInfo getSuccess() {
      return this.success;
    }

    public void setSuccess(PublicUserInfo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
      return this.notFoundException;
    }

    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
      this.notFoundException = notFoundException;
    }

    public void unsetNotFoundException() {
      this.notFoundException = null;
    }

    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
    public boolean isSetNotFoundException() {
      return this.notFoundException != null;
    }

    public void setNotFoundExceptionIsSet(boolean value) {
      if (!value) {
        this.notFoundException = null;
      }
    }

    public com.evernote.edam.error.EDAMSystemException getSystemException() {
      return this.systemException;
    }

    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
      this.systemException = systemException;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public com.evernote.edam.error.EDAMUserException getUserException() {
      return this.userException;
    }

    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
      this.userException = userException;
    }

    public void unsetUserException() {
      this.userException = null;
    }

    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
    public boolean isSetUserException() {
      return this.userException != null;
    }

    public void setUserExceptionIsSet(boolean value) {
      if (!value) {
        this.userException = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicUserInfo_result)
        return this.equals((getPublicUserInfo_result)that);
      return false;
    }

    public boolean equals(getPublicUserInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_notFoundException = true && this.isSetNotFoundException();
      boolean that_present_notFoundException = true && that.isSetNotFoundException();
      if (this_present_notFoundException || that_present_notFoundException) {
        if (!(this_present_notFoundException && that_present_notFoundException))
          return false;
        if (!this.notFoundException.equals(that.notFoundException))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      boolean this_present_userException = true && this.isSetUserException();
      boolean that_present_userException = true && that.isSetUserException();
      if (this_present_userException || that_present_userException) {
        if (!(this_present_userException && that_present_userException))
          return false;
        if (!this.userException.equals(that.userException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPublicUserInfo_result other = (getPublicUserInfo_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotFoundException(), other.isSetNotFoundException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundException()) {
        lastComparison = this.notFoundException.compareTo(other.notFoundException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemException(), other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = this.systemException.compareTo(other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserException(), other.isSetUserException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserException()) {
        lastComparison = this.userException.compareTo(other.userException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PublicUserInfo();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // NOT_FOUND_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
              this.notFoundException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SYSTEM_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.systemException = new com.evernote.edam.error.EDAMSystemException();
              this.systemException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // USER_EXCEPTION
            if (field.type == TType.STRUCT) {
              this.userException = new com.evernote.edam.error.EDAMUserException();
              this.userException.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNotFoundException()) {
        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
        this.notFoundException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSystemException()) {
        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
        this.systemException.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUserException()) {
        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
        this.userException.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPublicUserInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundException:");
      if (this.notFoundException == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userException:");
      if (this.userException == null) {
        sb.append("null");
      } else {
        sb.append(this.userException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
