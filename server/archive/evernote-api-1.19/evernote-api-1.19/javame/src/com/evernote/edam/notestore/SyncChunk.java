/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 *  This structure is given out by the NoteStore when a client asks to
 *  receive the current state of an account.  The client asks for the server's
 *  state one chunk at a time in order to allow clients to retrieve the state
 *  of a large account without needing to transfer the entire account in
 *  a single message.
 * 
 *  The server always gives SyncChunks using an ascending series of Update
 *  Sequence Numbers (USNs).
 * 
 * <dl>
 *  <dt>currentTime</dt>
 *    <dd>
 *    The server's current date and time.
 *    </dd>
 * 
 *  <dt>chunkHighUSN</dt>
 *    <dd>
 *    The highest USN for any of the data objects represented
 *    in this sync chunk.  If there are no objects in the chunk, this will not be
 *    set.
 *    </dd>
 * 
 *  <dt>updateCount</dt>
 *    <dd>
 *    The total number of updates that have been performed in
 *    the service for this account.  This is equal to the highest USN within the
 *    account at the point that this SyncChunk was generated.  If updateCount
 *    and chunkHighUSN are identical, that means that this is the last chunk
 *    in the account ... there is no more recent information.
 *    </dd>
 * 
 *  <dt>notes</dt>
 *    <dd>
 *    If present, this is a list of non-expunged notes that
 *    have a USN in this chunk.  This will include notes that are "deleted"
 *    but not expunged (i.e. in the trash).  The notes will include their list
 *    of tags and resources, but the resource content and recognition data
 *    will not be supplied.
 *    </dd>
 * 
 *  <dt>notebooks</dt>
 *    <dd>
 *    If present, this is a list of non-expunged notebooks that
 *    have a USN in this chunk.  This will include notebooks that are "deleted"
 *    but not expunged (i.e. in the trash).
 *    </dd>
 * 
 *  <dt>tags</dt>
 *    <dd>
 *    If present, this is a list of the non-expunged tags that have a
 *    USN in this chunk.
 *    </dd>
 * 
 *  <dt>searches</dt>
 *    <dd>
 *    If present, this is a list of non-expunged searches that
 *    have a USN in this chunk.
 *    </dd>
 * 
 *  <dt>resources</dt>
 *    <dd>
 *    If present, this is a list of the non-expunged resources
 *    that have a USN in this chunk.  This will include the metadata for each
 *    resource, but not its binary contents or recognition data, which must be
 *    retrieved separately.
 *    </dd>
 * 
 *  <dt>expungedNotes</dt>
 *    <dd>
 *    If present, the GUIDs of all of the notes that were
 *    permanently expunged in this chunk.
 *    </dd>
 * 
 *  <dt>expungedNotebooks</dt>
 *    <dd>
 *    If present, the GUIDs of all of the notebooks that
 *    were permanently expunged in this chunk.  When a notebook is expunged,
 *    this implies that all of its child notes (and their resources) were
 *    also expunged.
 *    </dd>
 * 
 *  <dt>expungedTags</dt>
 *    <dd>
 *    If present, the GUIDs of all of the tags that were
 *    permanently expunged in this chunk.
 *    </dd>
 * 
 *  <dt>expungedSearches</dt>
 *    <dd>
 *    If present, the GUIDs of all of the saved searches
 *    that were permanently expunged in this chunk.
 *    </dd>
 * 
 *  <dt>linkedNotebooks</dt>
 *    <dd>
 *    If present, this is a list of non-expunged LinkedNotebooks that
 *    have a USN in this chunk.
 *    </dd>
 * 
 *  <dt>expungedLinkedNotebooks</dt>
 *    <dd>
 *    If present, the GUIDs of all of the LinkedNotebooks
 *    that were permanently expunged in this chunk.
 *    </dd>
 *  </dl>
 */
public class SyncChunk implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SyncChunk");

  private static final TField CURRENT_TIME_FIELD_DESC = new TField("currentTime", TType.I64, (short)1);
  private static final TField CHUNK_HIGH_USN_FIELD_DESC = new TField("chunkHighUSN", TType.I32, (short)2);
  private static final TField UPDATE_COUNT_FIELD_DESC = new TField("updateCount", TType.I32, (short)3);
  private static final TField NOTES_FIELD_DESC = new TField("notes", TType.LIST, (short)4);
  private static final TField NOTEBOOKS_FIELD_DESC = new TField("notebooks", TType.LIST, (short)5);
  private static final TField TAGS_FIELD_DESC = new TField("tags", TType.LIST, (short)6);
  private static final TField SEARCHES_FIELD_DESC = new TField("searches", TType.LIST, (short)7);
  private static final TField RESOURCES_FIELD_DESC = new TField("resources", TType.LIST, (short)8);
  private static final TField EXPUNGED_NOTES_FIELD_DESC = new TField("expungedNotes", TType.LIST, (short)9);
  private static final TField EXPUNGED_NOTEBOOKS_FIELD_DESC = new TField("expungedNotebooks", TType.LIST, (short)10);
  private static final TField EXPUNGED_TAGS_FIELD_DESC = new TField("expungedTags", TType.LIST, (short)11);
  private static final TField EXPUNGED_SEARCHES_FIELD_DESC = new TField("expungedSearches", TType.LIST, (short)12);
  private static final TField LINKED_NOTEBOOKS_FIELD_DESC = new TField("linkedNotebooks", TType.LIST, (short)13);
  private static final TField EXPUNGED_LINKED_NOTEBOOKS_FIELD_DESC = new TField("expungedLinkedNotebooks", TType.LIST, (short)14);

  private long currentTime;
  private int chunkHighUSN;
  private int updateCount;
  private Vector notes;
  private Vector notebooks;
  private Vector tags;
  private Vector searches;
  private Vector resources;
  private Vector expungedNotes;
  private Vector expungedNotebooks;
  private Vector expungedTags;
  private Vector expungedSearches;
  private Vector linkedNotebooks;
  private Vector expungedLinkedNotebooks;

  // isset id assignments
  private static final int __CURRENTTIME_ISSET_ID = 0;
  private static final int __CHUNKHIGHUSN_ISSET_ID = 1;
  private static final int __UPDATECOUNT_ISSET_ID = 2;
  private boolean[] __isset_vector = new boolean[3];

  public SyncChunk() {
  }

  public SyncChunk(
    long currentTime,
    int updateCount)
  {
    this();
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
    this.updateCount = updateCount;
    setUpdateCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncChunk(SyncChunk other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.currentTime = other.currentTime;
    this.chunkHighUSN = other.chunkHighUSN;
    this.updateCount = other.updateCount;
    if (other.isSetNotes()) {
      Vector __this__notes = new Vector();
      for (Enumeration other_enum = other.notes.elements(); other_enum.hasMoreElements(); ) {
        com.evernote.edam.type.Note other_element = (com.evernote.edam.type.Note)other_enum.nextElement();
        __this__notes.addElement(new com.evernote.edam.type.Note(other_element));
      }
      this.notes = __this__notes;
    }
    if (other.isSetNotebooks()) {
      Vector __this__notebooks = new Vector();
      for (Enumeration other_enum = other.notebooks.elements(); other_enum.hasMoreElements(); ) {
        com.evernote.edam.type.Notebook other_element = (com.evernote.edam.type.Notebook)other_enum.nextElement();
        __this__notebooks.addElement(new com.evernote.edam.type.Notebook(other_element));
      }
      this.notebooks = __this__notebooks;
    }
    if (other.isSetTags()) {
      Vector __this__tags = new Vector();
      for (Enumeration other_enum = other.tags.elements(); other_enum.hasMoreElements(); ) {
        com.evernote.edam.type.Tag other_element = (com.evernote.edam.type.Tag)other_enum.nextElement();
        __this__tags.addElement(new com.evernote.edam.type.Tag(other_element));
      }
      this.tags = __this__tags;
    }
    if (other.isSetSearches()) {
      Vector __this__searches = new Vector();
      for (Enumeration other_enum = other.searches.elements(); other_enum.hasMoreElements(); ) {
        com.evernote.edam.type.SavedSearch other_element = (com.evernote.edam.type.SavedSearch)other_enum.nextElement();
        __this__searches.addElement(new com.evernote.edam.type.SavedSearch(other_element));
      }
      this.searches = __this__searches;
    }
    if (other.isSetResources()) {
      Vector __this__resources = new Vector();
      for (Enumeration other_enum = other.resources.elements(); other_enum.hasMoreElements(); ) {
        com.evernote.edam.type.Resource other_element = (com.evernote.edam.type.Resource)other_enum.nextElement();
        __this__resources.addElement(new com.evernote.edam.type.Resource(other_element));
      }
      this.resources = __this__resources;
    }
    if (other.isSetExpungedNotes()) {
      Vector __this__expungedNotes = new Vector();
      for (Enumeration other_enum = other.expungedNotes.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__expungedNotes.addElement(other_element);
      }
      this.expungedNotes = __this__expungedNotes;
    }
    if (other.isSetExpungedNotebooks()) {
      Vector __this__expungedNotebooks = new Vector();
      for (Enumeration other_enum = other.expungedNotebooks.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__expungedNotebooks.addElement(other_element);
      }
      this.expungedNotebooks = __this__expungedNotebooks;
    }
    if (other.isSetExpungedTags()) {
      Vector __this__expungedTags = new Vector();
      for (Enumeration other_enum = other.expungedTags.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__expungedTags.addElement(other_element);
      }
      this.expungedTags = __this__expungedTags;
    }
    if (other.isSetExpungedSearches()) {
      Vector __this__expungedSearches = new Vector();
      for (Enumeration other_enum = other.expungedSearches.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__expungedSearches.addElement(other_element);
      }
      this.expungedSearches = __this__expungedSearches;
    }
    if (other.isSetLinkedNotebooks()) {
      Vector __this__linkedNotebooks = new Vector();
      for (Enumeration other_enum = other.linkedNotebooks.elements(); other_enum.hasMoreElements(); ) {
        com.evernote.edam.type.LinkedNotebook other_element = (com.evernote.edam.type.LinkedNotebook)other_enum.nextElement();
        __this__linkedNotebooks.addElement(new com.evernote.edam.type.LinkedNotebook(other_element));
      }
      this.linkedNotebooks = __this__linkedNotebooks;
    }
    if (other.isSetExpungedLinkedNotebooks()) {
      Vector __this__expungedLinkedNotebooks = new Vector();
      for (Enumeration other_enum = other.expungedLinkedNotebooks.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__expungedLinkedNotebooks.addElement(other_element);
      }
      this.expungedLinkedNotebooks = __this__expungedLinkedNotebooks;
    }
  }

  public SyncChunk deepCopy() {
    return new SyncChunk(this);
  }

  public SyncChunk clone() {
    return new SyncChunk(this);
  }

  public void clear() {
    setCurrentTimeIsSet(false);
    this.currentTime = 0;
    setChunkHighUSNIsSet(false);
    this.chunkHighUSN = 0;
    setUpdateCountIsSet(false);
    this.updateCount = 0;
    this.notes = null;
    this.notebooks = null;
    this.tags = null;
    this.searches = null;
    this.resources = null;
    this.expungedNotes = null;
    this.expungedNotebooks = null;
    this.expungedTags = null;
    this.expungedSearches = null;
    this.linkedNotebooks = null;
    this.expungedLinkedNotebooks = null;
  }

  public long getCurrentTime() {
    return this.currentTime;
  }

  public void setCurrentTime(long currentTime) {
    this.currentTime = currentTime;
    setCurrentTimeIsSet(true);
  }

  public void unsetCurrentTime() {
    __isset_vector[__CURRENTTIME_ISSET_ID] = false;
  }

  /** Returns true if field currentTime is set (has been asigned a value) and false otherwise */
  public boolean isSetCurrentTime() {
    return __isset_vector[__CURRENTTIME_ISSET_ID];
  }

  public void setCurrentTimeIsSet(boolean value) {
    __isset_vector[__CURRENTTIME_ISSET_ID] = value;
  }

  public int getChunkHighUSN() {
    return this.chunkHighUSN;
  }

  public void setChunkHighUSN(int chunkHighUSN) {
    this.chunkHighUSN = chunkHighUSN;
    setChunkHighUSNIsSet(true);
  }

  public void unsetChunkHighUSN() {
    __isset_vector[__CHUNKHIGHUSN_ISSET_ID] = false;
  }

  /** Returns true if field chunkHighUSN is set (has been asigned a value) and false otherwise */
  public boolean isSetChunkHighUSN() {
    return __isset_vector[__CHUNKHIGHUSN_ISSET_ID];
  }

  public void setChunkHighUSNIsSet(boolean value) {
    __isset_vector[__CHUNKHIGHUSN_ISSET_ID] = value;
  }

  public int getUpdateCount() {
    return this.updateCount;
  }

  public void setUpdateCount(int updateCount) {
    this.updateCount = updateCount;
    setUpdateCountIsSet(true);
  }

  public void unsetUpdateCount() {
    __isset_vector[__UPDATECOUNT_ISSET_ID] = false;
  }

  /** Returns true if field updateCount is set (has been asigned a value) and false otherwise */
  public boolean isSetUpdateCount() {
    return __isset_vector[__UPDATECOUNT_ISSET_ID];
  }

  public void setUpdateCountIsSet(boolean value) {
    __isset_vector[__UPDATECOUNT_ISSET_ID] = value;
  }

  public int getNotesSize() {
    return (this.notes == null) ? 0 : this.notes.size();
  }

  public Enumeration getNotesEnumeration() {
    return (this.notes == null) ? null : this.notes.elements();
  }

  public void addToNotes(com.evernote.edam.type.Note elem) {
    if (this.notes == null) {
      this.notes = new Vector();
    }
    this.notes.addElement(elem);
  }

  public Vector getNotes() {
    return this.notes;
  }

  public void setNotes(Vector notes) {
    this.notes = notes;
  }

  public void unsetNotes() {
    this.notes = null;
  }

  /** Returns true if field notes is set (has been asigned a value) and false otherwise */
  public boolean isSetNotes() {
    return this.notes != null;
  }

  public void setNotesIsSet(boolean value) {
    if (!value) {
      this.notes = null;
    }
  }

  public int getNotebooksSize() {
    return (this.notebooks == null) ? 0 : this.notebooks.size();
  }

  public Enumeration getNotebooksEnumeration() {
    return (this.notebooks == null) ? null : this.notebooks.elements();
  }

  public void addToNotebooks(com.evernote.edam.type.Notebook elem) {
    if (this.notebooks == null) {
      this.notebooks = new Vector();
    }
    this.notebooks.addElement(elem);
  }

  public Vector getNotebooks() {
    return this.notebooks;
  }

  public void setNotebooks(Vector notebooks) {
    this.notebooks = notebooks;
  }

  public void unsetNotebooks() {
    this.notebooks = null;
  }

  /** Returns true if field notebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetNotebooks() {
    return this.notebooks != null;
  }

  public void setNotebooksIsSet(boolean value) {
    if (!value) {
      this.notebooks = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public Enumeration getTagsEnumeration() {
    return (this.tags == null) ? null : this.tags.elements();
  }

  public void addToTags(com.evernote.edam.type.Tag elem) {
    if (this.tags == null) {
      this.tags = new Vector();
    }
    this.tags.addElement(elem);
  }

  public Vector getTags() {
    return this.tags;
  }

  public void setTags(Vector tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been asigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getSearchesSize() {
    return (this.searches == null) ? 0 : this.searches.size();
  }

  public Enumeration getSearchesEnumeration() {
    return (this.searches == null) ? null : this.searches.elements();
  }

  public void addToSearches(com.evernote.edam.type.SavedSearch elem) {
    if (this.searches == null) {
      this.searches = new Vector();
    }
    this.searches.addElement(elem);
  }

  public Vector getSearches() {
    return this.searches;
  }

  public void setSearches(Vector searches) {
    this.searches = searches;
  }

  public void unsetSearches() {
    this.searches = null;
  }

  /** Returns true if field searches is set (has been asigned a value) and false otherwise */
  public boolean isSetSearches() {
    return this.searches != null;
  }

  public void setSearchesIsSet(boolean value) {
    if (!value) {
      this.searches = null;
    }
  }

  public int getResourcesSize() {
    return (this.resources == null) ? 0 : this.resources.size();
  }

  public Enumeration getResourcesEnumeration() {
    return (this.resources == null) ? null : this.resources.elements();
  }

  public void addToResources(com.evernote.edam.type.Resource elem) {
    if (this.resources == null) {
      this.resources = new Vector();
    }
    this.resources.addElement(elem);
  }

  public Vector getResources() {
    return this.resources;
  }

  public void setResources(Vector resources) {
    this.resources = resources;
  }

  public void unsetResources() {
    this.resources = null;
  }

  /** Returns true if field resources is set (has been asigned a value) and false otherwise */
  public boolean isSetResources() {
    return this.resources != null;
  }

  public void setResourcesIsSet(boolean value) {
    if (!value) {
      this.resources = null;
    }
  }

  public int getExpungedNotesSize() {
    return (this.expungedNotes == null) ? 0 : this.expungedNotes.size();
  }

  public Enumeration getExpungedNotesEnumeration() {
    return (this.expungedNotes == null) ? null : this.expungedNotes.elements();
  }

  public void addToExpungedNotes(String elem) {
    if (this.expungedNotes == null) {
      this.expungedNotes = new Vector();
    }
    this.expungedNotes.addElement(elem);
  }

  public Vector getExpungedNotes() {
    return this.expungedNotes;
  }

  public void setExpungedNotes(Vector expungedNotes) {
    this.expungedNotes = expungedNotes;
  }

  public void unsetExpungedNotes() {
    this.expungedNotes = null;
  }

  /** Returns true if field expungedNotes is set (has been asigned a value) and false otherwise */
  public boolean isSetExpungedNotes() {
    return this.expungedNotes != null;
  }

  public void setExpungedNotesIsSet(boolean value) {
    if (!value) {
      this.expungedNotes = null;
    }
  }

  public int getExpungedNotebooksSize() {
    return (this.expungedNotebooks == null) ? 0 : this.expungedNotebooks.size();
  }

  public Enumeration getExpungedNotebooksEnumeration() {
    return (this.expungedNotebooks == null) ? null : this.expungedNotebooks.elements();
  }

  public void addToExpungedNotebooks(String elem) {
    if (this.expungedNotebooks == null) {
      this.expungedNotebooks = new Vector();
    }
    this.expungedNotebooks.addElement(elem);
  }

  public Vector getExpungedNotebooks() {
    return this.expungedNotebooks;
  }

  public void setExpungedNotebooks(Vector expungedNotebooks) {
    this.expungedNotebooks = expungedNotebooks;
  }

  public void unsetExpungedNotebooks() {
    this.expungedNotebooks = null;
  }

  /** Returns true if field expungedNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetExpungedNotebooks() {
    return this.expungedNotebooks != null;
  }

  public void setExpungedNotebooksIsSet(boolean value) {
    if (!value) {
      this.expungedNotebooks = null;
    }
  }

  public int getExpungedTagsSize() {
    return (this.expungedTags == null) ? 0 : this.expungedTags.size();
  }

  public Enumeration getExpungedTagsEnumeration() {
    return (this.expungedTags == null) ? null : this.expungedTags.elements();
  }

  public void addToExpungedTags(String elem) {
    if (this.expungedTags == null) {
      this.expungedTags = new Vector();
    }
    this.expungedTags.addElement(elem);
  }

  public Vector getExpungedTags() {
    return this.expungedTags;
  }

  public void setExpungedTags(Vector expungedTags) {
    this.expungedTags = expungedTags;
  }

  public void unsetExpungedTags() {
    this.expungedTags = null;
  }

  /** Returns true if field expungedTags is set (has been asigned a value) and false otherwise */
  public boolean isSetExpungedTags() {
    return this.expungedTags != null;
  }

  public void setExpungedTagsIsSet(boolean value) {
    if (!value) {
      this.expungedTags = null;
    }
  }

  public int getExpungedSearchesSize() {
    return (this.expungedSearches == null) ? 0 : this.expungedSearches.size();
  }

  public Enumeration getExpungedSearchesEnumeration() {
    return (this.expungedSearches == null) ? null : this.expungedSearches.elements();
  }

  public void addToExpungedSearches(String elem) {
    if (this.expungedSearches == null) {
      this.expungedSearches = new Vector();
    }
    this.expungedSearches.addElement(elem);
  }

  public Vector getExpungedSearches() {
    return this.expungedSearches;
  }

  public void setExpungedSearches(Vector expungedSearches) {
    this.expungedSearches = expungedSearches;
  }

  public void unsetExpungedSearches() {
    this.expungedSearches = null;
  }

  /** Returns true if field expungedSearches is set (has been asigned a value) and false otherwise */
  public boolean isSetExpungedSearches() {
    return this.expungedSearches != null;
  }

  public void setExpungedSearchesIsSet(boolean value) {
    if (!value) {
      this.expungedSearches = null;
    }
  }

  public int getLinkedNotebooksSize() {
    return (this.linkedNotebooks == null) ? 0 : this.linkedNotebooks.size();
  }

  public Enumeration getLinkedNotebooksEnumeration() {
    return (this.linkedNotebooks == null) ? null : this.linkedNotebooks.elements();
  }

  public void addToLinkedNotebooks(com.evernote.edam.type.LinkedNotebook elem) {
    if (this.linkedNotebooks == null) {
      this.linkedNotebooks = new Vector();
    }
    this.linkedNotebooks.addElement(elem);
  }

  public Vector getLinkedNotebooks() {
    return this.linkedNotebooks;
  }

  public void setLinkedNotebooks(Vector linkedNotebooks) {
    this.linkedNotebooks = linkedNotebooks;
  }

  public void unsetLinkedNotebooks() {
    this.linkedNotebooks = null;
  }

  /** Returns true if field linkedNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetLinkedNotebooks() {
    return this.linkedNotebooks != null;
  }

  public void setLinkedNotebooksIsSet(boolean value) {
    if (!value) {
      this.linkedNotebooks = null;
    }
  }

  public int getExpungedLinkedNotebooksSize() {
    return (this.expungedLinkedNotebooks == null) ? 0 : this.expungedLinkedNotebooks.size();
  }

  public Enumeration getExpungedLinkedNotebooksEnumeration() {
    return (this.expungedLinkedNotebooks == null) ? null : this.expungedLinkedNotebooks.elements();
  }

  public void addToExpungedLinkedNotebooks(String elem) {
    if (this.expungedLinkedNotebooks == null) {
      this.expungedLinkedNotebooks = new Vector();
    }
    this.expungedLinkedNotebooks.addElement(elem);
  }

  public Vector getExpungedLinkedNotebooks() {
    return this.expungedLinkedNotebooks;
  }

  public void setExpungedLinkedNotebooks(Vector expungedLinkedNotebooks) {
    this.expungedLinkedNotebooks = expungedLinkedNotebooks;
  }

  public void unsetExpungedLinkedNotebooks() {
    this.expungedLinkedNotebooks = null;
  }

  /** Returns true if field expungedLinkedNotebooks is set (has been asigned a value) and false otherwise */
  public boolean isSetExpungedLinkedNotebooks() {
    return this.expungedLinkedNotebooks != null;
  }

  public void setExpungedLinkedNotebooksIsSet(boolean value) {
    if (!value) {
      this.expungedLinkedNotebooks = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncChunk)
      return this.equals((SyncChunk)that);
    return false;
  }

  public boolean equals(SyncChunk that) {
    if (that == null)
      return false;

    boolean this_present_currentTime = true;
    boolean that_present_currentTime = true;
    if (this_present_currentTime || that_present_currentTime) {
      if (!(this_present_currentTime && that_present_currentTime))
        return false;
      if (this.currentTime != that.currentTime)
        return false;
    }

    boolean this_present_chunkHighUSN = true && this.isSetChunkHighUSN();
    boolean that_present_chunkHighUSN = true && that.isSetChunkHighUSN();
    if (this_present_chunkHighUSN || that_present_chunkHighUSN) {
      if (!(this_present_chunkHighUSN && that_present_chunkHighUSN))
        return false;
      if (this.chunkHighUSN != that.chunkHighUSN)
        return false;
    }

    boolean this_present_updateCount = true;
    boolean that_present_updateCount = true;
    if (this_present_updateCount || that_present_updateCount) {
      if (!(this_present_updateCount && that_present_updateCount))
        return false;
      if (this.updateCount != that.updateCount)
        return false;
    }

    boolean this_present_notes = true && this.isSetNotes();
    boolean that_present_notes = true && that.isSetNotes();
    if (this_present_notes || that_present_notes) {
      if (!(this_present_notes && that_present_notes))
        return false;
      if (!this.notes.equals(that.notes))
        return false;
    }

    boolean this_present_notebooks = true && this.isSetNotebooks();
    boolean that_present_notebooks = true && that.isSetNotebooks();
    if (this_present_notebooks || that_present_notebooks) {
      if (!(this_present_notebooks && that_present_notebooks))
        return false;
      if (!this.notebooks.equals(that.notebooks))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_searches = true && this.isSetSearches();
    boolean that_present_searches = true && that.isSetSearches();
    if (this_present_searches || that_present_searches) {
      if (!(this_present_searches && that_present_searches))
        return false;
      if (!this.searches.equals(that.searches))
        return false;
    }

    boolean this_present_resources = true && this.isSetResources();
    boolean that_present_resources = true && that.isSetResources();
    if (this_present_resources || that_present_resources) {
      if (!(this_present_resources && that_present_resources))
        return false;
      if (!this.resources.equals(that.resources))
        return false;
    }

    boolean this_present_expungedNotes = true && this.isSetExpungedNotes();
    boolean that_present_expungedNotes = true && that.isSetExpungedNotes();
    if (this_present_expungedNotes || that_present_expungedNotes) {
      if (!(this_present_expungedNotes && that_present_expungedNotes))
        return false;
      if (!this.expungedNotes.equals(that.expungedNotes))
        return false;
    }

    boolean this_present_expungedNotebooks = true && this.isSetExpungedNotebooks();
    boolean that_present_expungedNotebooks = true && that.isSetExpungedNotebooks();
    if (this_present_expungedNotebooks || that_present_expungedNotebooks) {
      if (!(this_present_expungedNotebooks && that_present_expungedNotebooks))
        return false;
      if (!this.expungedNotebooks.equals(that.expungedNotebooks))
        return false;
    }

    boolean this_present_expungedTags = true && this.isSetExpungedTags();
    boolean that_present_expungedTags = true && that.isSetExpungedTags();
    if (this_present_expungedTags || that_present_expungedTags) {
      if (!(this_present_expungedTags && that_present_expungedTags))
        return false;
      if (!this.expungedTags.equals(that.expungedTags))
        return false;
    }

    boolean this_present_expungedSearches = true && this.isSetExpungedSearches();
    boolean that_present_expungedSearches = true && that.isSetExpungedSearches();
    if (this_present_expungedSearches || that_present_expungedSearches) {
      if (!(this_present_expungedSearches && that_present_expungedSearches))
        return false;
      if (!this.expungedSearches.equals(that.expungedSearches))
        return false;
    }

    boolean this_present_linkedNotebooks = true && this.isSetLinkedNotebooks();
    boolean that_present_linkedNotebooks = true && that.isSetLinkedNotebooks();
    if (this_present_linkedNotebooks || that_present_linkedNotebooks) {
      if (!(this_present_linkedNotebooks && that_present_linkedNotebooks))
        return false;
      if (!this.linkedNotebooks.equals(that.linkedNotebooks))
        return false;
    }

    boolean this_present_expungedLinkedNotebooks = true && this.isSetExpungedLinkedNotebooks();
    boolean that_present_expungedLinkedNotebooks = true && that.isSetExpungedLinkedNotebooks();
    if (this_present_expungedLinkedNotebooks || that_present_expungedLinkedNotebooks) {
      if (!(this_present_expungedLinkedNotebooks && that_present_expungedLinkedNotebooks))
        return false;
      if (!this.expungedLinkedNotebooks.equals(that.expungedLinkedNotebooks))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SyncChunk other = (SyncChunk)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetCurrentTime(), other.isSetCurrentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentTime()) {
      lastComparison = TBaseHelper.compareTo(this.currentTime, other.currentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetChunkHighUSN(), other.isSetChunkHighUSN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunkHighUSN()) {
      lastComparison = TBaseHelper.compareTo(this.chunkHighUSN, other.chunkHighUSN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUpdateCount(), other.isSetUpdateCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateCount()) {
      lastComparison = TBaseHelper.compareTo(this.updateCount, other.updateCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetNotes(), other.isSetNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotes()) {
      lastComparison = TBaseHelper.compareTo(this.notes, other.notes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetNotebooks(), other.isSetNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotebooks()) {
      lastComparison = TBaseHelper.compareTo(this.notebooks, other.notebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTags(), other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSearches(), other.isSetSearches());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearches()) {
      lastComparison = TBaseHelper.compareTo(this.searches, other.searches);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetResources(), other.isSetResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResources()) {
      lastComparison = TBaseHelper.compareTo(this.resources, other.resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetExpungedNotes(), other.isSetExpungedNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpungedNotes()) {
      lastComparison = TBaseHelper.compareTo(this.expungedNotes, other.expungedNotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetExpungedNotebooks(), other.isSetExpungedNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpungedNotebooks()) {
      lastComparison = TBaseHelper.compareTo(this.expungedNotebooks, other.expungedNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetExpungedTags(), other.isSetExpungedTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpungedTags()) {
      lastComparison = TBaseHelper.compareTo(this.expungedTags, other.expungedTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetExpungedSearches(), other.isSetExpungedSearches());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpungedSearches()) {
      lastComparison = TBaseHelper.compareTo(this.expungedSearches, other.expungedSearches);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLinkedNotebooks(), other.isSetLinkedNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkedNotebooks()) {
      lastComparison = TBaseHelper.compareTo(this.linkedNotebooks, other.linkedNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetExpungedLinkedNotebooks(), other.isSetExpungedLinkedNotebooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpungedLinkedNotebooks()) {
      lastComparison = TBaseHelper.compareTo(this.expungedLinkedNotebooks, other.expungedLinkedNotebooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CURRENT_TIME
          if (field.type == TType.I64) {
            this.currentTime = iprot.readI64();
            setCurrentTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CHUNK_HIGH_USN
          if (field.type == TType.I32) {
            this.chunkHighUSN = iprot.readI32();
            setChunkHighUSNIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // UPDATE_COUNT
          if (field.type == TType.I32) {
            this.updateCount = iprot.readI32();
            setUpdateCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // NOTES
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.notes = new Vector(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                com.evernote.edam.type.Note _elem2;
                _elem2 = new com.evernote.edam.type.Note();
                _elem2.read(iprot);
                this.notes.addElement(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // NOTEBOOKS
          if (field.type == TType.LIST) {
            {
              TList _list3 = iprot.readListBegin();
              this.notebooks = new Vector(_list3.size);
              for (int _i4 = 0; _i4 < _list3.size; ++_i4)
              {
                com.evernote.edam.type.Notebook _elem5;
                _elem5 = new com.evernote.edam.type.Notebook();
                _elem5.read(iprot);
                this.notebooks.addElement(_elem5);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TAGS
          if (field.type == TType.LIST) {
            {
              TList _list6 = iprot.readListBegin();
              this.tags = new Vector(_list6.size);
              for (int _i7 = 0; _i7 < _list6.size; ++_i7)
              {
                com.evernote.edam.type.Tag _elem8;
                _elem8 = new com.evernote.edam.type.Tag();
                _elem8.read(iprot);
                this.tags.addElement(_elem8);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SEARCHES
          if (field.type == TType.LIST) {
            {
              TList _list9 = iprot.readListBegin();
              this.searches = new Vector(_list9.size);
              for (int _i10 = 0; _i10 < _list9.size; ++_i10)
              {
                com.evernote.edam.type.SavedSearch _elem11;
                _elem11 = new com.evernote.edam.type.SavedSearch();
                _elem11.read(iprot);
                this.searches.addElement(_elem11);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // RESOURCES
          if (field.type == TType.LIST) {
            {
              TList _list12 = iprot.readListBegin();
              this.resources = new Vector(_list12.size);
              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
              {
                com.evernote.edam.type.Resource _elem14;
                _elem14 = new com.evernote.edam.type.Resource();
                _elem14.read(iprot);
                this.resources.addElement(_elem14);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // EXPUNGED_NOTES
          if (field.type == TType.LIST) {
            {
              TList _list15 = iprot.readListBegin();
              this.expungedNotes = new Vector(_list15.size);
              for (int _i16 = 0; _i16 < _list15.size; ++_i16)
              {
                String _elem17;
                _elem17 = iprot.readString();
                this.expungedNotes.addElement(_elem17);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // EXPUNGED_NOTEBOOKS
          if (field.type == TType.LIST) {
            {
              TList _list18 = iprot.readListBegin();
              this.expungedNotebooks = new Vector(_list18.size);
              for (int _i19 = 0; _i19 < _list18.size; ++_i19)
              {
                String _elem20;
                _elem20 = iprot.readString();
                this.expungedNotebooks.addElement(_elem20);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // EXPUNGED_TAGS
          if (field.type == TType.LIST) {
            {
              TList _list21 = iprot.readListBegin();
              this.expungedTags = new Vector(_list21.size);
              for (int _i22 = 0; _i22 < _list21.size; ++_i22)
              {
                String _elem23;
                _elem23 = iprot.readString();
                this.expungedTags.addElement(_elem23);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // EXPUNGED_SEARCHES
          if (field.type == TType.LIST) {
            {
              TList _list24 = iprot.readListBegin();
              this.expungedSearches = new Vector(_list24.size);
              for (int _i25 = 0; _i25 < _list24.size; ++_i25)
              {
                String _elem26;
                _elem26 = iprot.readString();
                this.expungedSearches.addElement(_elem26);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // LINKED_NOTEBOOKS
          if (field.type == TType.LIST) {
            {
              TList _list27 = iprot.readListBegin();
              this.linkedNotebooks = new Vector(_list27.size);
              for (int _i28 = 0; _i28 < _list27.size; ++_i28)
              {
                com.evernote.edam.type.LinkedNotebook _elem29;
                _elem29 = new com.evernote.edam.type.LinkedNotebook();
                _elem29.read(iprot);
                this.linkedNotebooks.addElement(_elem29);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // EXPUNGED_LINKED_NOTEBOOKS
          if (field.type == TType.LIST) {
            {
              TList _list30 = iprot.readListBegin();
              this.expungedLinkedNotebooks = new Vector(_list30.size);
              for (int _i31 = 0; _i31 < _list30.size; ++_i31)
              {
                String _elem32;
                _elem32 = iprot.readString();
                this.expungedLinkedNotebooks.addElement(_elem32);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CURRENT_TIME_FIELD_DESC);
    oprot.writeI64(this.currentTime);
    oprot.writeFieldEnd();
    if (isSetChunkHighUSN()) {
      oprot.writeFieldBegin(CHUNK_HIGH_USN_FIELD_DESC);
      oprot.writeI32(this.chunkHighUSN);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(UPDATE_COUNT_FIELD_DESC);
    oprot.writeI32(this.updateCount);
    oprot.writeFieldEnd();
    if (this.notes != null) {
      if (isSetNotes()) {
        oprot.writeFieldBegin(NOTES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.notes.size()));
          for (Enumeration _iter33_enum = this.notes.elements(); _iter33_enum.hasMoreElements(); )           {
            com.evernote.edam.type.Note _iter33 = (com.evernote.edam.type.Note)_iter33_enum.nextElement();
            _iter33.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.notebooks != null) {
      if (isSetNotebooks()) {
        oprot.writeFieldBegin(NOTEBOOKS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.notebooks.size()));
          for (Enumeration _iter34_enum = this.notebooks.elements(); _iter34_enum.hasMoreElements(); )           {
            com.evernote.edam.type.Notebook _iter34 = (com.evernote.edam.type.Notebook)_iter34_enum.nextElement();
            _iter34.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.tags != null) {
      if (isSetTags()) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.tags.size()));
          for (Enumeration _iter35_enum = this.tags.elements(); _iter35_enum.hasMoreElements(); )           {
            com.evernote.edam.type.Tag _iter35 = (com.evernote.edam.type.Tag)_iter35_enum.nextElement();
            _iter35.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.searches != null) {
      if (isSetSearches()) {
        oprot.writeFieldBegin(SEARCHES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.searches.size()));
          for (Enumeration _iter36_enum = this.searches.elements(); _iter36_enum.hasMoreElements(); )           {
            com.evernote.edam.type.SavedSearch _iter36 = (com.evernote.edam.type.SavedSearch)_iter36_enum.nextElement();
            _iter36.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.resources != null) {
      if (isSetResources()) {
        oprot.writeFieldBegin(RESOURCES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.resources.size()));
          for (Enumeration _iter37_enum = this.resources.elements(); _iter37_enum.hasMoreElements(); )           {
            com.evernote.edam.type.Resource _iter37 = (com.evernote.edam.type.Resource)_iter37_enum.nextElement();
            _iter37.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.expungedNotes != null) {
      if (isSetExpungedNotes()) {
        oprot.writeFieldBegin(EXPUNGED_NOTES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.expungedNotes.size()));
          for (Enumeration _iter38_enum = this.expungedNotes.elements(); _iter38_enum.hasMoreElements(); )           {
            String _iter38 = (String)_iter38_enum.nextElement();
            oprot.writeString(_iter38);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.expungedNotebooks != null) {
      if (isSetExpungedNotebooks()) {
        oprot.writeFieldBegin(EXPUNGED_NOTEBOOKS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.expungedNotebooks.size()));
          for (Enumeration _iter39_enum = this.expungedNotebooks.elements(); _iter39_enum.hasMoreElements(); )           {
            String _iter39 = (String)_iter39_enum.nextElement();
            oprot.writeString(_iter39);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.expungedTags != null) {
      if (isSetExpungedTags()) {
        oprot.writeFieldBegin(EXPUNGED_TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.expungedTags.size()));
          for (Enumeration _iter40_enum = this.expungedTags.elements(); _iter40_enum.hasMoreElements(); )           {
            String _iter40 = (String)_iter40_enum.nextElement();
            oprot.writeString(_iter40);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.expungedSearches != null) {
      if (isSetExpungedSearches()) {
        oprot.writeFieldBegin(EXPUNGED_SEARCHES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.expungedSearches.size()));
          for (Enumeration _iter41_enum = this.expungedSearches.elements(); _iter41_enum.hasMoreElements(); )           {
            String _iter41 = (String)_iter41_enum.nextElement();
            oprot.writeString(_iter41);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.linkedNotebooks != null) {
      if (isSetLinkedNotebooks()) {
        oprot.writeFieldBegin(LINKED_NOTEBOOKS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.linkedNotebooks.size()));
          for (Enumeration _iter42_enum = this.linkedNotebooks.elements(); _iter42_enum.hasMoreElements(); )           {
            com.evernote.edam.type.LinkedNotebook _iter42 = (com.evernote.edam.type.LinkedNotebook)_iter42_enum.nextElement();
            _iter42.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.expungedLinkedNotebooks != null) {
      if (isSetExpungedLinkedNotebooks()) {
        oprot.writeFieldBegin(EXPUNGED_LINKED_NOTEBOOKS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.expungedLinkedNotebooks.size()));
          for (Enumeration _iter43_enum = this.expungedLinkedNotebooks.elements(); _iter43_enum.hasMoreElements(); )           {
            String _iter43 = (String)_iter43_enum.nextElement();
            oprot.writeString(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SyncChunk(");
    boolean first = true;

    sb.append("currentTime:");
    sb.append(this.currentTime);
    first = false;
    if (isSetChunkHighUSN()) {
      if (!first) sb.append(", ");
      sb.append("chunkHighUSN:");
      sb.append(this.chunkHighUSN);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("updateCount:");
    sb.append(this.updateCount);
    first = false;
    if (isSetNotes()) {
      if (!first) sb.append(", ");
      sb.append("notes:");
      if (this.notes == null) {
        sb.append("null");
      } else {
        sb.append(this.notes);
      }
      first = false;
    }
    if (isSetNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("notebooks:");
      if (this.notebooks == null) {
        sb.append("null");
      } else {
        sb.append(this.notebooks);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetSearches()) {
      if (!first) sb.append(", ");
      sb.append("searches:");
      if (this.searches == null) {
        sb.append("null");
      } else {
        sb.append(this.searches);
      }
      first = false;
    }
    if (isSetResources()) {
      if (!first) sb.append(", ");
      sb.append("resources:");
      if (this.resources == null) {
        sb.append("null");
      } else {
        sb.append(this.resources);
      }
      first = false;
    }
    if (isSetExpungedNotes()) {
      if (!first) sb.append(", ");
      sb.append("expungedNotes:");
      if (this.expungedNotes == null) {
        sb.append("null");
      } else {
        sb.append(this.expungedNotes);
      }
      first = false;
    }
    if (isSetExpungedNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("expungedNotebooks:");
      if (this.expungedNotebooks == null) {
        sb.append("null");
      } else {
        sb.append(this.expungedNotebooks);
      }
      first = false;
    }
    if (isSetExpungedTags()) {
      if (!first) sb.append(", ");
      sb.append("expungedTags:");
      if (this.expungedTags == null) {
        sb.append("null");
      } else {
        sb.append(this.expungedTags);
      }
      first = false;
    }
    if (isSetExpungedSearches()) {
      if (!first) sb.append(", ");
      sb.append("expungedSearches:");
      if (this.expungedSearches == null) {
        sb.append("null");
      } else {
        sb.append(this.expungedSearches);
      }
      first = false;
    }
    if (isSetLinkedNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("linkedNotebooks:");
      if (this.linkedNotebooks == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedNotebooks);
      }
      first = false;
    }
    if (isSetExpungedLinkedNotebooks()) {
      if (!first) sb.append(", ");
      sb.append("expungedLinkedNotebooks:");
      if (this.expungedLinkedNotebooks == null) {
        sb.append("null");
      } else {
        sb.append(this.expungedLinkedNotebooks);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (!isSetCurrentTime()) {
      throw new TProtocolException("Required field 'currentTime' is unset! Struct:" + toString());
    }

    if (!isSetUpdateCount()) {
      throw new TProtocolException("Required field 'updateCount' is unset! Struct:" + toString());
    }

  }

}

