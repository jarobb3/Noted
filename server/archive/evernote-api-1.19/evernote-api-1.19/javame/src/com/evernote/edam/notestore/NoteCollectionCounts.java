/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore;

import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 *  A data structure representing the number of notes for each notebook
 *  and tag with a non-zero set of applicable notes.
 * 
 * <dl>
 *  <dt>notebookCounts</dt>
 *    <dd>
 *    A mapping from the Notebook GUID to the number of
 *    notes (from some selection) that are in the corresponding notebook.
 *    </dd>
 * 
 *  <dt>tagCounts</dt>
 *    <dd>
 *    A mapping from the Tag GUID to the number of notes (from some
 *    selection) that have the corresponding tag.
 *    </dd>
 * 
 *  <dt>trashCount</dt>
 *    <dd>
 *    If this is set, then this is the number of notes that are in the trash.
 *    If this is not set, then the number of notes in the trash hasn't been
 *    reported.  (I.e. if there are no notes in the trash, this will be set
 *    to 0.)
 *    </dd>
 *  </dl>
 */
public class NoteCollectionCounts implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("NoteCollectionCounts");

  private static final TField NOTEBOOK_COUNTS_FIELD_DESC = new TField("notebookCounts", TType.MAP, (short)1);
  private static final TField TAG_COUNTS_FIELD_DESC = new TField("tagCounts", TType.MAP, (short)2);
  private static final TField TRASH_COUNT_FIELD_DESC = new TField("trashCount", TType.I32, (short)3);

  private Hashtable notebookCounts;
  private Hashtable tagCounts;
  private int trashCount;

  // isset id assignments
  private static final int __TRASHCOUNT_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public NoteCollectionCounts() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NoteCollectionCounts(NoteCollectionCounts other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetNotebookCounts()) {
      Hashtable __this__notebookCounts = new Hashtable();
      for (Enumeration other_enum = other.notebookCounts.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        Integer other_element_value = (Integer)other.notebookCounts.get(other_element_key);

        String __this__notebookCounts_copy_key = other_element_key;

        Integer __this__notebookCounts_copy_value = other_element_value;

        __this__notebookCounts.put(__this__notebookCounts_copy_key, __this__notebookCounts_copy_value);
      }
      this.notebookCounts = __this__notebookCounts;
    }
    if (other.isSetTagCounts()) {
      Hashtable __this__tagCounts = new Hashtable();
      for (Enumeration other_enum = other.tagCounts.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        Integer other_element_value = (Integer)other.tagCounts.get(other_element_key);

        String __this__tagCounts_copy_key = other_element_key;

        Integer __this__tagCounts_copy_value = other_element_value;

        __this__tagCounts.put(__this__tagCounts_copy_key, __this__tagCounts_copy_value);
      }
      this.tagCounts = __this__tagCounts;
    }
    this.trashCount = other.trashCount;
  }

  public NoteCollectionCounts deepCopy() {
    return new NoteCollectionCounts(this);
  }

  public NoteCollectionCounts clone() {
    return new NoteCollectionCounts(this);
  }

  public void clear() {
    this.notebookCounts = null;
    this.tagCounts = null;
    setTrashCountIsSet(false);
    this.trashCount = 0;
  }

  public int getNotebookCountsSize() {
    return (this.notebookCounts == null) ? 0 : this.notebookCounts.size();
  }

  public void putToNotebookCounts(String key, Integer val) {
    if (this.notebookCounts == null) {
      this.notebookCounts = new Hashtable();
    }
    this.notebookCounts.put(key, val);
  }

  public Hashtable getNotebookCounts() {
    return this.notebookCounts;
  }

  public void setNotebookCounts(Hashtable notebookCounts) {
    this.notebookCounts = notebookCounts;
  }

  public void unsetNotebookCounts() {
    this.notebookCounts = null;
  }

  /** Returns true if field notebookCounts is set (has been asigned a value) and false otherwise */
  public boolean isSetNotebookCounts() {
    return this.notebookCounts != null;
  }

  public void setNotebookCountsIsSet(boolean value) {
    if (!value) {
      this.notebookCounts = null;
    }
  }

  public int getTagCountsSize() {
    return (this.tagCounts == null) ? 0 : this.tagCounts.size();
  }

  public void putToTagCounts(String key, Integer val) {
    if (this.tagCounts == null) {
      this.tagCounts = new Hashtable();
    }
    this.tagCounts.put(key, val);
  }

  public Hashtable getTagCounts() {
    return this.tagCounts;
  }

  public void setTagCounts(Hashtable tagCounts) {
    this.tagCounts = tagCounts;
  }

  public void unsetTagCounts() {
    this.tagCounts = null;
  }

  /** Returns true if field tagCounts is set (has been asigned a value) and false otherwise */
  public boolean isSetTagCounts() {
    return this.tagCounts != null;
  }

  public void setTagCountsIsSet(boolean value) {
    if (!value) {
      this.tagCounts = null;
    }
  }

  public int getTrashCount() {
    return this.trashCount;
  }

  public void setTrashCount(int trashCount) {
    this.trashCount = trashCount;
    setTrashCountIsSet(true);
  }

  public void unsetTrashCount() {
    __isset_vector[__TRASHCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field trashCount is set (has been asigned a value) and false otherwise */
  public boolean isSetTrashCount() {
    return __isset_vector[__TRASHCOUNT_ISSET_ID];
  }

  public void setTrashCountIsSet(boolean value) {
    __isset_vector[__TRASHCOUNT_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NoteCollectionCounts)
      return this.equals((NoteCollectionCounts)that);
    return false;
  }

  public boolean equals(NoteCollectionCounts that) {
    if (that == null)
      return false;

    boolean this_present_notebookCounts = true && this.isSetNotebookCounts();
    boolean that_present_notebookCounts = true && that.isSetNotebookCounts();
    if (this_present_notebookCounts || that_present_notebookCounts) {
      if (!(this_present_notebookCounts && that_present_notebookCounts))
        return false;
      if (!this.notebookCounts.equals(that.notebookCounts))
        return false;
    }

    boolean this_present_tagCounts = true && this.isSetTagCounts();
    boolean that_present_tagCounts = true && that.isSetTagCounts();
    if (this_present_tagCounts || that_present_tagCounts) {
      if (!(this_present_tagCounts && that_present_tagCounts))
        return false;
      if (!this.tagCounts.equals(that.tagCounts))
        return false;
    }

    boolean this_present_trashCount = true && this.isSetTrashCount();
    boolean that_present_trashCount = true && that.isSetTrashCount();
    if (this_present_trashCount || that_present_trashCount) {
      if (!(this_present_trashCount && that_present_trashCount))
        return false;
      if (this.trashCount != that.trashCount)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    NoteCollectionCounts other = (NoteCollectionCounts)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetNotebookCounts(), other.isSetNotebookCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotebookCounts()) {
      lastComparison = TBaseHelper.compareTo(this.notebookCounts, other.notebookCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTagCounts(), other.isSetTagCounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagCounts()) {
      lastComparison = TBaseHelper.compareTo(this.tagCounts, other.tagCounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTrashCount(), other.isSetTrashCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrashCount()) {
      lastComparison = TBaseHelper.compareTo(this.trashCount, other.trashCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NOTEBOOK_COUNTS
          if (field.type == TType.MAP) {
            {
              TMap _map76 = iprot.readMapBegin();
              this.notebookCounts = new Hashtable(2*_map76.size);
              for (int _i77 = 0; _i77 < _map76.size; ++_i77)
              {
                String _key78;
                int _val79;
                _key78 = iprot.readString();
                _val79 = iprot.readI32();
                this.notebookCounts.put(_key78, new Integer(_val79));
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TAG_COUNTS
          if (field.type == TType.MAP) {
            {
              TMap _map80 = iprot.readMapBegin();
              this.tagCounts = new Hashtable(2*_map80.size);
              for (int _i81 = 0; _i81 < _map80.size; ++_i81)
              {
                String _key82;
                int _val83;
                _key82 = iprot.readString();
                _val83 = iprot.readI32();
                this.tagCounts.put(_key82, new Integer(_val83));
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TRASH_COUNT
          if (field.type == TType.I32) {
            this.trashCount = iprot.readI32();
            setTrashCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.notebookCounts != null) {
      if (isSetNotebookCounts()) {
        oprot.writeFieldBegin(NOTEBOOK_COUNTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, this.notebookCounts.size()));
          for (Enumeration _iter84_enum = this.notebookCounts.keys(); _iter84_enum.hasMoreElements(); )           {
            String _iter84 = (String)_iter84_enum.nextElement();
            oprot.writeString(_iter84);
            oprot.writeI32((Integer)this.notebookCounts.get(_iter84));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.tagCounts != null) {
      if (isSetTagCounts()) {
        oprot.writeFieldBegin(TAG_COUNTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, this.tagCounts.size()));
          for (Enumeration _iter85_enum = this.tagCounts.keys(); _iter85_enum.hasMoreElements(); )           {
            String _iter85 = (String)_iter85_enum.nextElement();
            oprot.writeString(_iter85);
            oprot.writeI32((Integer)this.tagCounts.get(_iter85));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetTrashCount()) {
      oprot.writeFieldBegin(TRASH_COUNT_FIELD_DESC);
      oprot.writeI32(this.trashCount);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("NoteCollectionCounts(");
    boolean first = true;

    if (isSetNotebookCounts()) {
      sb.append("notebookCounts:");
      if (this.notebookCounts == null) {
        sb.append("null");
      } else {
        sb.append(this.notebookCounts);
      }
      first = false;
    }
    if (isSetTagCounts()) {
      if (!first) sb.append(", ");
      sb.append("tagCounts:");
      if (this.tagCounts == null) {
        sb.append("null");
      } else {
        sb.append(this.tagCounts);
      }
      first = false;
    }
    if (isSetTrashCount()) {
      if (!first) sb.append(", ");
      sb.append("trashCount:");
      sb.append(this.trashCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

